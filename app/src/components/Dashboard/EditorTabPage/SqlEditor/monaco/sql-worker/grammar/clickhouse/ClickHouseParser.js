// Generated from /Users/igor/sites/tabix.ts21/grammar/clickhouse/ClickHouseParser.g4 by ANTLR 4.9.3
// jshint ignore: start
import antlr4 from 'antlr4';
import ClickHouseParserListener from './ClickHouseParserListener.js';
import ClickHouseParserVisitor from './ClickHouseParserVisitor.js';


const serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786",
    "\u5964\u0003\u00e8\u07f6\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004",
    "\u0004\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t",
    "\u0007\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004",
    "\f\t\f\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010",
    "\t\u0010\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013",
    "\u0004\u0014\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017",
    "\t\u0017\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a",
    "\u0004\u001b\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e",
    "\t\u001e\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#",
    "\t#\u0004$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004",
    "*\t*\u0004+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u0004",
    "1\t1\u00042\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u0004",
    "8\t8\u00049\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004",
    "?\t?\u0004@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004",
    "F\tF\u0004G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004",
    "M\tM\u0004N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004",
    "T\tT\u0004U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004",
    "[\t[\u0004\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004",
    "b\tb\u0004c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004",
    "i\ti\u0004j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004",
    "p\tp\u0004q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0003",
    "\u0002\u0003\u0002\u0007\u0002\u00ef\n\u0002\f\u0002\u000e\u0002\u00f2",
    "\u000b\u0002\u0007\u0002\u00f4\n\u0002\f\u0002\u000e\u0002\u00f7\u000b",
    "\u0002\u0003\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003",
    "\u0003\u0005\u0003\u00ff\n\u0003\u0003\u0003\u0003\u0003\u0005\u0003",
    "\u0103\n\u0003\u0003\u0003\u0005\u0003\u0106\n\u0003\u0003\u0003\u0005",
    "\u0003\u0109\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0005\u0004\u011d\n\u0004\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0003\u0005\u0005\u0005\u0123\n\u0005\u0003\u0005",
    "\u0003\u0005\u0003\u0005\u0007\u0005\u0128\n\u0005\f\u0005\u000e\u0005",
    "\u012b\u000b\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0005\u0006\u0132\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u0137\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u013e\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u0143\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u014a\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u014f\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0155\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u015b\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0160\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0166\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u016b\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0171\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0176\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u017c\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u018a\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u0191\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u0198\n\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u019f\n",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01a5",
    "\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01aa\n\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01b0\n",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01b5\n\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01bb\n",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u01c4\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u01ce\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01d8",
    "\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u01ec\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01f4\n\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u0203\n\u0006\u0003\u0007\u0003\u0007\u0003",
    "\u0007\u0007\u0007\u0208\n\u0007\f\u0007\u000e\u0007\u020b\u000b\u0007",
    "\u0003\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0003\n\u0005\n\u0218\n\n\u0003\u000b\u0003\u000b\u0003\u000b",
    "\u0003\u000b\u0005\u000b\u021e\n\u000b\u0003\f\u0003\f\u0003\f\u0003",
    "\f\u0005\f\u0224\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r",
    "\u022b\n\r\u0003\r\u0003\r\u0005\r\u022f\n\r\u0003\r\u0005\r\u0232\n",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0238\n\r\u0003\r\u0005\r",
    "\u023b\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0241\n\r\u0003\r",
    "\u0003\r\u0005\r\u0245\n\r\u0003\r\u0005\r\u0248\n\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0253",
    "\n\r\u0003\r\u0003\r\u0005\r\u0257\n\r\u0003\r\u0005\r\u025a\n\r\u0003",
    "\r\u0003\r\u0003\r\u0005\r\u025f\n\r\u0005\r\u0261\n\r\u0003\r\u0005",
    "\r\u0264\n\r\u0003\r\u0005\r\u0267\n\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0271\n\r\u0003\r\u0003\r",
    "\u0005\r\u0275\n\r\u0003\r\u0005\r\u0278\n\r\u0003\r\u0005\r\u027b\n",
    "\r\u0003\r\u0003\r\u0003\r\u0005\r\u0280\n\r\u0005\r\u0282\n\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u028a\n\r\u0003\r",
    "\u0005\r\u028d\n\r\u0003\r\u0005\r\u0290\n\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0005\r\u0296\n\r\u0003\r\u0003\r\u0005\r\u029a\n\r\u0003\r",
    "\u0005\r\u029d\n\r\u0003\r\u0005\r\u02a0\n\r\u0003\r\u0005\r\u02a3\n",
    "\r\u0003\r\u0005\r\u02a6\n\r\u0003\r\u0003\r\u0003\r\u0005\r\u02ab\n",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u02b1\n\r\u0003\r\u0003\r",
    "\u0005\r\u02b5\n\r\u0003\r\u0005\r\u02b8\n\r\u0003\r\u0005\r\u02bb\n",
    "\r\u0003\r\u0003\r\u0005\r\u02bf\n\r\u0003\u000e\u0003\u000e\u0003\u000e",
    "\u0003\u000e\u0007\u000e\u02c5\n\u000e\f\u000e\u000e\u000e\u02c8\u000b",
    "\u000e\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003",
    "\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007",
    "\u000f\u02e1\n\u000f\f\u000f\u000e\u000f\u02e4\u000b\u000f\u0003\u0010",
    "\u0005\u0010\u02e7\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003",
    "\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u02fd",
    "\n\u0010\f\u0010\u000e\u0010\u0300\u000b\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u030a\n\u0012\u0003\u0012\u0005\u0012\u030d\n\u0012\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u0314",
    "\n\u0013\f\u0013\u000e\u0013\u0317\u000b\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u0327\n\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0330\n\u0015",
    "\f\u0015\u000e\u0015\u0333\u000b\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u0344\n\u0016\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u0351\n\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007",
    "\u001c\u0360\n\u001c\f\u001c\u000e\u001c\u0363\u000b\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c",
    "\u036b\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u0386\n\u001d\f\u001d\u000e",
    "\u001d\u0389\u000b\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0003!\u0003!\u0003!\u0003!\u0007!\u039b\n!\f!\u000e!\u039e",
    "\u000b!\u0003\"\u0003\"\u0005\"\u03a2\n\"\u0003\"\u0003\"\u0003\"\u0005",
    "\"\u03a7\n\"\u0003\"\u0005\"\u03aa\n\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u03b6\n#\u0003$\u0003$\u0003",
    "$\u0005$\u03bb\n$\u0003$\u0003$\u0005$\u03bf\n$\u0003$\u0005$\u03c2",
    "\n$\u0003$\u0003$\u0005$\u03c6\n$\u0003$\u0003$\u0005$\u03ca\n$\u0003",
    "$\u0003$\u0003$\u0005$\u03cf\n$\u0003$\u0005$\u03d2\n$\u0003$\u0003",
    "$\u0005$\u03d6\n$\u0005$\u03d8\n$\u0003%\u0003%\u0003%\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003(",
    "\u0003(\u0003(\u0003(\u0003(\u0007(\u03ec\n(\f(\u000e(\u03ef\u000b(",
    "\u0003(\u0003(\u0003)\u0003)\u0003)\u0005)\u03f6\n)\u0003)\u0005)\u03f9",
    "\n)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u0403",
    "\n*\u0003+\u0003+\u0005+\u0407\n+\u0003+\u0003+\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u040f\n,\u0003,\u0003,\u0005,\u0413\n,\u0003,\u0003",
    ",\u0003,\u0005,\u0418\n,\u0003,\u0003,\u0005,\u041c\n,\u0003,\u0003",
    ",\u0005,\u0420\n,\u0003,\u0003,\u0005,\u0424\n,\u0003,\u0003,\u0005",
    ",\u0428\n,\u0005,\u042a\n,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0005-\u0432\n-\u0003-\u0003-\u0005-\u0436\n-\u0003-\u0005-\u0439",
    "\n-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u0441\n.\u0003",
    "/\u0003/\u0003/\u0005/\u0446\n/\u0003/\u0003/\u0003/\u0005/\u044b\n",
    "/\u0003/\u0005/\u044e\n/\u0003/\u0003/\u00030\u00030\u00030\u00030\u0007",
    "0\u0456\n0\f0\u000e0\u0459\u000b0\u00030\u00030\u00031\u00031\u0003",
    "1\u00031\u00031\u00051\u0462\n1\u00031\u00031\u00051\u0466\n1\u0003",
    "2\u00032\u00032\u00052\u046b\n2\u00032\u00032\u00052\u046f\n2\u0003",
    "3\u00033\u00033\u00033\u00053\u0475\n3\u00033\u00053\u0478\n3\u0003",
    "3\u00053\u047b\n3\u00033\u00053\u047e\n3\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00074\u048a\n4\f4\u000e",
    "4\u048d\u000b4\u00034\u00054\u0490\n4\u00035\u00035\u00055\u0494\n5",
    "\u00035\u00035\u00035\u00055\u0499\n5\u00035\u00055\u049c\n5\u00035",
    "\u00035\u00036\u00036\u00036\u00036\u00076\u04a4\n6\f6\u000e6\u04a7",
    "\u000b6\u00037\u00037\u00037\u00037\u00037\u00057\u04ae\n7\u00038\u0005",
    "8\u04b1\n8\u00038\u00038\u00058\u04b5\n8\u00038\u00058\u04b8\n8\u0003",
    "8\u00038\u00058\u04bc\n8\u00038\u00058\u04bf\n8\u00038\u00058\u04c2",
    "\n8\u00038\u00058\u04c5\n8\u00038\u00058\u04c8\n8\u00038\u00058\u04cb",
    "\n8\u00038\u00038\u00058\u04cf\n8\u00038\u00038\u00058\u04d3\n8\u0003",
    "8\u00058\u04d6\n8\u00038\u00058\u04d9\n8\u00038\u00058\u04dc\n8\u0003",
    "8\u00058\u04df\n8\u00038\u00058\u04e2\n8\u00039\u00039\u00039\u0003",
    ":\u0003:\u0003:\u0003:\u0005:\u04eb\n:\u0003;\u0003;\u0003;\u0003<\u0005",
    "<\u04f1\n<\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u050c\n@\u0003A\u0003",
    "A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0005E\u0522",
    "\nE\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0005G\u052a\nG\u0003",
    "G\u0005G\u052d\nG\u0003G\u0003G\u0003G\u0003G\u0005G\u0533\nG\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0005G\u053b\nG\u0003G\u0005G\u053e",
    "\nG\u0003G\u0003G\u0003G\u0003G\u0007G\u0544\nG\fG\u000eG\u0547\u000b",
    "G\u0003H\u0005H\u054a\nH\u0003H\u0003H\u0003H\u0005H\u054f\nH\u0003",
    "H\u0005H\u0552\nH\u0003H\u0005H\u0555\nH\u0003H\u0003H\u0005H\u0559",
    "\nH\u0003H\u0003H\u0005H\u055d\nH\u0003H\u0005H\u0560\nH\u0005H\u0562",
    "\nH\u0003H\u0005H\u0565\nH\u0003H\u0003H\u0005H\u0569\nH\u0003H\u0003",
    "H\u0005H\u056d\nH\u0003H\u0005H\u0570\nH\u0005H\u0572\nH\u0005H\u0574",
    "\nH\u0003I\u0005I\u0577\nI\u0003I\u0003I\u0003I\u0005I\u057c\nI\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u0587",
    "\nJ\u0003K\u0003K\u0003K\u0003K\u0005K\u058d\nK\u0003L\u0003L\u0003",
    "L\u0005L\u0592\nL\u0003M\u0003M\u0003M\u0007M\u0597\nM\fM\u000eM\u059a",
    "\u000bM\u0003N\u0003N\u0005N\u059e\nN\u0003N\u0003N\u0005N\u05a2\nN",
    "\u0003N\u0003N\u0005N\u05a6\nN\u0003O\u0003O\u0003O\u0005O\u05ab\nO",
    "\u0003P\u0003P\u0003P\u0007P\u05b0\nP\fP\u000eP\u05b3\u000bP\u0003Q",
    "\u0003Q\u0003Q\u0003Q\u0003R\u0005R\u05ba\nR\u0003R\u0005R\u05bd\nR",
    "\u0003R\u0005R\u05c0\nR\u0003S\u0003S\u0003S\u0003S\u0003T\u0003T\u0003",
    "T\u0003T\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0005V\u05d3\nV\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0005W\u05e1\nW\u0003X\u0003X\u0003X\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0005Y\u05f1\nY\u0003Y\u0005Y\u05f4\nY\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0005Y\u05fd\nY\u0003Y\u0003Y\u0005Y\u0601\n",
    "Y\u0003Y\u0003Y\u0003Y\u0005Y\u0606\nY\u0003Y\u0003Y\u0003Y\u0005Y\u060b",
    "\nY\u0003Y\u0005Y\u060e\nY\u0005Y\u0610\nY\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0626\nZ\u0003Z\u0005",
    "Z\u0629\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0005Z\u0634\nZ\u0003[\u0003[\u0005[\u0638\n[\u0003[\u0005[\u063b",
    "\n[\u0003[\u0003[\u0005[\u063f\n[\u0003[\u0003[\u0005[\u0643\n[\u0003",
    "\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0005]\u064b\n]\u0003]\u0003",
    "]\u0005]\u064f\n]\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0007^\u065a\n^\f^\u000e^\u065d\u000b^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0007^\u0666\n^\f^\u000e^\u0669\u000b",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0007^\u0672\n^\f",
    "^\u000e^\u0675\u000b^\u0003^\u0003^\u0003^\u0003^\u0003^\u0005^\u067c",
    "\n^\u0003^\u0003^\u0005^\u0680\n^\u0003_\u0003_\u0003_\u0007_\u0685",
    "\n_\f_\u000e_\u0688\u000b_\u0003`\u0003`\u0003`\u0005`\u068d\n`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u0695\n`\u0003a\u0003a\u0003",
    "a\u0005a\u069a\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0006a\u06a1\n",
    "a\ra\u000ea\u06a2\u0003a\u0003a\u0005a\u06a7\na\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u06c6\na\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0005a\u06d7\na\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u06e3\na\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u06ed\na\u0003a\u0005a\u06f0",
    "\na\u0003a\u0003a\u0005a\u06f4\na\u0003a\u0005a\u06f7\na\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u0703",
    "\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u0714\na\u0003a\u0003a\u0005",
    "a\u0718\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u0729\na\u0003a\u0005",
    "a\u072c\na\u0003a\u0003a\u0005a\u0730\na\u0003a\u0005a\u0733\na\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u073e",
    "\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0005a\u0756\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0005",
    "a\u075d\na\u0007a\u075f\na\fa\u000ea\u0762\u000ba\u0003b\u0003b\u0003",
    "b\u0007b\u0767\nb\fb\u000eb\u076a\u000bb\u0003c\u0003c\u0005c\u076e",
    "\nc\u0003d\u0003d\u0003d\u0003d\u0007d\u0774\nd\fd\u000ed\u0777\u000b",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0007d\u077e\nd\fd\u000ed\u0781",
    "\u000bd\u0005d\u0783\nd\u0003d\u0003d\u0003d\u0003e\u0003e\u0003e\u0005",
    "e\u078b\ne\u0003e\u0003e\u0003f\u0003f\u0003f\u0005f\u0792\nf\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0005g\u079b\ng\u0003g\u0003",
    "g\u0003g\u0003g\u0005g\u07a1\ng\u0007g\u07a3\ng\fg\u000eg\u07a6\u000b",
    "g\u0003h\u0003h\u0003h\u0005h\u07ab\nh\u0003h\u0003h\u0003i\u0003i\u0003",
    "i\u0005i\u07b2\ni\u0003i\u0003i\u0003j\u0003j\u0003j\u0007j\u07b9\n",
    "j\fj\u000ej\u07bc\u000bj\u0003k\u0003k\u0003k\u0005k\u07c1\nk\u0003",
    "l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005m\u07cb\nm\u0005",
    "m\u07cd\nm\u0003n\u0005n\u07d0\nn\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0005n\u07d8\nn\u0003o\u0003o\u0003o\u0005o\u07dd\no\u0003",
    "p\u0003p\u0003q\u0003q\u0003r\u0003r\u0003s\u0003s\u0005s\u07e7\ns\u0003",
    "t\u0003t\u0003t\u0005t\u07ec\nt\u0003u\u0003u\u0005u\u07f0\nu\u0003",
    "v\u0003v\u0003v\u0003v\u0003v\u0002\u0005\u008c\u00c0\u00ccw\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4",
    "\u00e6\u00e8\u00ea\u0002\u001e\b\u0002\u0005\u0005\u001a\u001a\u001d",
    "\u001d((ii\u00ae\u00ae\u0004\u0002\u0011\u0011\u001f\u001f\u0005\u0002",
    "\u0005\u0005((ii\u0004\u0002++--\u0004\u0002..44\u0005\u0002\u0010\u0010",
    "\u009d\u009d\u00a3\u00a3\u0004\u0002!!\u008e\u008e\u0004\u0002UUaa\u0004",
    "\u0002HHff\u0005\u0002\u0006\u0006\n\n\u000e\u000e\u0006\u0002\u0006",
    "\u0006\t\n\u000e\u000e\u0094\u0094\u0004\u0002aa\u008d\u008d\u0004\u0002",
    "\u0006\u0006\n\n\u0004\u0002ww\u00cd\u00cd\u0004\u0002\r\r+,\u0004\u0002",
    "??^^\u0004\u0002\u0086\u0086\u0090\u0090\u0004\u0002EEQQ\u0003\u0002",
    "\u009a\u009b\u0005\u0002\u0013\u0013``\u00ab\u00ab\u0005\u0002\u00c9",
    "\u00c9\u00db\u00db\u00e4\u00e4\u0004\u0002\u00ce\u00cf\u00dc\u00dc\u0004",
    "\u0002PPcc\u0003\u0002\u00c4\u00c5\u0004\u0002\u00cf\u00cf\u00dc\u00dc",
    "\n\u0002&&MMmmoo\u0085\u0085\u0092\u0092\u00ba\u00ba\u00bf\u00bf\u000e",
    "\u0002\u0004%\'LNRTlnnpqstv\u0083\u0086\u0091\u0093\u00b9\u00bb\u00be",
    "\u00c0\u00c1\u0006\u0002%%??NN\\\\\u0002\u0914\u0002\u00f5\u0003\u0002",
    "\u0002\u0002\u0004\u0108\u0003\u0002\u0002\u0002\u0006\u011c\u0003\u0002",
    "\u0002\u0002\b\u011e\u0003\u0002\u0002\u0002\n\u0202\u0003\u0002\u0002",
    "\u0002\f\u0204\u0003\u0002\u0002\u0002\u000e\u020c\u0003\u0002\u0002",
    "\u0002\u0010\u0210\u0003\u0002\u0002\u0002\u0012\u0217\u0003\u0002\u0002",
    "\u0002\u0014\u0219\u0003\u0002\u0002\u0002\u0016\u021f\u0003\u0002\u0002",
    "\u0002\u0018\u02be\u0003\u0002\u0002\u0002\u001a\u02c0\u0003\u0002\u0002",
    "\u0002\u001c\u02cb\u0003\u0002\u0002\u0002\u001e\u02e6\u0003\u0002\u0002",
    "\u0002 \u0301\u0003\u0002\u0002\u0002\"\u0305\u0003\u0002\u0002\u0002",
    "$\u030e\u0003\u0002\u0002\u0002&\u031b\u0003\u0002\u0002\u0002(\u032a",
    "\u0003\u0002\u0002\u0002*\u0337\u0003\u0002\u0002\u0002,\u0347\u0003",
    "\u0002\u0002\u0002.\u034c\u0003\u0002\u0002\u00020\u0352\u0003\u0002",
    "\u0002\u00022\u0355\u0003\u0002\u0002\u00024\u0358\u0003\u0002\u0002",
    "\u00026\u036a\u0003\u0002\u0002\u00028\u036c\u0003\u0002\u0002\u0002",
    ":\u038a\u0003\u0002\u0002\u0002<\u038e\u0003\u0002\u0002\u0002>\u0392",
    "\u0003\u0002\u0002\u0002@\u0396\u0003\u0002\u0002\u0002B\u039f\u0003",
    "\u0002\u0002\u0002D\u03b5\u0003\u0002\u0002\u0002F\u03d7\u0003\u0002",
    "\u0002\u0002H\u03d9\u0003\u0002\u0002\u0002J\u03dc\u0003\u0002\u0002",
    "\u0002L\u03e3\u0003\u0002\u0002\u0002N\u03e6\u0003\u0002\u0002\u0002",
    "P\u03f2\u0003\u0002\u0002\u0002R\u03fa\u0003\u0002\u0002\u0002T\u0404",
    "\u0003\u0002\u0002\u0002V\u0429\u0003\u0002\u0002\u0002X\u0438\u0003",
    "\u0002\u0002\u0002Z\u0440\u0003\u0002\u0002\u0002\\\u0442\u0003\u0002",
    "\u0002\u0002^\u0451\u0003\u0002\u0002\u0002`\u0465\u0003\u0002\u0002",
    "\u0002b\u0467\u0003\u0002\u0002\u0002d\u0470\u0003\u0002\u0002\u0002",
    "f\u047f\u0003\u0002\u0002\u0002h\u0491\u0003\u0002\u0002\u0002j\u049f",
    "\u0003\u0002\u0002\u0002l\u04ad\u0003\u0002\u0002\u0002n\u04b0\u0003",
    "\u0002\u0002\u0002p\u04e3\u0003\u0002\u0002\u0002r\u04e6\u0003\u0002",
    "\u0002\u0002t\u04ec\u0003\u0002\u0002\u0002v\u04f0\u0003\u0002\u0002",
    "\u0002x\u04f6\u0003\u0002\u0002\u0002z\u04fd\u0003\u0002\u0002\u0002",
    "|\u0500\u0003\u0002\u0002\u0002~\u0503\u0003\u0002\u0002\u0002\u0080",
    "\u050d\u0003\u0002\u0002\u0002\u0082\u0510\u0003\u0002\u0002\u0002\u0084",
    "\u0514\u0003\u0002\u0002\u0002\u0086\u0518\u0003\u0002\u0002\u0002\u0088",
    "\u051d\u0003\u0002\u0002\u0002\u008a\u0523\u0003\u0002\u0002\u0002\u008c",
    "\u0532\u0003\u0002\u0002\u0002\u008e\u0573\u0003\u0002\u0002\u0002\u0090",
    "\u057b\u0003\u0002\u0002\u0002\u0092\u0586\u0003\u0002\u0002\u0002\u0094",
    "\u0588\u0003\u0002\u0002\u0002\u0096\u058e\u0003\u0002\u0002\u0002\u0098",
    "\u0593\u0003\u0002\u0002\u0002\u009a\u059b\u0003\u0002\u0002\u0002\u009c",
    "\u05a7\u0003\u0002\u0002\u0002\u009e\u05ac\u0003\u0002\u0002\u0002\u00a0",
    "\u05b4\u0003\u0002\u0002\u0002\u00a2\u05b9\u0003\u0002\u0002\u0002\u00a4",
    "\u05c1\u0003\u0002\u0002\u0002\u00a6\u05c5\u0003\u0002\u0002\u0002\u00a8",
    "\u05c9\u0003\u0002\u0002\u0002\u00aa\u05d2\u0003\u0002\u0002\u0002\u00ac",
    "\u05e0\u0003\u0002\u0002\u0002\u00ae\u05e2\u0003\u0002\u0002\u0002\u00b0",
    "\u060f\u0003\u0002\u0002\u0002\u00b2\u0633\u0003\u0002\u0002\u0002\u00b4",
    "\u0635\u0003\u0002\u0002\u0002\u00b6\u0644\u0003\u0002\u0002\u0002\u00b8",
    "\u0647\u0003\u0002\u0002\u0002\u00ba\u067f\u0003\u0002\u0002\u0002\u00bc",
    "\u0681\u0003\u0002\u0002\u0002\u00be\u0694\u0003\u0002\u0002\u0002\u00c0",
    "\u0717\u0003\u0002\u0002\u0002\u00c2\u0763\u0003\u0002\u0002\u0002\u00c4",
    "\u076d\u0003\u0002\u0002\u0002\u00c6\u0782\u0003\u0002\u0002\u0002\u00c8",
    "\u078a\u0003\u0002\u0002\u0002\u00ca\u078e\u0003\u0002\u0002\u0002\u00cc",
    "\u079a\u0003\u0002\u0002\u0002\u00ce\u07a7\u0003\u0002\u0002\u0002\u00d0",
    "\u07b1\u0003\u0002\u0002\u0002\u00d2\u07b5\u0003\u0002\u0002\u0002\u00d4",
    "\u07c0\u0003\u0002\u0002\u0002\u00d6\u07c2\u0003\u0002\u0002\u0002\u00d8",
    "\u07cc\u0003\u0002\u0002\u0002\u00da\u07cf\u0003\u0002\u0002\u0002\u00dc",
    "\u07dc\u0003\u0002\u0002\u0002\u00de\u07de\u0003\u0002\u0002\u0002\u00e0",
    "\u07e0\u0003\u0002\u0002\u0002\u00e2\u07e2\u0003\u0002\u0002\u0002\u00e4",
    "\u07e6\u0003\u0002\u0002\u0002\u00e6\u07eb\u0003\u0002\u0002\u0002\u00e8",
    "\u07ef\u0003\u0002\u0002\u0002\u00ea\u07f1\u0003\u0002\u0002\u0002\u00ec",
    "\u00f0\u0005\u0004\u0003\u0002\u00ed\u00ef\u0007\u00e3\u0002\u0002\u00ee",
    "\u00ed\u0003\u0002\u0002\u0002\u00ef\u00f2\u0003\u0002\u0002\u0002\u00f0",
    "\u00ee\u0003\u0002\u0002\u0002\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1",
    "\u00f4\u0003\u0002\u0002\u0002\u00f2\u00f0\u0003\u0002\u0002\u0002\u00f3",
    "\u00ec\u0003\u0002\u0002\u0002\u00f4\u00f7\u0003\u0002\u0002\u0002\u00f5",
    "\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002\u0002\u00f6",
    "\u00f8\u0003\u0002\u0002\u0002\u00f7\u00f5\u0003\u0002\u0002\u0002\u00f8",
    "\u00f9\u0007\u0002\u0002\u0003\u00f9\u0003\u0003\u0002\u0002\u0002\u00fa",
    "\u00fe\u0005\u0006\u0004\u0002\u00fb\u00fc\u0007X\u0002\u0002\u00fc",
    "\u00fd\u0007}\u0002\u0002\u00fd\u00ff\u0007\u00c7\u0002\u0002\u00fe",
    "\u00fb\u0003\u0002\u0002\u0002\u00fe\u00ff\u0003\u0002\u0002\u0002\u00ff",
    "\u0102\u0003\u0002\u0002\u0002\u0100\u0101\u0007C\u0002\u0002\u0101",
    "\u0103\u0005\u00e8u\u0002\u0102\u0100\u0003\u0002\u0002\u0002\u0102",
    "\u0103\u0003\u0002\u0002\u0002\u0103\u0105\u0003\u0002\u0002\u0002\u0104",
    "\u0106\u0007\u00e3\u0002\u0002\u0105\u0104\u0003\u0002\u0002\u0002\u0105",
    "\u0106\u0003\u0002\u0002\u0002\u0106\u0109\u0003\u0002\u0002\u0002\u0107",
    "\u0109\u0005\\/\u0002\u0108\u00fa\u0003\u0002\u0002\u0002\u0108\u0107",
    "\u0003\u0002\u0002\u0002\u0109\u0005\u0003\u0002\u0002\u0002\u010a\u011d",
    "\u0005\b\u0005\u0002\u010b\u011d\u0005\u0014\u000b\u0002\u010c\u011d",
    "\u0005\u0016\f\u0002\u010d\u011d\u0005\u0018\r\u0002\u010e\u011d\u0005",
    "T+\u0002\u010f\u011d\u0005V,\u0002\u0110\u011d\u0005X-\u0002\u0111\u011d",
    "\u0005Z.\u0002\u0112\u011d\u0005b2\u0002\u0113\u011d\u0005d3\u0002\u0114",
    "\u011d\u0005f4\u0002\u0115\u011d\u0005j6\u0002\u0116\u011d\u0005\u00ae",
    "X\u0002\u0117\u011d\u0005\u00b0Y\u0002\u0118\u011d\u0005\u00b2Z\u0002",
    "\u0119\u011d\u0005\u00b4[\u0002\u011a\u011d\u0005\u00b6\\\u0002\u011b",
    "\u011d\u0005\u00b8]\u0002\u011c\u010a\u0003\u0002\u0002\u0002\u011c",
    "\u010b\u0003\u0002\u0002\u0002\u011c\u010c\u0003\u0002\u0002\u0002\u011c",
    "\u010d\u0003\u0002\u0002\u0002\u011c\u010e\u0003\u0002\u0002\u0002\u011c",
    "\u010f\u0003\u0002\u0002\u0002\u011c\u0110\u0003\u0002\u0002\u0002\u011c",
    "\u0111\u0003\u0002\u0002\u0002\u011c\u0112\u0003\u0002\u0002\u0002\u011c",
    "\u0113\u0003\u0002\u0002\u0002\u011c\u0114\u0003\u0002\u0002\u0002\u011c",
    "\u0115\u0003\u0002\u0002\u0002\u011c\u0116\u0003\u0002\u0002\u0002\u011c",
    "\u0117\u0003\u0002\u0002\u0002\u011c\u0118\u0003\u0002\u0002\u0002\u011c",
    "\u0119\u0003\u0002\u0002\u0002\u011c\u011a\u0003\u0002\u0002\u0002\u011c",
    "\u011b\u0003\u0002\u0002\u0002\u011d\u0007\u0003\u0002\u0002\u0002\u011e",
    "\u011f\u0007\u0007\u0002\u0002\u011f\u0120\u0007\u00a0\u0002\u0002\u0120",
    "\u0122\u0005\u00d0i\u0002\u0121\u0123\u0005.\u0018\u0002\u0122\u0121",
    "\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002\u0002\u0123\u0124",
    "\u0003\u0002\u0002\u0002\u0124\u0129\u0005\n\u0006\u0002\u0125\u0126",
    "\u0007\u00cd\u0002\u0002\u0126\u0128\u0005\n\u0006\u0002\u0127\u0125",
    "\u0003\u0002\u0002\u0002\u0128\u012b\u0003\u0002\u0002\u0002\u0129\u0127",
    "\u0003\u0002\u0002\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\t",
    "\u0003\u0002\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012c\u012d",
    "\u0007\u0003\u0002\u0002\u012d\u0131\u0007\u001c\u0002\u0002\u012e\u012f",
    "\u0007O\u0002\u0002\u012f\u0130\u0007t\u0002\u0002\u0130\u0132\u0007",
    "9\u0002\u0002\u0131\u012e\u0003\u0002\u0002\u0002\u0131\u0132\u0003",
    "\u0002\u0002\u0002\u0132\u0133\u0003\u0002\u0002\u0002\u0133\u0136\u0005",
    "F$\u0002\u0134\u0135\u0007\u0004\u0002\u0002\u0135\u0137\u0005\u00ca",
    "f\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002",
    "\u0002\u0002\u0137\u0203\u0003\u0002\u0002\u0002\u0138\u0139\u0007\u0003",
    "\u0002\u0002\u0139\u013d\u0007R\u0002\u0002\u013a\u013b\u0007O\u0002",
    "\u0002\u013b\u013c\u0007t\u0002\u0002\u013c\u013e\u00079\u0002\u0002",
    "\u013d\u013a\u0003\u0002\u0002\u0002\u013d\u013e\u0003\u0002\u0002\u0002",
    "\u013e\u013f\u0003\u0002\u0002\u0002\u013f\u0142\u0005J&\u0002\u0140",
    "\u0141\u0007\u0004\u0002\u0002\u0141\u0143\u0005\u00caf\u0002\u0142",
    "\u0140\u0003\u0002\u0002\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143",
    "\u0203\u0003\u0002\u0002\u0002\u0144\u0145\u0007\u0003\u0002\u0002\u0145",
    "\u0149\u0007\u0084\u0002\u0002\u0146\u0147\u0007O\u0002\u0002\u0147",
    "\u0148\u0007t\u0002\u0002\u0148\u014a\u00079\u0002\u0002\u0149\u0146",
    "\u0003\u0002\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a\u014b",
    "\u0003\u0002\u0002\u0002\u014b\u014e\u0005L\'\u0002\u014c\u014d\u0007",
    "\u0004\u0002\u0002\u014d\u014f\u0005\u00caf\u0002\u014e\u014c\u0003",
    "\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002\u014f\u0203\u0003",
    "\u0002\u0002\u0002\u0150\u0151\u0007\u0011\u0002\u0002\u0151\u0154\u0005",
    "\u0012\n\u0002\u0152\u0153\u0007E\u0002\u0002\u0153\u0155\u0005\u00d0",
    "i\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0154\u0155\u0003\u0002",
    "\u0002\u0002\u0155\u0203\u0003\u0002\u0002\u0002\u0156\u0157\u0007\u0018",
    "\u0002\u0002\u0157\u015a\u0007\u001c\u0002\u0002\u0158\u0159\u0007O",
    "\u0002\u0002\u0159\u015b\u00079\u0002\u0002\u015a\u0158\u0003\u0002",
    "\u0002\u0002\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u015c\u0003\u0002",
    "\u0002\u0002\u015c\u015f\u0005\u00caf\u0002\u015d\u015e\u0007Q\u0002",
    "\u0002\u015e\u0160\u0005\u0012\n\u0002\u015f\u015d\u0003\u0002\u0002",
    "\u0002\u015f\u0160\u0003\u0002\u0002\u0002\u0160\u0203\u0003\u0002\u0002",
    "\u0002\u0161\u0162\u0007\u0018\u0002\u0002\u0162\u0165\u0007R\u0002",
    "\u0002\u0163\u0164\u0007O\u0002\u0002\u0164\u0166\u00079\u0002\u0002",
    "\u0165\u0163\u0003\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002",
    "\u0166\u0167\u0003\u0002\u0002\u0002\u0167\u016a\u0005\u00caf\u0002",
    "\u0168\u0169\u0007Q\u0002\u0002\u0169\u016b\u0005\u0012\n\u0002\u016a",
    "\u0168\u0003\u0002\u0002\u0002\u016a\u016b\u0003\u0002\u0002\u0002\u016b",
    "\u0203\u0003\u0002\u0002\u0002\u016c\u016d\u0007\u0018\u0002\u0002\u016d",
    "\u0170\u0007\u0084\u0002\u0002\u016e\u016f\u0007O\u0002\u0002\u016f",
    "\u0171\u00079\u0002\u0002\u0170\u016e\u0003\u0002\u0002\u0002\u0170",
    "\u0171\u0003\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002\u0172",
    "\u0175\u0005\u00caf\u0002\u0173\u0174\u0007Q\u0002\u0002\u0174\u0176",
    "\u0005\u0012\n\u0002\u0175\u0173\u0003\u0002\u0002\u0002\u0175\u0176",
    "\u0003\u0002\u0002\u0002\u0176\u0203\u0003\u0002\u0002\u0002\u0177\u0178",
    "\u0007\u001d\u0002\u0002\u0178\u017b\u0007\u001c\u0002\u0002\u0179\u017a",
    "\u0007O\u0002\u0002\u017a\u017c\u00079\u0002\u0002\u017b\u0179\u0003",
    "\u0002\u0002\u0002\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u017d\u0003",
    "\u0002\u0002\u0002\u017d\u017e\u0005\u00caf\u0002\u017e\u017f\u0007",
    "\u00c7\u0002\u0002\u017f\u0203\u0003\u0002\u0002\u0002\u0180\u0181\u0007",
    "*\u0002\u0002\u0181\u0182\u0007\u00bc\u0002\u0002\u0182\u0203\u0005",
    "\u00c0a\u0002\u0183\u0184\u0007.\u0002\u0002\u0184\u0203\u0005\u0012",
    "\n\u0002\u0185\u0186\u00074\u0002\u0002\u0186\u0189\u0007\u001c\u0002",
    "\u0002\u0187\u0188\u0007O\u0002\u0002\u0188\u018a\u00079\u0002\u0002",
    "\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002\u0002",
    "\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u0203\u0005\u00caf\u0002",
    "\u018c\u018d\u00074\u0002\u0002\u018d\u0190\u0007R\u0002\u0002\u018e",
    "\u018f\u0007O\u0002\u0002\u018f\u0191\u00079\u0002\u0002\u0190\u018e",
    "\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191\u0192",
    "\u0003\u0002\u0002\u0002\u0192\u0203\u0005\u00caf\u0002\u0193\u0194",
    "\u00074\u0002\u0002\u0194\u0197\u0007\u0084\u0002\u0002\u0195\u0196",
    "\u0007O\u0002\u0002\u0196\u0198\u00079\u0002\u0002\u0197\u0195\u0003",
    "\u0002\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u0199\u0003",
    "\u0002\u0002\u0002\u0199\u0203\u0005\u00caf\u0002\u019a\u019b\u0007",
    "4\u0002\u0002\u019b\u0203\u0005\u0012\n\u0002\u019c\u019e\u0007D\u0002",
    "\u0002\u019d\u019f\u0005\u0012\n\u0002\u019e\u019d\u0003\u0002\u0002",
    "\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f\u0203\u0003\u0002\u0002",
    "\u0002\u01a0\u01a1\u0007h\u0002\u0002\u01a1\u01a4\u0007R\u0002\u0002",
    "\u01a2\u01a3\u0007O\u0002\u0002\u01a3\u01a5\u00079\u0002\u0002\u01a4",
    "\u01a2\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5",
    "\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a9\u0005\u00caf\u0002\u01a7",
    "\u01a8\u0007Q\u0002\u0002\u01a8\u01aa\u0005\u0012\n\u0002\u01a9\u01a7",
    "\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa\u0203",
    "\u0003\u0002\u0002\u0002\u01ab\u01ac\u0007h\u0002\u0002\u01ac\u01af",
    "\u0007\u0084\u0002\u0002\u01ad\u01ae\u0007O\u0002\u0002\u01ae\u01b0",
    "\u00079\u0002\u0002\u01af\u01ad\u0003\u0002\u0002\u0002\u01af\u01b0",
    "\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u01b4",
    "\u0005\u00caf\u0002\u01b2\u01b3\u0007Q\u0002\u0002\u01b3\u01b5\u0005",
    "\u0012\n\u0002\u01b4\u01b2\u0003\u0002\u0002\u0002\u01b4\u01b5\u0003",
    "\u0002\u0002\u0002\u01b5\u0203\u0003\u0002\u0002\u0002\u01b6\u01b7\u0007",
    "n\u0002\u0002\u01b7\u01ba\u0007\u001c\u0002\u0002\u01b8\u01b9\u0007",
    "O\u0002\u0002\u01b9\u01bb\u00079\u0002\u0002\u01ba\u01b8\u0003\u0002",
    "\u0002\u0002\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002",
    "\u0002\u0002\u01bc\u01bd\u0005\u00caf\u0002\u01bd\u01be\u0005N(\u0002",
    "\u01be\u0203\u0003\u0002\u0002\u0002\u01bf\u01c0\u0007n\u0002\u0002",
    "\u01c0\u01c3\u0007\u001c\u0002\u0002\u01c1\u01c2\u0007O\u0002\u0002",
    "\u01c2\u01c4\u00079\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002",
    "\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002",
    "\u01c5\u01c6\u0005\u00caf\u0002\u01c6\u01c7\u0007\u001d\u0002\u0002",
    "\u01c7\u01c8\u0007\u00c7\u0002\u0002\u01c8\u0203\u0003\u0002\u0002\u0002",
    "\u01c9\u01ca\u0007n\u0002\u0002\u01ca\u01cd\u0007\u001c\u0002\u0002",
    "\u01cb\u01cc\u0007O\u0002\u0002\u01cc\u01ce\u00079\u0002\u0002\u01cd",
    "\u01cb\u0003\u0002\u0002\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce",
    "\u01cf\u0003\u0002\u0002\u0002\u01cf\u01d0\u0005\u00caf\u0002\u01d0",
    "\u01d1\u0007\u0088\u0002\u0002\u01d1\u01d2\u0005\u0010\t\u0002\u01d2",
    "\u0203\u0003\u0002\u0002\u0002\u01d3\u01d4\u0007n\u0002\u0002\u01d4",
    "\u01d7\u0007\u001c\u0002\u0002\u01d5\u01d6\u0007O\u0002\u0002\u01d6",
    "\u01d8\u00079\u0002\u0002\u01d7\u01d5\u0003\u0002\u0002\u0002\u01d7",
    "\u01d8\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9",
    "\u0203\u0005F$\u0002\u01da\u01db\u0007n\u0002\u0002\u01db\u01dc\u0007",
    "{\u0002\u0002\u01dc\u01dd\u0007\u0014\u0002\u0002\u01dd\u0203\u0005",
    "\u00c0a\u0002\u01de\u01df\u0007n\u0002\u0002\u01df\u0203\u0005@!\u0002",
    "\u01e0\u01e1\u0007p\u0002\u0002\u01e1\u01eb\u0005\u0012\n\u0002\u01e2",
    "\u01e3\u0007\u00a8\u0002\u0002\u01e3\u01e4\u00071\u0002\u0002\u01e4",
    "\u01ec\u0007\u00c7\u0002\u0002\u01e5\u01e6\u0007\u00a8\u0002\u0002\u01e6",
    "\u01e7\u0007\u00b8\u0002\u0002\u01e7\u01ec\u0007\u00c7\u0002\u0002\u01e8",
    "\u01e9\u0007\u00a8\u0002\u0002\u01e9\u01ea\u0007\u00a0\u0002\u0002\u01ea",
    "\u01ec\u0005\u00d0i\u0002\u01eb\u01e2\u0003\u0002\u0002\u0002\u01eb",
    "\u01e5\u0003\u0002\u0002\u0002\u01eb\u01e8\u0003\u0002\u0002\u0002\u01ec",
    "\u0203\u0003\u0002\u0002\u0002\u01ed\u01ee\u0007\u0088\u0002\u0002\u01ee",
    "\u0203\u0007\u00ae\u0002\u0002\u01ef\u01f0\u0007\u0089\u0002\u0002\u01f0",
    "\u01f3\u0007\u001c\u0002\u0002\u01f1\u01f2\u0007O\u0002\u0002\u01f2",
    "\u01f4\u00079\u0002\u0002\u01f3\u01f1\u0003\u0002\u0002\u0002\u01f3",
    "\u01f4\u0003\u0002\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5",
    "\u01f6\u0005\u00caf\u0002\u01f6\u01f7\u0007\u00a8\u0002\u0002\u01f7",
    "\u01f8\u0005\u00caf\u0002\u01f8\u0203\u0003\u0002\u0002\u0002\u01f9",
    "\u01fa\u0007\u008a\u0002\u0002\u01fa\u01fb\u0005\u0012\n\u0002\u01fb",
    "\u01fc\u0007E\u0002\u0002\u01fc\u01fd\u0005\u00d0i\u0002\u01fd\u0203",
    "\u0003\u0002\u0002\u0002\u01fe\u01ff\u0007\u00b2\u0002\u0002\u01ff\u0200",
    "\u0005\f\u0007\u0002\u0200\u0201\u0005|?\u0002\u0201\u0203\u0003\u0002",
    "\u0002\u0002\u0202\u012c\u0003\u0002\u0002\u0002\u0202\u0138\u0003\u0002",
    "\u0002\u0002\u0202\u0144\u0003\u0002\u0002\u0002\u0202\u0150\u0003\u0002",
    "\u0002\u0002\u0202\u0156\u0003\u0002\u0002\u0002\u0202\u0161\u0003\u0002",
    "\u0002\u0002\u0202\u016c\u0003\u0002\u0002\u0002\u0202\u0177\u0003\u0002",
    "\u0002\u0002\u0202\u0180\u0003\u0002\u0002\u0002\u0202\u0183\u0003\u0002",
    "\u0002\u0002\u0202\u0185\u0003\u0002\u0002\u0002\u0202\u018c\u0003\u0002",
    "\u0002\u0002\u0202\u0193\u0003\u0002\u0002\u0002\u0202\u019a\u0003\u0002",
    "\u0002\u0002\u0202\u019c\u0003\u0002\u0002\u0002\u0202\u01a0\u0003\u0002",
    "\u0002\u0002\u0202\u01ab\u0003\u0002\u0002\u0002\u0202\u01b6\u0003\u0002",
    "\u0002\u0002\u0202\u01bf\u0003\u0002\u0002\u0002\u0202\u01c9\u0003\u0002",
    "\u0002\u0002\u0202\u01d3\u0003\u0002\u0002\u0002\u0202\u01da\u0003\u0002",
    "\u0002\u0002\u0202\u01de\u0003\u0002\u0002\u0002\u0202\u01e0\u0003\u0002",
    "\u0002\u0002\u0202\u01ed\u0003\u0002\u0002\u0002\u0202\u01ef\u0003\u0002",
    "\u0002\u0002\u0202\u01f9\u0003\u0002\u0002\u0002\u0202\u01fe\u0003\u0002",
    "\u0002\u0002\u0203\u000b\u0003\u0002\u0002\u0002\u0204\u0209\u0005\u000e",
    "\b\u0002\u0205\u0206\u0007\u00cd\u0002\u0002\u0206\u0208\u0005\u000e",
    "\b\u0002\u0207\u0205\u0003\u0002\u0002\u0002\u0208\u020b\u0003\u0002",
    "\u0002\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u0209\u020a\u0003\u0002",
    "\u0002\u0002\u020a\r\u0003\u0002\u0002\u0002\u020b\u0209\u0003\u0002",
    "\u0002\u0002\u020c\u020d\u0005\u00caf\u0002\u020d\u020e\u0007\u00d2",
    "\u0002\u0002\u020e\u020f\u0005\u00c0a\u0002\u020f\u000f\u0003\u0002",
    "\u0002\u0002\u0210\u0211\t\u0002\u0002\u0002\u0211\u0011\u0003\u0002",
    "\u0002\u0002\u0212\u0213\u0007\u007f\u0002\u0002\u0213\u0218\u0005\u00c0",
    "a\u0002\u0214\u0215\u0007\u007f\u0002\u0002\u0215\u0216\u0007N\u0002",
    "\u0002\u0216\u0218\u0007\u00c7\u0002\u0002\u0217\u0212\u0003\u0002\u0002",
    "\u0002\u0217\u0214\u0003\u0002\u0002\u0002\u0218\u0013\u0003\u0002\u0002",
    "\u0002\u0219\u021a\u0007\u0011\u0002\u0002\u021a\u021b\u00070\u0002",
    "\u0002\u021b\u021d\u0005\u00d0i\u0002\u021c\u021e\u0005.\u0018\u0002",
    "\u021d\u021c\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002",
    "\u021e\u0015\u0003\u0002\u0002\u0002\u021f\u0220\u0007\u0017\u0002\u0002",
    "\u0220\u0221\u0007\u00a0\u0002\u0002\u0221\u0223\u0005\u00d0i\u0002",
    "\u0222\u0224\u0005\u0012\n\u0002\u0223\u0222\u0003\u0002\u0002\u0002",
    "\u0223\u0224\u0003\u0002\u0002\u0002\u0224\u0017\u0003\u0002\u0002\u0002",
    "\u0225\u0226\t\u0003\u0002\u0002\u0226\u022a\u0007#\u0002\u0002\u0227",
    "\u0228\u0007O\u0002\u0002\u0228\u0229\u0007t\u0002\u0002\u0229\u022b",
    "\u00079\u0002\u0002\u022a\u0227\u0003\u0002\u0002\u0002\u022a\u022b",
    "\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002\u0002\u0002\u022c\u022e",
    "\u0005\u00d6l\u0002\u022d\u022f\u0005.\u0018\u0002\u022e\u022d\u0003",
    "\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f\u0231\u0003",
    "\u0002\u0002\u0002\u0230\u0232\u0005B\"\u0002\u0231\u0230\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u02bf\u0003\u0002",
    "\u0002\u0002\u0233\u023b\u0007\u0011\u0002\u0002\u0234\u0237\u0007\u001f",
    "\u0002\u0002\u0235\u0236\u0007z\u0002\u0002\u0236\u0238\u0007\u008a",
    "\u0002\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002",
    "\u0002\u0002\u0238\u023b\u0003\u0002\u0002\u0002\u0239\u023b\u0007\u008a",
    "\u0002\u0002\u023a\u0233\u0003\u0002\u0002\u0002\u023a\u0234\u0003\u0002",
    "\u0002\u0002\u023a\u0239\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002",
    "\u0002\u0002\u023c\u0240\u00070\u0002\u0002\u023d\u023e\u0007O\u0002",
    "\u0002\u023e\u023f\u0007t\u0002\u0002\u023f\u0241\u00079\u0002\u0002",
    "\u0240\u023d\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0244\u0005\u00d0i\u0002",
    "\u0243\u0245\u00050\u0019\u0002\u0244\u0243\u0003\u0002\u0002\u0002",
    "\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0247\u0003\u0002\u0002\u0002",
    "\u0246\u0248\u0005.\u0018\u0002\u0247\u0246\u0003\u0002\u0002\u0002",
    "\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u0249\u0003\u0002\u0002\u0002",
    "\u0249\u024a\u0005\u001a\u000e\u0002\u024a\u024b\u0005\u001e\u0010\u0002",
    "\u024b\u02bf\u0003\u0002\u0002\u0002\u024c\u024d\t\u0003\u0002\u0002",
    "\u024d\u024e\u0007e\u0002\u0002\u024e\u0252\u0007\u00b7\u0002\u0002",
    "\u024f\u0250\u0007O\u0002\u0002\u0250\u0251\u0007t\u0002\u0002\u0251",
    "\u0253\u00079\u0002\u0002\u0252\u024f\u0003\u0002\u0002\u0002\u0252",
    "\u0253\u0003\u0002\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254",
    "\u0256\u0005\u00d0i\u0002\u0255\u0257\u00050\u0019\u0002\u0256\u0255",
    "\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0259",
    "\u0003\u0002\u0002\u0002\u0258\u025a\u0005.\u0018\u0002\u0259\u0258",
    "\u0003\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u0260",
    "\u0003\u0002\u0002\u0002\u025b\u025c\u0007\u00be\u0002\u0002\u025c\u025e",
    "\u0007\u00a6\u0002\u0002\u025d\u025f\u0007\u00c5\u0002\u0002\u025e\u025d",
    "\u0003\u0002\u0002\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025f\u0261",
    "\u0003\u0002\u0002\u0002\u0260\u025b\u0003\u0002\u0002\u0002\u0260\u0261",
    "\u0003\u0002\u0002\u0002\u0261\u0263\u0003\u0002\u0002\u0002\u0262\u0264",
    "\u00052\u001a\u0002\u0263\u0262\u0003\u0002\u0002\u0002\u0263\u0264",
    "\u0003\u0002\u0002\u0002\u0264\u0266\u0003\u0002\u0002\u0002\u0265\u0267",
    "\u00056\u001c\u0002\u0266\u0265\u0003\u0002\u0002\u0002\u0266\u0267",
    "\u0003\u0002\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268\u0269",
    "\u00054\u001b\u0002\u0269\u02bf\u0003\u0002\u0002\u0002\u026a\u026b",
    "\t\u0003\u0002\u0002\u026b\u026c\u0007i\u0002\u0002\u026c\u0270\u0007",
    "\u00b7\u0002\u0002\u026d\u026e\u0007O\u0002\u0002\u026e\u026f\u0007",
    "t\u0002\u0002\u026f\u0271\u00079\u0002\u0002\u0270\u026d\u0003\u0002",
    "\u0002\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0272\u0003\u0002",
    "\u0002\u0002\u0272\u0274\u0005\u00d0i\u0002\u0273\u0275\u00050\u0019",
    "\u0002\u0274\u0273\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002",
    "\u0002\u0275\u0277\u0003\u0002\u0002\u0002\u0276\u0278\u0005.\u0018",
    "\u0002\u0277\u0276\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002\u0002",
    "\u0002\u0278\u027a\u0003\u0002\u0002\u0002\u0279\u027b\u00056\u001c",
    "\u0002\u027a\u0279\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002\u0002",
    "\u0002\u027b\u0281\u0003\u0002\u0002\u0002\u027c\u0282\u00052\u001a",
    "\u0002\u027d\u027f\u00058\u001d\u0002\u027e\u0280\u0007\u0080\u0002",
    "\u0002\u027f\u027e\u0003\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002",
    "\u0002\u0280\u0282\u0003\u0002\u0002\u0002\u0281\u027c\u0003\u0002\u0002",
    "\u0002\u0281\u027d\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002",
    "\u0002\u0283\u0284\u00054\u001b\u0002\u0284\u02bf\u0003\u0002\u0002",
    "\u0002\u0285\u028d\u0007\u0011\u0002\u0002\u0286\u0289\u0007\u001f\u0002",
    "\u0002\u0287\u0288\u0007z\u0002\u0002\u0288\u028a\u0007\u008a\u0002",
    "\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002\u0002",
    "\u0002\u028a\u028d\u0003\u0002\u0002\u0002\u028b\u028d\u0007\u008a\u0002",
    "\u0002\u028c\u0285\u0003\u0002\u0002\u0002\u028c\u0286\u0003\u0002\u0002",
    "\u0002\u028c\u028b\u0003\u0002\u0002\u0002\u028d\u028f\u0003\u0002\u0002",
    "\u0002\u028e\u0290\u0007\u00a2\u0002\u0002\u028f\u028e\u0003\u0002\u0002",
    "\u0002\u028f\u0290\u0003\u0002\u0002\u0002\u0290\u0291\u0003\u0002\u0002",
    "\u0002\u0291\u0295\u0007\u00a0\u0002\u0002\u0292\u0293\u0007O\u0002",
    "\u0002\u0293\u0294\u0007t\u0002\u0002\u0294\u0296\u00079\u0002\u0002",
    "\u0295\u0292\u0003\u0002\u0002\u0002\u0295\u0296\u0003\u0002\u0002\u0002",
    "\u0296\u0297\u0003\u0002\u0002\u0002\u0297\u0299\u0005\u00d0i\u0002",
    "\u0298\u029a\u00050\u0019\u0002\u0299\u0298\u0003\u0002\u0002\u0002",
    "\u0299\u029a\u0003\u0002\u0002\u0002\u029a\u029c\u0003\u0002\u0002\u0002",
    "\u029b\u029d\u0005.\u0018\u0002\u029c\u029b\u0003\u0002\u0002\u0002",
    "\u029c\u029d\u0003\u0002\u0002\u0002\u029d\u029f\u0003\u0002\u0002\u0002",
    "\u029e\u02a0\u00056\u001c\u0002\u029f\u029e\u0003\u0002\u0002\u0002",
    "\u029f\u02a0\u0003\u0002\u0002\u0002\u02a0\u02a2\u0003\u0002\u0002\u0002",
    "\u02a1\u02a3\u00058\u001d\u0002\u02a2\u02a1\u0003\u0002\u0002\u0002",
    "\u02a2\u02a3\u0003\u0002\u0002\u0002\u02a3\u02a5\u0003\u0002\u0002\u0002",
    "\u02a4\u02a6\u00054\u001b\u0002\u02a5\u02a4\u0003\u0002\u0002\u0002",
    "\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6\u02bf\u0003\u0002\u0002\u0002",
    "\u02a7\u02aa\t\u0003\u0002\u0002\u02a8\u02a9\u0007z\u0002\u0002\u02a9",
    "\u02ab\u0007\u008a\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002\u02aa",
    "\u02ab\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002\u0002\u0002\u02ac",
    "\u02b0\u0007\u00b7\u0002\u0002\u02ad\u02ae\u0007O\u0002\u0002\u02ae",
    "\u02af\u0007t\u0002\u0002\u02af\u02b1\u00079\u0002\u0002\u02b0\u02ad",
    "\u0003\u0002\u0002\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002\u02b1\u02b2",
    "\u0003\u0002\u0002\u0002\u02b2\u02b4\u0005\u00d0i\u0002\u02b3\u02b5",
    "\u00050\u0019\u0002\u02b4\u02b3\u0003\u0002\u0002\u0002\u02b4\u02b5",
    "\u0003\u0002\u0002\u0002\u02b5\u02b7\u0003\u0002\u0002\u0002\u02b6\u02b8",
    "\u0005.\u0018\u0002\u02b7\u02b6\u0003\u0002\u0002\u0002\u02b7\u02b8",
    "\u0003\u0002\u0002\u0002\u02b8\u02ba\u0003\u0002\u0002\u0002\u02b9\u02bb",
    "\u00056\u001c\u0002\u02ba\u02b9\u0003\u0002\u0002\u0002\u02ba\u02bb",
    "\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02bd",
    "\u00054\u001b\u0002\u02bd\u02bf\u0003\u0002\u0002\u0002\u02be\u0225",
    "\u0003\u0002\u0002\u0002\u02be\u023a\u0003\u0002\u0002\u0002\u02be\u024c",
    "\u0003\u0002\u0002\u0002\u02be\u026a\u0003\u0002\u0002\u0002\u02be\u028c",
    "\u0003\u0002\u0002\u0002\u02be\u02a7\u0003\u0002\u0002\u0002\u02bf\u0019",
    "\u0003\u0002\u0002\u0002\u02c0\u02c1\u0007\u00d8\u0002\u0002\u02c1\u02c6",
    "\u0005\u001c\u000f\u0002\u02c2\u02c3\u0007\u00cd\u0002\u0002\u02c3\u02c5",
    "\u0005\u001c\u000f\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002\u02c5\u02c8",
    "\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002\u02c6\u02c7",
    "\u0003\u0002\u0002\u0002\u02c7\u02c9\u0003\u0002\u0002\u0002\u02c8\u02c6",
    "\u0003\u0002\u0002\u0002\u02c9\u02ca\u0007\u00e2\u0002\u0002\u02ca\u001b",
    "\u0003\u0002\u0002\u0002\u02cb\u02cc\u0005\u00e6t\u0002\u02cc\u02e2",
    "\u0005\u00ba^\u0002\u02cd\u02ce\u0006\u000f\u0002\u0003\u02ce\u02cf",
    "\u0007(\u0002\u0002\u02cf\u02d0\u0005\u00dco\u0002\u02d0\u02d1\b\u000f",
    "\u0001\u0002\u02d1\u02e1\u0003\u0002\u0002\u0002\u02d2\u02d3\u0006\u000f",
    "\u0003\u0003\u02d3\u02d4\u0007;\u0002\u0002\u02d4\u02d5\u0005\u00c0",
    "a\u0002\u02d5\u02d6\b\u000f\u0001\u0002\u02d6\u02e1\u0003\u0002\u0002",
    "\u0002\u02d7\u02d8\u0006\u000f\u0004\u0003\u02d8\u02d9\u0007L\u0002",
    "\u0002\u02d9\u02e1\b\u000f\u0001\u0002\u02da\u02db\u0006\u000f\u0005",
    "\u0003\u02db\u02dc\u0007T\u0002\u0002\u02dc\u02e1\b\u000f\u0001\u0002",
    "\u02dd\u02de\u0006\u000f\u0006\u0003\u02de\u02df\u0007Z\u0002\u0002",
    "\u02df\u02e1\b\u000f\u0001\u0002\u02e0\u02cd\u0003\u0002\u0002\u0002",
    "\u02e0\u02d2\u0003\u0002\u0002\u0002\u02e0\u02d7\u0003\u0002\u0002\u0002",
    "\u02e0\u02da\u0003\u0002\u0002\u0002\u02e0\u02dd\u0003\u0002\u0002\u0002",
    "\u02e1\u02e4\u0003\u0002\u0002\u0002\u02e2\u02e0\u0003\u0002\u0002\u0002",
    "\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u001d\u0003\u0002\u0002\u0002",
    "\u02e4\u02e2\u0003\u0002\u0002\u0002\u02e5\u02e7\u0005 \u0011\u0002",
    "\u02e6\u02e5\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002",
    "\u02e7\u02fe\u0003\u0002\u0002\u0002\u02e8\u02e9\u0006\u0010\u0007\u0003",
    "\u02e9\u02ea\u0005$\u0013\u0002\u02ea\u02eb\b\u0010\u0001\u0002\u02eb",
    "\u02fd\u0003\u0002\u0002\u0002\u02ec\u02ed\u0006\u0010\b\u0003\u02ed",
    "\u02ee\u0005&\u0014\u0002\u02ee\u02ef\b\u0010\u0001\u0002\u02ef\u02fd",
    "\u0003\u0002\u0002\u0002\u02f0\u02f1\u0006\u0010\t\u0003\u02f1\u02f2",
    "\u0005(\u0015\u0002\u02f2\u02f3\b\u0010\u0001\u0002\u02f3\u02fd\u0003",
    "\u0002\u0002\u0002\u02f4\u02f5\u0006\u0010\n\u0003\u02f5\u02f6\u0005",
    "*\u0016\u0002\u02f6\u02f7\b\u0010\u0001\u0002\u02f7\u02fd\u0003\u0002",
    "\u0002\u0002\u02f8\u02f9\u0006\u0010\u000b\u0003\u02f9\u02fa\u0005,",
    "\u0017\u0002\u02fa\u02fb\b\u0010\u0001\u0002\u02fb\u02fd\u0003\u0002",
    "\u0002\u0002\u02fc\u02e8\u0003\u0002\u0002\u0002\u02fc\u02ec\u0003\u0002",
    "\u0002\u0002\u02fc\u02f0\u0003\u0002\u0002\u0002\u02fc\u02f4\u0003\u0002",
    "\u0002\u0002\u02fc\u02f8\u0003\u0002\u0002\u0002\u02fd\u0300\u0003\u0002",
    "\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe\u02ff\u0003\u0002",
    "\u0002\u0002\u02ff\u001f\u0003\u0002\u0002\u0002\u0300\u02fe\u0003\u0002",
    "\u0002\u0002\u0301\u0302\u0007\u0083\u0002\u0002\u0302\u0303\u0007\\",
    "\u0002\u0002\u0303\u0304\u0005\u00bc_\u0002\u0304!\u0003\u0002\u0002",
    "\u0002\u0305\u030c\u0005\u00e6t\u0002\u0306\u0309\u0005\u00e6t\u0002",
    "\u0307\u0308\u0007\u00d8\u0002\u0002\u0308\u030a\u0007\u00e2\u0002\u0002",
    "\u0309\u0307\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002",
    "\u030a\u030d\u0003\u0002\u0002\u0002\u030b\u030d\u0005\u00dco\u0002",
    "\u030c\u0306\u0003\u0002\u0002\u0002\u030c\u030b\u0003\u0002\u0002\u0002",
    "\u030d#\u0003\u0002\u0002\u0002\u030e\u030f\u0007\u0099\u0002\u0002",
    "\u030f\u0310\u0007\u00d8\u0002\u0002\u0310\u0311\u0005\u00e6t\u0002",
    "\u0311\u0315\u0007\u00d8\u0002\u0002\u0312\u0314\u0005\"\u0012\u0002",
    "\u0313\u0312\u0003\u0002\u0002\u0002\u0314\u0317\u0003\u0002\u0002\u0002",
    "\u0315\u0313\u0003\u0002\u0002\u0002\u0315\u0316\u0003\u0002\u0002\u0002",
    "\u0316\u0318\u0003\u0002\u0002\u0002\u0317\u0315\u0003\u0002\u0002\u0002",
    "\u0318\u0319\u0007\u00e2\u0002\u0002\u0319\u031a\u0007\u00e2\u0002\u0002",
    "\u031a%\u0003\u0002\u0002\u0002\u031b\u031c\u0007b\u0002\u0002\u031c",
    "\u0326\u0007\u00d8\u0002\u0002\u031d\u0327\u0007\u00c5\u0002\u0002\u031e",
    "\u031f\u0007l\u0002\u0002\u031f\u0320\u0007\u00c5\u0002\u0002\u0320",
    "\u0321\u0007j\u0002\u0002\u0321\u0327\u0007\u00c5\u0002\u0002\u0322",
    "\u0323\u0007j\u0002\u0002\u0323\u0324\u0007\u00c5\u0002\u0002\u0324",
    "\u0325\u0007l\u0002\u0002\u0325\u0327\u0007\u00c5\u0002\u0002\u0326",
    "\u031d\u0003\u0002\u0002\u0002\u0326\u031e\u0003\u0002\u0002\u0002\u0326",
    "\u0322\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328",
    "\u0329\u0007\u00e2\u0002\u0002\u0329\'\u0003\u0002\u0002\u0002\u032a",
    "\u032b\u0007_\u0002\u0002\u032b\u032c\u0007\u00d8\u0002\u0002\u032c",
    "\u032d\u0005\u00e6t\u0002\u032d\u0331\u0007\u00d8\u0002\u0002\u032e",
    "\u0330\u0005\"\u0012\u0002\u032f\u032e\u0003\u0002\u0002\u0002\u0330",
    "\u0333\u0003\u0002\u0002\u0002\u0331\u032f\u0003\u0002\u0002\u0002\u0331",
    "\u0332\u0003\u0002\u0002\u0002\u0332\u0334\u0003\u0002\u0002\u0002\u0333",
    "\u0331\u0003\u0002\u0002\u0002\u0334\u0335\u0007\u00e2\u0002\u0002\u0335",
    "\u0336\u0007\u00e2\u0002\u0002\u0336)\u0003\u0002\u0002\u0002\u0337",
    "\u0338\u0007\u0086\u0002\u0002\u0338\u0343\u0007\u00d8\u0002\u0002\u0339",
    "\u033a\u0007l\u0002\u0002\u033a\u033b\u0005\u00e6t\u0002\u033b\u033c",
    "\u0007j\u0002\u0002\u033c\u033d\u0005\u00e6t\u0002\u033d\u0344\u0003",
    "\u0002\u0002\u0002\u033e\u033f\u0007j\u0002\u0002\u033f\u0340\u0005",
    "\u00e6t\u0002\u0340\u0341\u0007l\u0002\u0002\u0341\u0342\u0005\u00e6",
    "t\u0002\u0342\u0344\u0003\u0002\u0002\u0002\u0343\u0339\u0003\u0002",
    "\u0002\u0002\u0343\u033e\u0003\u0002\u0002\u0002\u0344\u0345\u0003\u0002",
    "\u0002\u0002\u0345\u0346\u0007\u00e2\u0002\u0002\u0346+\u0003\u0002",
    "\u0002\u0002\u0347\u0348\u0007\u0097\u0002\u0002\u0348\u0349\u0007\u00d8",
    "\u0002\u0002\u0349\u034a\u0005\u009eP\u0002\u034a\u034b\u0007\u00e2",
    "\u0002\u0002\u034b-\u0003\u0002\u0002\u0002\u034c\u034d\u0007x\u0002",
    "\u0002\u034d\u0350\u0007\u0019\u0002\u0002\u034e\u0351\u0005\u00e6t",
    "\u0002\u034f\u0351\u0007\u00c7\u0002\u0002\u0350\u034e\u0003\u0002\u0002",
    "\u0002\u0350\u034f\u0003\u0002\u0002\u0002\u0351/\u0003\u0002\u0002",
    "\u0002\u0352\u0353\u0007\u00b5\u0002\u0002\u0353\u0354\u0007\u00c7\u0002",
    "\u0002\u03541\u0003\u0002\u0002\u0002\u0355\u0356\u0007\u00a8\u0002",
    "\u0002\u0356\u0357\u0005\u00d0i\u0002\u03573\u0003\u0002\u0002\u0002",
    "\u0358\u0359\u0007\f\u0002\u0002\u0359\u035a\u0005j6\u0002\u035a5\u0003",
    "\u0002\u0002\u0002\u035b\u035c\u0007\u00d8\u0002\u0002\u035c\u0361\u0005",
    "D#\u0002\u035d\u035e\u0007\u00cd\u0002\u0002\u035e\u0360\u0005D#\u0002",
    "\u035f\u035d\u0003\u0002\u0002\u0002\u0360\u0363\u0003\u0002\u0002\u0002",
    "\u0361\u035f\u0003\u0002\u0002\u0002\u0361\u0362\u0003\u0002\u0002\u0002",
    "\u0362\u0364\u0003\u0002\u0002\u0002\u0363\u0361\u0003\u0002\u0002\u0002",
    "\u0364\u0365\u0007\u00e2\u0002\u0002\u0365\u036b\u0003\u0002\u0002\u0002",
    "\u0366\u0367\u0007\f\u0002\u0002\u0367\u036b\u0005\u00d0i\u0002\u0368",
    "\u0369\u0007\f\u0002\u0002\u0369\u036b\u0005\u00ceh\u0002\u036a\u035b",
    "\u0003\u0002\u0002\u0002\u036a\u0366\u0003\u0002\u0002\u0002\u036a\u0368",
    "\u0003\u0002\u0002\u0002\u036b7\u0003\u0002\u0002\u0002\u036c\u0387",
    "\u0005B\"\u0002\u036d\u036e\u0006\u001d\f\u0003\u036e\u036f\u0005\u0082",
    "B\u0002\u036f\u0370\b\u001d\u0001\u0002\u0370\u0386\u0003\u0002\u0002",
    "\u0002\u0371\u0372\u0006\u001d\r\u0003\u0372\u0373\u0005:\u001e\u0002",
    "\u0373\u0374\b\u001d\u0001\u0002\u0374\u0386\u0003\u0002\u0002\u0002",
    "\u0375\u0376\u0006\u001d\u000e\u0003\u0376\u0377\u0005<\u001f\u0002",
    "\u0377\u0378\b\u001d\u0001\u0002\u0378\u0386\u0003\u0002\u0002\u0002",
    "\u0379\u037a\u0006\u001d\u000f\u0003\u037a\u037b\u0005> \u0002\u037b",
    "\u037c\b\u001d\u0001\u0002\u037c\u0386\u0003\u0002\u0002\u0002\u037d",
    "\u037e\u0006\u001d\u0010\u0003\u037e\u037f\u0005@!\u0002\u037f\u0380",
    "\b\u001d\u0001\u0002\u0380\u0386\u0003\u0002\u0002\u0002\u0381\u0382",
    "\u0006\u001d\u0011\u0003\u0382\u0383\u0005\u008aF\u0002\u0383\u0384",
    "\b\u001d\u0001\u0002\u0384\u0386\u0003\u0002\u0002\u0002\u0385\u036d",
    "\u0003\u0002\u0002\u0002\u0385\u0371\u0003\u0002\u0002\u0002\u0385\u0375",
    "\u0003\u0002\u0002\u0002\u0385\u0379\u0003\u0002\u0002\u0002\u0385\u037d",
    "\u0003\u0002\u0002\u0002\u0385\u0381\u0003\u0002\u0002\u0002\u0386\u0389",
    "\u0003\u0002\u0002\u0002\u0387\u0385\u0003\u0002\u0002\u0002\u0387\u0388",
    "\u0003\u0002\u0002\u0002\u03889\u0003\u0002\u0002\u0002\u0389\u0387",
    "\u0003\u0002\u0002\u0002\u038a\u038b\u0007\u007f\u0002\u0002\u038b\u038c",
    "\u0007\u0014\u0002\u0002\u038c\u038d\u0005\u00c0a\u0002\u038d;\u0003",
    "\u0002\u0002\u0002\u038e\u038f\u0007\u0083\u0002\u0002\u038f\u0390\u0007",
    "\\\u0002\u0002\u0390\u0391\u0005\u00c0a\u0002\u0391=\u0003\u0002\u0002",
    "\u0002\u0392\u0393\u0007\u0091\u0002\u0002\u0393\u0394\u0007\u0014\u0002",
    "\u0002\u0394\u0395\u0005\u00c0a\u0002\u0395?\u0003\u0002\u0002\u0002",
    "\u0396\u0397\u0007\u00ae\u0002\u0002\u0397\u039c\u0005R*\u0002\u0398",
    "\u0399\u0007\u00cd\u0002\u0002\u0399\u039b\u0005R*\u0002\u039a\u0398",
    "\u0003\u0002\u0002\u0002\u039b\u039e\u0003\u0002\u0002\u0002\u039c\u039a",
    "\u0003\u0002\u0002\u0002\u039c\u039d\u0003\u0002\u0002\u0002\u039dA",
    "\u0003\u0002\u0002\u0002\u039e\u039c\u0003\u0002\u0002\u0002\u039f\u03a1",
    "\u00077\u0002\u0002\u03a0\u03a2\u0007\u00d2\u0002\u0002\u03a1\u03a0",
    "\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002\u03a2\u03a3",
    "\u0003\u0002\u0002\u0002\u03a3\u03a9\u0005\u00e8u\u0002\u03a4\u03a6",
    "\u0007\u00d8\u0002\u0002\u03a5\u03a7\u0005\u00bc_\u0002\u03a6\u03a5",
    "\u0003\u0002\u0002\u0002\u03a6\u03a7\u0003\u0002\u0002\u0002\u03a7\u03a8",
    "\u0003\u0002\u0002\u0002\u03a8\u03aa\u0007\u00e2\u0002\u0002\u03a9\u03a4",
    "\u0003\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aaC",
    "\u0003\u0002\u0002\u0002\u03ab\u03b6\u0005F$\u0002\u03ac\u03ad\u0007",
    "\u001e\u0002\u0002\u03ad\u03ae\u0005\u00e6t\u0002\u03ae\u03af\u0007",
    "\u0017\u0002\u0002\u03af\u03b0\u0005\u00c0a\u0002\u03b0\u03b6\u0003",
    "\u0002\u0002\u0002\u03b1\u03b2\u0007R\u0002\u0002\u03b2\u03b6\u0005",
    "J&\u0002\u03b3\u03b4\u0007\u0084\u0002\u0002\u03b4\u03b6\u0005L\'\u0002",
    "\u03b5\u03ab\u0003\u0002\u0002\u0002\u03b5\u03ac\u0003\u0002\u0002\u0002",
    "\u03b5\u03b1\u0003\u0002\u0002\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002",
    "\u03b6E\u0003\u0002\u0002\u0002\u03b7\u03b8\u0005\u00caf\u0002\u03b8",
    "\u03ba\u0005\u00ba^\u0002\u03b9\u03bb\u0005H%\u0002\u03ba\u03b9\u0003",
    "\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002\u03bb\u03be\u0003",
    "\u0002\u0002\u0002\u03bc\u03bd\u0007\u001d\u0002\u0002\u03bd\u03bf\u0007",
    "\u00c7\u0002\u0002\u03be\u03bc\u0003\u0002\u0002\u0002\u03be\u03bf\u0003",
    "\u0002\u0002\u0002\u03bf\u03c1\u0003\u0002\u0002\u0002\u03c0\u03c2\u0005",
    "N(\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002",
    "\u0002\u0002\u03c2\u03c5\u0003\u0002\u0002\u0002\u03c3\u03c4\u0007\u00ae",
    "\u0002\u0002\u03c4\u03c6\u0005\u00c0a\u0002\u03c5\u03c3\u0003\u0002",
    "\u0002\u0002\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6\u03d8\u0003\u0002",
    "\u0002\u0002\u03c7\u03c9\u0005\u00caf\u0002\u03c8\u03ca\u0005\u00ba",
    "^\u0002\u03c9\u03c8\u0003\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002",
    "\u0002\u0002\u03ca\u03cb\u0003\u0002\u0002\u0002\u03cb\u03ce\u0005H",
    "%\u0002\u03cc\u03cd\u0007\u001d\u0002\u0002\u03cd\u03cf\u0007\u00c7",
    "\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03ce\u03cf\u0003\u0002",
    "\u0002\u0002\u03cf\u03d1\u0003\u0002\u0002\u0002\u03d0\u03d2\u0005N",
    "(\u0002\u03d1\u03d0\u0003\u0002\u0002\u0002\u03d1\u03d2\u0003\u0002",
    "\u0002\u0002\u03d2\u03d5\u0003\u0002\u0002\u0002\u03d3\u03d4\u0007\u00ae",
    "\u0002\u0002\u03d4\u03d6\u0005\u00c0a\u0002\u03d5\u03d3\u0003\u0002",
    "\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002\u03d6\u03d8\u0003\u0002",
    "\u0002\u0002\u03d7\u03b7\u0003\u0002\u0002\u0002\u03d7\u03c7\u0003\u0002",
    "\u0002\u0002\u03d8G\u0003\u0002\u0002\u0002\u03d9\u03da\t\u0004\u0002",
    "\u0002\u03da\u03db\u0005\u00c0a\u0002\u03dbI\u0003\u0002\u0002\u0002",
    "\u03dc\u03dd\u0005\u00caf\u0002\u03dd\u03de\u0005\u00c0a\u0002\u03de",
    "\u03df\u0007\u00af\u0002\u0002\u03df\u03e0\u0005\u00ba^\u0002\u03e0",
    "\u03e1\u0007I\u0002\u0002\u03e1\u03e2\u0007\u00c5\u0002\u0002\u03e2",
    "K\u0003\u0002\u0002\u0002\u03e3\u03e4\u0005\u00caf\u0002\u03e4\u03e5",
    "\u0005h5\u0002\u03e5M\u0003\u0002\u0002\u0002\u03e6\u03e7\u0007\u001a",
    "\u0002\u0002\u03e7\u03e8\u0007\u00d8\u0002\u0002\u03e8\u03ed\u0005P",
    ")\u0002\u03e9\u03ea\u0007\u00cd\u0002\u0002\u03ea\u03ec\u0005P)\u0002",
    "\u03eb\u03e9\u0003\u0002\u0002\u0002\u03ec\u03ef\u0003\u0002\u0002\u0002",
    "\u03ed\u03eb\u0003\u0002\u0002\u0002\u03ed\u03ee\u0003\u0002\u0002\u0002",
    "\u03ee\u03f0\u0003\u0002\u0002\u0002\u03ef\u03ed\u0003\u0002\u0002\u0002",
    "\u03f0\u03f1\u0007\u00e2\u0002\u0002\u03f1O\u0003\u0002\u0002\u0002",
    "\u03f2\u03f8\u0005\u00e6t\u0002\u03f3\u03f5\u0007\u00d8\u0002\u0002",
    "\u03f4\u03f6\u0005\u00bc_\u0002\u03f5\u03f4\u0003\u0002\u0002\u0002",
    "\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6\u03f7\u0003\u0002\u0002\u0002",
    "\u03f7\u03f9\u0007\u00e2\u0002\u0002\u03f8\u03f3\u0003\u0002\u0002\u0002",
    "\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9Q\u0003\u0002\u0002\u0002",
    "\u03fa\u0402\u0005\u00c0a\u0002\u03fb\u0403\u0007*\u0002\u0002\u03fc",
    "\u03fd\u0007\u00a8\u0002\u0002\u03fd\u03fe\u00071\u0002\u0002\u03fe",
    "\u0403\u0007\u00c7\u0002\u0002\u03ff\u0400\u0007\u00a8\u0002\u0002\u0400",
    "\u0401\u0007\u00b8\u0002\u0002\u0401\u0403\u0007\u00c7\u0002\u0002\u0402",
    "\u03fb\u0003\u0002\u0002\u0002\u0402\u03fc\u0003\u0002\u0002\u0002\u0402",
    "\u03ff\u0003\u0002\u0002\u0002\u0402\u0403\u0003\u0002\u0002\u0002\u0403",
    "S\u0003\u0002\u0002\u0002\u0404\u0406\t\u0005\u0002\u0002\u0405\u0407",
    "\u0007\u00a0\u0002\u0002\u0406\u0405\u0003\u0002\u0002\u0002\u0406\u0407",
    "\u0003\u0002\u0002\u0002\u0407\u0408\u0003\u0002\u0002\u0002\u0408\u0409",
    "\u0005\u00ccg\u0002\u0409U\u0003\u0002\u0002\u0002\u040a\u040b\t\u0006",
    "\u0002\u0002\u040b\u040e\u0007#\u0002\u0002\u040c\u040d\u0007O\u0002",
    "\u0002\u040d\u040f\u00079\u0002\u0002\u040e\u040c\u0003\u0002\u0002",
    "\u0002\u040e\u040f\u0003\u0002\u0002\u0002\u040f\u0410\u0003\u0002\u0002",
    "\u0002\u0410\u0412\u0005\u00d6l\u0002\u0411\u0413\u0005.\u0018\u0002",
    "\u0412\u0411\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002\u0002\u0002",
    "\u0413\u042a\u0003\u0002\u0002\u0002\u0414\u041b\t\u0006\u0002\u0002",
    "\u0415\u041c\u00070\u0002\u0002\u0416\u0418\u0007\u00a2\u0002\u0002",
    "\u0417\u0416\u0003\u0002\u0002\u0002\u0417\u0418\u0003\u0002\u0002\u0002",
    "\u0418\u0419\u0003\u0002\u0002\u0002\u0419\u041c\u0007\u00a0\u0002\u0002",
    "\u041a\u041c\u0007\u00b7\u0002\u0002\u041b\u0415\u0003\u0002\u0002\u0002",
    "\u041b\u0417\u0003\u0002\u0002\u0002\u041b\u041a\u0003\u0002\u0002\u0002",
    "\u041c\u041f\u0003\u0002\u0002\u0002\u041d\u041e\u0007O\u0002\u0002",
    "\u041e\u0420\u00079\u0002\u0002\u041f\u041d\u0003\u0002\u0002\u0002",
    "\u041f\u0420\u0003\u0002\u0002\u0002\u0420\u0421\u0003\u0002\u0002\u0002",
    "\u0421\u0423\u0005\u00d0i\u0002\u0422\u0424\u0005.\u0018\u0002\u0423",
    "\u0422\u0003\u0002\u0002\u0002\u0423\u0424\u0003\u0002\u0002\u0002\u0424",
    "\u0427\u0003\u0002\u0002\u0002\u0425\u0426\u0007s\u0002\u0002\u0426",
    "\u0428\u0007)\u0002\u0002\u0427\u0425\u0003\u0002\u0002\u0002\u0427",
    "\u0428\u0003\u0002\u0002\u0002\u0428\u042a\u0003\u0002\u0002\u0002\u0429",
    "\u040a\u0003\u0002\u0002\u0002\u0429\u0414\u0003\u0002\u0002\u0002\u042a",
    "W\u0003\u0002\u0002\u0002\u042b\u042c\u00079\u0002\u0002\u042c\u042d",
    "\u0007#\u0002\u0002\u042d\u0439\u0005\u00d6l\u0002\u042e\u0435\u0007",
    "9\u0002\u0002\u042f\u0436\u00070\u0002\u0002\u0430\u0432\u0007\u00a2",
    "\u0002\u0002\u0431\u0430\u0003\u0002\u0002\u0002\u0431\u0432\u0003\u0002",
    "\u0002\u0002\u0432\u0433\u0003\u0002\u0002\u0002\u0433\u0436\u0007\u00a0",
    "\u0002\u0002\u0434\u0436\u0007\u00b7\u0002\u0002\u0435\u042f\u0003\u0002",
    "\u0002\u0002\u0435\u0431\u0003\u0002\u0002\u0002\u0435\u0434\u0003\u0002",
    "\u0002\u0002\u0435\u0436\u0003\u0002\u0002\u0002\u0436\u0437\u0003\u0002",
    "\u0002\u0002\u0437\u0439\u0005\u00d0i\u0002\u0438\u042b\u0003\u0002",
    "\u0002\u0002\u0438\u042e\u0003\u0002\u0002\u0002\u0439Y\u0003\u0002",
    "\u0002\u0002\u043a\u043b\u0007:\u0002\u0002\u043b\u043c\u0007\u000f",
    "\u0002\u0002\u043c\u0441\u0005\u0006\u0004\u0002\u043d\u043e\u0007:",
    "\u0002\u0002\u043e\u043f\u0007\u009e\u0002\u0002\u043f\u0441\u0005\u0006",
    "\u0004\u0002\u0440\u043a\u0003\u0002\u0002\u0002\u0440\u043d\u0003\u0002",
    "\u0002\u0002\u0441[\u0003\u0002\u0002\u0002\u0442\u0443\u0007V\u0002",
    "\u0002\u0443\u0445\u0007X\u0002\u0002\u0444\u0446\u0007\u00a0\u0002",
    "\u0002\u0445\u0444\u0003\u0002\u0002\u0002\u0445\u0446\u0003\u0002\u0002",
    "\u0002\u0446\u044a\u0003\u0002\u0002\u0002\u0447\u044b\u0005\u00d0i",
    "\u0002\u0448\u0449\u0007G\u0002\u0002\u0449\u044b\u0005\u00ceh\u0002",
    "\u044a\u0447\u0003\u0002\u0002\u0002\u044a\u0448\u0003\u0002\u0002\u0002",
    "\u044b\u044d\u0003\u0002\u0002\u0002\u044c\u044e\u0005^0\u0002\u044d",
    "\u044c\u0003\u0002\u0002\u0002\u044d\u044e\u0003\u0002\u0002\u0002\u044e",
    "\u044f\u0003\u0002\u0002\u0002\u044f\u0450\u0005`1\u0002\u0450]\u0003",
    "\u0002\u0002\u0002\u0451\u0452\u0007\u00d8\u0002\u0002\u0452\u0457\u0005",
    "\u00caf\u0002\u0453\u0454\u0007\u00cd\u0002\u0002\u0454\u0456\u0005",
    "\u00caf\u0002\u0455\u0453\u0003\u0002\u0002\u0002\u0456\u0459\u0003",
    "\u0002\u0002\u0002\u0457\u0455\u0003\u0002\u0002\u0002\u0457\u0458\u0003",
    "\u0002\u0002\u0002\u0458\u045a\u0003\u0002\u0002\u0002\u0459\u0457\u0003",
    "\u0002\u0002\u0002\u045a\u045b\u0007\u00e2\u0002\u0002\u045b_\u0003",
    "\u0002\u0002\u0002\u045c\u045d\u0007C\u0002\u0002\u045d\u0466\u0005",
    "\u00e6t\u0002\u045e\u0466\u0007\u00b6\u0002\u0002\u045f\u0461\u0005",
    "j6\u0002\u0460\u0462\u0007\u00e3\u0002\u0002\u0461\u0460\u0003\u0002",
    "\u0002\u0002\u0461\u0462\u0003\u0002\u0002\u0002\u0462\u0463\u0003\u0002",
    "\u0002\u0002\u0463\u0464\u0007\u0002\u0002\u0003\u0464\u0466\u0003\u0002",
    "\u0002\u0002\u0465\u045c\u0003\u0002\u0002\u0002\u0465\u045e\u0003\u0002",
    "\u0002\u0002\u0465\u045f\u0003\u0002\u0002\u0002\u0466a\u0003\u0002",
    "\u0002\u0002\u0467\u0468\u0007]\u0002\u0002\u0468\u046a\u0007q\u0002",
    "\u0002\u0469\u046b\u0005.\u0018\u0002\u046a\u0469\u0003\u0002\u0002",
    "\u0002\u046a\u046b\u0003\u0002\u0002\u0002\u046b\u046c\u0003\u0002\u0002",
    "\u0002\u046c\u046e\u0005|?\u0002\u046d\u046f\t\u0007\u0002\u0002\u046e",
    "\u046d\u0003\u0002\u0002\u0002\u046e\u046f\u0003\u0002\u0002\u0002\u046f",
    "c\u0003\u0002\u0002\u0002\u0470\u0471\u0007y\u0002\u0002\u0471\u0472",
    "\u0007\u00a0\u0002\u0002\u0472\u0474\u0005\u00d0i\u0002\u0473\u0475",
    "\u0005.\u0018\u0002\u0474\u0473\u0003\u0002\u0002\u0002\u0474\u0475",
    "\u0003\u0002\u0002\u0002\u0475\u0477\u0003\u0002\u0002\u0002\u0476\u0478",
    "\u0005\u0012\n\u0002\u0477\u0476\u0003\u0002\u0002\u0002\u0477\u0478",
    "\u0003\u0002\u0002\u0002\u0478\u047a\u0003\u0002\u0002\u0002\u0479\u047b",
    "\u0007>\u0002\u0002\u047a\u0479\u0003\u0002\u0002\u0002\u047a\u047b",
    "\u0003\u0002\u0002\u0002\u047b\u047d\u0003\u0002\u0002\u0002\u047c\u047e",
    "\u0007\'\u0002\u0002\u047d\u047c\u0003\u0002\u0002\u0002\u047d\u047e",
    "\u0003\u0002\u0002\u0002\u047ee\u0003\u0002\u0002\u0002\u047f\u0480",
    "\u0007\u0089\u0002\u0002\u0480\u0481\u0007\u00a0\u0002\u0002\u0481\u0482",
    "\u0005\u00d0i\u0002\u0482\u0483\u0007\u00a8\u0002\u0002\u0483\u048b",
    "\u0005\u00d0i\u0002\u0484\u0485\u0007\u00cd\u0002\u0002\u0485\u0486",
    "\u0005\u00d0i\u0002\u0486\u0487\u0007\u00a8\u0002\u0002\u0487\u0488",
    "\u0005\u00d0i\u0002\u0488\u048a\u0003\u0002\u0002\u0002\u0489\u0484",
    "\u0003\u0002\u0002\u0002\u048a\u048d\u0003\u0002\u0002\u0002\u048b\u0489",
    "\u0003\u0002\u0002\u0002\u048b\u048c\u0003\u0002\u0002\u0002\u048c\u048f",
    "\u0003\u0002\u0002\u0002\u048d\u048b\u0003\u0002\u0002\u0002\u048e\u0490",
    "\u0005.\u0018\u0002\u048f\u048e\u0003\u0002\u0002\u0002\u048f\u0490",
    "\u0003\u0002\u0002\u0002\u0490g\u0003\u0002\u0002\u0002\u0491\u0493",
    "\u0007\u00d8\u0002\u0002\u0492\u0494\u0005p9\u0002\u0493\u0492\u0003",
    "\u0002\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u0495\u0003",
    "\u0002\u0002\u0002\u0495\u0496\u0007\u0093\u0002\u0002\u0496\u0498\u0005",
    "\u00bc_\u0002\u0497\u0499\u0005~@\u0002\u0498\u0497\u0003\u0002\u0002",
    "\u0002\u0498\u0499\u0003\u0002\u0002\u0002\u0499\u049b\u0003\u0002\u0002",
    "\u0002\u049a\u049c\u0005\u0084C\u0002\u049b\u049a\u0003\u0002\u0002",
    "\u0002\u049b\u049c\u0003\u0002\u0002\u0002\u049c\u049d\u0003\u0002\u0002",
    "\u0002\u049d\u049e\u0007\u00e2\u0002\u0002\u049ei\u0003\u0002\u0002",
    "\u0002\u049f\u04a5\u0005l7\u0002\u04a0\u04a1\u0007\u00b1\u0002\u0002",
    "\u04a1\u04a2\u0007\u0006\u0002\u0002\u04a2\u04a4\u0005l7\u0002\u04a3",
    "\u04a0\u0003\u0002\u0002\u0002\u04a4\u04a7\u0003\u0002\u0002\u0002\u04a5",
    "\u04a3\u0003\u0002\u0002\u0002\u04a5\u04a6\u0003\u0002\u0002\u0002\u04a6",
    "k\u0003\u0002\u0002\u0002\u04a7\u04a5\u0003\u0002\u0002\u0002\u04a8",
    "\u04ae\u0005n8\u0002\u04a9\u04aa\u0007\u00d8\u0002\u0002\u04aa\u04ab",
    "\u0005j6\u0002\u04ab\u04ac\u0007\u00e2\u0002\u0002\u04ac\u04ae\u0003",
    "\u0002\u0002\u0002\u04ad\u04a8\u0003\u0002\u0002\u0002\u04ad\u04a9\u0003",
    "\u0002\u0002\u0002\u04aem\u0003\u0002\u0002\u0002\u04af\u04b1\u0005",
    "p9\u0002\u04b0\u04af\u0003\u0002\u0002\u0002\u04b0\u04b1\u0003\u0002",
    "\u0002\u0002\u04b1\u04b2\u0003\u0002\u0002\u0002\u04b2\u04b4\u0007\u0093",
    "\u0002\u0002\u04b3\u04b5\u00072\u0002\u0002\u04b4\u04b3\u0003\u0002",
    "\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002\u04b5\u04b7\u0003\u0002",
    "\u0002\u0002\u04b6\u04b8\u0005r:\u0002\u04b7\u04b6\u0003\u0002\u0002",
    "\u0002\u04b7\u04b8\u0003\u0002\u0002\u0002\u04b8\u04b9\u0003\u0002\u0002",
    "\u0002\u04b9\u04bb\u0005\u00bc_\u0002\u04ba\u04bc\u0005t;\u0002\u04bb",
    "\u04ba\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc",
    "\u04be\u0003\u0002\u0002\u0002\u04bd\u04bf\u0005v<\u0002\u04be\u04bd",
    "\u0003\u0002\u0002\u0002\u04be\u04bf\u0003\u0002\u0002\u0002\u04bf\u04c1",
    "\u0003\u0002\u0002\u0002\u04c0\u04c2\u0005x=\u0002\u04c1\u04c0\u0003",
    "\u0002\u0002\u0002\u04c1\u04c2\u0003\u0002\u0002\u0002\u04c2\u04c4\u0003",
    "\u0002\u0002\u0002\u04c3\u04c5\u0005z>\u0002\u04c4\u04c3\u0003\u0002",
    "\u0002\u0002\u04c4\u04c5\u0003\u0002\u0002\u0002\u04c5\u04c7\u0003\u0002",
    "\u0002\u0002\u04c6\u04c8\u0005|?\u0002\u04c7\u04c6\u0003\u0002\u0002",
    "\u0002\u04c7\u04c8\u0003\u0002\u0002\u0002\u04c8\u04ca\u0003\u0002\u0002",
    "\u0002\u04c9\u04cb\u0005~@\u0002\u04ca\u04c9\u0003\u0002\u0002\u0002",
    "\u04ca\u04cb\u0003\u0002\u0002\u0002\u04cb\u04ce\u0003\u0002\u0002\u0002",
    "\u04cc\u04cd\u0007\u00be\u0002\u0002\u04cd\u04cf\t\b\u0002\u0002\u04ce",
    "\u04cc\u0003\u0002\u0002\u0002\u04ce\u04cf\u0003\u0002\u0002\u0002\u04cf",
    "\u04d2\u0003\u0002\u0002\u0002\u04d0\u04d1\u0007\u00be\u0002\u0002\u04d1",
    "\u04d3\u0007\u00aa\u0002\u0002\u04d2\u04d0\u0003\u0002\u0002\u0002\u04d2",
    "\u04d3\u0003\u0002\u0002\u0002\u04d3\u04d5\u0003\u0002\u0002\u0002\u04d4",
    "\u04d6\u0005\u0080A\u0002\u04d5\u04d4\u0003\u0002\u0002\u0002\u04d5",
    "\u04d6\u0003\u0002\u0002\u0002\u04d6\u04d8\u0003\u0002\u0002\u0002\u04d7",
    "\u04d9\u0005\u0082B\u0002\u04d8\u04d7\u0003\u0002\u0002\u0002\u04d8",
    "\u04d9\u0003\u0002\u0002\u0002\u04d9\u04db\u0003\u0002\u0002\u0002\u04da",
    "\u04dc\u0005\u0086D\u0002\u04db\u04da\u0003\u0002\u0002\u0002\u04db",
    "\u04dc\u0003\u0002\u0002\u0002\u04dc\u04de\u0003\u0002\u0002\u0002\u04dd",
    "\u04df\u0005\u0088E\u0002\u04de\u04dd\u0003\u0002\u0002\u0002\u04de",
    "\u04df\u0003\u0002\u0002\u0002\u04df\u04e1\u0003\u0002\u0002\u0002\u04e0",
    "\u04e2\u0005\u008aF\u0002\u04e1\u04e0\u0003\u0002\u0002\u0002\u04e1",
    "\u04e2\u0003\u0002\u0002\u0002\u04e2o\u0003\u0002\u0002\u0002\u04e3",
    "\u04e4\u0007\u00be\u0002\u0002\u04e4\u04e5\u0005\u00bc_\u0002\u04e5",
    "q\u0003\u0002\u0002\u0002\u04e6\u04e7\u0007\u00a9\u0002\u0002\u04e7",
    "\u04ea\u0007\u00c5\u0002\u0002\u04e8\u04e9\u0007\u00be\u0002\u0002\u04e9",
    "\u04eb\u0007\u00a5\u0002\u0002\u04ea\u04e8\u0003\u0002\u0002\u0002\u04ea",
    "\u04eb\u0003\u0002\u0002\u0002\u04ebs\u0003\u0002\u0002\u0002\u04ec",
    "\u04ed\u0007E\u0002\u0002\u04ed\u04ee\u0005\u008cG\u0002\u04eeu\u0003",
    "\u0002\u0002\u0002\u04ef\u04f1\t\t\u0002\u0002\u04f0\u04ef\u0003\u0002",
    "\u0002\u0002\u04f0\u04f1\u0003\u0002\u0002\u0002\u04f1\u04f2\u0003\u0002",
    "\u0002\u0002\u04f2\u04f3\u0007\u000b\u0002\u0002\u04f3\u04f4\u0007[",
    "\u0002\u0002\u04f4\u04f5\u0005\u00bc_\u0002\u04f5w\u0003\u0002\u0002",
    "\u0002\u04f6\u04f7\u0007\u00bd\u0002\u0002\u04f7\u04f8\u0005\u00e6t",
    "\u0002\u04f8\u04f9\u0007\f\u0002\u0002\u04f9\u04fa\u0007\u00d8\u0002",
    "\u0002\u04fa\u04fb\u0005\u00a2R\u0002\u04fb\u04fc\u0007\u00e2\u0002",
    "\u0002\u04fcy\u0003\u0002\u0002\u0002\u04fd\u04fe\u0007\u0082\u0002",
    "\u0002\u04fe\u04ff\u0005\u00c0a\u0002\u04ff{\u0003\u0002\u0002\u0002",
    "\u0500\u0501\u0007\u00bc\u0002\u0002\u0501\u0502\u0005\u00c0a\u0002",
    "\u0502}\u0003\u0002\u0002\u0002\u0503\u0504\u0007J\u0002\u0002\u0504",
    "\u050b\u0007\u0014\u0002\u0002\u0505\u0506\t\b\u0002\u0002\u0506\u0507",
    "\u0007\u00d8\u0002\u0002\u0507\u0508\u0005\u00bc_\u0002\u0508\u0509",
    "\u0007\u00e2\u0002\u0002\u0509\u050c\u0003\u0002\u0002\u0002\u050a\u050c",
    "\u0005\u00bc_\u0002\u050b\u0505\u0003\u0002\u0002\u0002\u050b\u050a",
    "\u0003\u0002\u0002\u0002\u050c\u007f\u0003\u0002\u0002\u0002\u050d\u050e",
    "\u0007K\u0002\u0002\u050e\u050f\u0005\u00c0a\u0002\u050f\u0081\u0003",
    "\u0002\u0002\u0002\u0510\u0511\u0007{\u0002\u0002\u0511\u0512\u0007",
    "\u0014\u0002\u0002\u0512\u0513\u0005\u0098M\u0002\u0513\u0083\u0003",
    "\u0002\u0002\u0002\u0514\u0515\u0007{\u0002\u0002\u0515\u0516\u0007",
    "\u0014\u0002\u0002\u0516\u0517\u0005\u00bc_\u0002\u0517\u0085\u0003",
    "\u0002\u0002\u0002\u0518\u0519\u0007d\u0002\u0002\u0519\u051a\u0005",
    "\u0096L\u0002\u051a\u051b\u0007\u0014\u0002\u0002\u051b\u051c\u0005",
    "\u00bc_\u0002\u051c\u0087\u0003\u0002\u0002\u0002\u051d\u051e\u0007",
    "d\u0002\u0002\u051e\u0521\u0005\u0096L\u0002\u051f\u0520\u0007\u00be",
    "\u0002\u0002\u0520\u0522\u0007\u00a5\u0002\u0002\u0521\u051f\u0003\u0002",
    "\u0002\u0002\u0521\u0522\u0003\u0002\u0002\u0002\u0522\u0089\u0003\u0002",
    "\u0002\u0002\u0523\u0524\u0007\u0097\u0002\u0002\u0524\u0525\u0005\u009e",
    "P\u0002\u0525\u008b\u0003\u0002\u0002\u0002\u0526\u0527\bG\u0001\u0002",
    "\u0527\u0529\u0005\u00ccg\u0002\u0528\u052a\u0007>\u0002\u0002\u0529",
    "\u0528\u0003\u0002\u0002\u0002\u0529\u052a\u0003\u0002\u0002\u0002\u052a",
    "\u052c\u0003\u0002\u0002\u0002\u052b\u052d\u0005\u0094K\u0002\u052c",
    "\u052b\u0003\u0002\u0002\u0002\u052c\u052d\u0003\u0002\u0002\u0002\u052d",
    "\u0533\u0003\u0002\u0002\u0002\u052e\u052f\u0007\u00d8\u0002\u0002\u052f",
    "\u0530\u0005\u008cG\u0002\u0530\u0531\u0007\u00e2\u0002\u0002\u0531",
    "\u0533\u0003\u0002\u0002\u0002\u0532\u0526\u0003\u0002\u0002\u0002\u0532",
    "\u052e\u0003\u0002\u0002\u0002\u0533\u0545\u0003\u0002\u0002\u0002\u0534",
    "\u0535\f\u0005\u0002\u0002\u0535\u0536\u0005\u0090I\u0002\u0536\u0537",
    "\u0005\u008cG\u0006\u0537\u0544\u0003\u0002\u0002\u0002\u0538\u053a",
    "\f\u0006\u0002\u0002\u0539\u053b\t\n\u0002\u0002\u053a\u0539\u0003\u0002",
    "\u0002\u0002\u053a\u053b\u0003\u0002\u0002\u0002\u053b\u053d\u0003\u0002",
    "\u0002\u0002\u053c\u053e\u0005\u008eH\u0002\u053d\u053c\u0003\u0002",
    "\u0002\u0002\u053d\u053e\u0003\u0002\u0002\u0002\u053e\u053f\u0003\u0002",
    "\u0002\u0002\u053f\u0540\u0007[\u0002\u0002\u0540\u0541\u0005\u008c",
    "G\u0002\u0541\u0542\u0005\u0092J\u0002\u0542\u0544\u0003\u0002\u0002",
    "\u0002\u0543\u0534\u0003\u0002\u0002\u0002\u0543\u0538\u0003\u0002\u0002",
    "\u0002\u0544\u0547\u0003\u0002\u0002\u0002\u0545\u0543\u0003\u0002\u0002",
    "\u0002\u0545\u0546\u0003\u0002\u0002\u0002\u0546\u008d\u0003\u0002\u0002",
    "\u0002\u0547\u0545\u0003\u0002\u0002\u0002\u0548\u054a\t\u000b\u0002",
    "\u0002\u0549\u0548\u0003\u0002\u0002\u0002\u0549\u054a\u0003\u0002\u0002",
    "\u0002\u054a\u054b\u0003\u0002\u0002\u0002\u054b\u0552\u0007U\u0002",
    "\u0002\u054c\u054e\u0007U\u0002\u0002\u054d\u054f\t\u000b\u0002\u0002",
    "\u054e\u054d\u0003\u0002\u0002\u0002\u054e\u054f\u0003\u0002\u0002\u0002",
    "\u054f\u0552\u0003\u0002\u0002\u0002\u0550\u0552\t\u000b\u0002\u0002",
    "\u0551\u0549\u0003\u0002\u0002\u0002\u0551\u054c\u0003\u0002\u0002\u0002",
    "\u0551\u0550\u0003\u0002\u0002\u0002\u0552\u0574\u0003\u0002\u0002\u0002",
    "\u0553\u0555\t\f\u0002\u0002\u0554\u0553\u0003\u0002\u0002\u0002\u0554",
    "\u0555\u0003\u0002\u0002\u0002\u0555\u0556\u0003\u0002\u0002\u0002\u0556",
    "\u0558\t\r\u0002\u0002\u0557\u0559\u0007|\u0002\u0002\u0558\u0557\u0003",
    "\u0002\u0002\u0002\u0558\u0559\u0003\u0002\u0002\u0002\u0559\u0562\u0003",
    "\u0002\u0002\u0002\u055a\u055c\t\r\u0002\u0002\u055b\u055d\u0007|\u0002",
    "\u0002\u055c\u055b\u0003\u0002\u0002\u0002\u055c\u055d\u0003\u0002\u0002",
    "\u0002\u055d\u055f\u0003\u0002\u0002\u0002\u055e\u0560\t\f\u0002\u0002",
    "\u055f\u055e\u0003\u0002\u0002\u0002\u055f\u0560\u0003\u0002\u0002\u0002",
    "\u0560\u0562\u0003\u0002\u0002\u0002\u0561\u0554\u0003\u0002\u0002\u0002",
    "\u0561\u055a\u0003\u0002\u0002\u0002\u0562\u0574\u0003\u0002\u0002\u0002",
    "\u0563\u0565\t\u000e\u0002\u0002\u0564\u0563\u0003\u0002\u0002\u0002",
    "\u0564\u0565\u0003\u0002\u0002\u0002\u0565\u0566\u0003\u0002\u0002\u0002",
    "\u0566\u0568\u0007F\u0002\u0002\u0567\u0569\u0007|\u0002\u0002\u0568",
    "\u0567\u0003\u0002\u0002\u0002\u0568\u0569\u0003\u0002\u0002\u0002\u0569",
    "\u0572\u0003\u0002\u0002\u0002\u056a\u056c\u0007F\u0002\u0002\u056b",
    "\u056d\u0007|\u0002\u0002\u056c\u056b\u0003\u0002\u0002\u0002\u056c",
    "\u056d\u0003\u0002\u0002\u0002\u056d\u056f\u0003\u0002\u0002\u0002\u056e",
    "\u0570\t\u000e\u0002\u0002\u056f\u056e\u0003\u0002\u0002\u0002\u056f",
    "\u0570\u0003\u0002\u0002\u0002\u0570\u0572\u0003\u0002\u0002\u0002\u0571",
    "\u0564\u0003\u0002\u0002\u0002\u0571\u056a\u0003\u0002\u0002\u0002\u0572",
    "\u0574\u0003\u0002\u0002\u0002\u0573\u0551\u0003\u0002\u0002\u0002\u0573",
    "\u0561\u0003\u0002\u0002\u0002\u0573\u0571\u0003\u0002\u0002\u0002\u0574",
    "\u008f\u0003\u0002\u0002\u0002\u0575\u0577\t\n\u0002\u0002\u0576\u0575",
    "\u0003\u0002\u0002\u0002\u0576\u0577\u0003\u0002\u0002\u0002\u0577\u0578",
    "\u0003\u0002\u0002\u0002\u0578\u0579\u0007 \u0002\u0002\u0579\u057c",
    "\u0007[\u0002\u0002\u057a\u057c\u0007\u00cd\u0002\u0002\u057b\u0576",
    "\u0003\u0002\u0002\u0002\u057b\u057a\u0003\u0002\u0002\u0002\u057c\u0091",
    "\u0003\u0002\u0002\u0002\u057d\u057e\u0007x\u0002\u0002\u057e\u0587",
    "\u0005\u00bc_\u0002\u057f\u0580\u0007\u00b4\u0002\u0002\u0580\u0581",
    "\u0007\u00d8\u0002\u0002\u0581\u0582\u0005\u00bc_\u0002\u0582\u0583",
    "\u0007\u00e2\u0002\u0002\u0583\u0587\u0003\u0002\u0002\u0002\u0584\u0585",
    "\u0007\u00b4\u0002\u0002\u0585\u0587\u0005\u00bc_\u0002\u0586\u057d",
    "\u0003\u0002\u0002\u0002\u0586\u057f\u0003\u0002\u0002\u0002\u0586\u0584",
    "\u0003\u0002\u0002\u0002\u0587\u0093\u0003\u0002\u0002\u0002\u0588\u0589",
    "\u0007\u0091\u0002\u0002\u0589\u058c\u0005\u009cO\u0002\u058a\u058b",
    "\u0007w\u0002\u0002\u058b\u058d\u0005\u009cO\u0002\u058c\u058a\u0003",
    "\u0002\u0002\u0002\u058c\u058d\u0003\u0002\u0002\u0002\u058d\u0095\u0003",
    "\u0002\u0002\u0002\u058e\u0591\u0005\u00c0a\u0002\u058f\u0590\t\u000f",
    "\u0002\u0002\u0590\u0592\u0005\u00c0a\u0002\u0591\u058f\u0003\u0002",
    "\u0002\u0002\u0591\u0592\u0003\u0002\u0002\u0002\u0592\u0097\u0003\u0002",
    "\u0002\u0002\u0593\u0598\u0005\u009aN\u0002\u0594\u0595\u0007\u00cd",
    "\u0002\u0002\u0595\u0597\u0005\u009aN\u0002\u0596\u0594\u0003\u0002",
    "\u0002\u0002\u0597\u059a\u0003\u0002\u0002\u0002\u0598\u0596\u0003\u0002",
    "\u0002\u0002\u0598\u0599\u0003\u0002\u0002\u0002\u0599\u0099\u0003\u0002",
    "\u0002\u0002\u059a\u0598\u0003\u0002\u0002\u0002\u059b\u059d\u0005\u00c0",
    "a\u0002\u059c\u059e\t\u0010\u0002\u0002\u059d\u059c\u0003\u0002\u0002",
    "\u0002\u059d\u059e\u0003\u0002\u0002\u0002\u059e\u05a1\u0003\u0002\u0002",
    "\u0002\u059f\u05a0\u0007v\u0002\u0002\u05a0\u05a2\t\u0011\u0002\u0002",
    "\u05a1\u059f\u0003\u0002\u0002\u0002\u05a1\u05a2\u0003\u0002\u0002\u0002",
    "\u05a2\u05a5\u0003\u0002\u0002\u0002\u05a3\u05a4\u0007\u001b\u0002\u0002",
    "\u05a4\u05a6\u0007\u00c7\u0002\u0002\u05a5\u05a3\u0003\u0002\u0002\u0002",
    "\u05a5\u05a6\u0003\u0002\u0002\u0002\u05a6\u009b\u0003\u0002\u0002\u0002",
    "\u05a7\u05aa\u0005\u00dan\u0002\u05a8\u05a9\u0007\u00e4\u0002\u0002",
    "\u05a9\u05ab\u0005\u00dan\u0002\u05aa\u05a8\u0003\u0002\u0002\u0002",
    "\u05aa\u05ab\u0003\u0002\u0002\u0002\u05ab\u009d\u0003\u0002\u0002\u0002",
    "\u05ac\u05b1\u0005\u00a0Q\u0002\u05ad\u05ae\u0007\u00cd\u0002\u0002",
    "\u05ae\u05b0\u0005\u00a0Q\u0002\u05af\u05ad\u0003\u0002\u0002\u0002",
    "\u05b0\u05b3\u0003\u0002\u0002\u0002\u05b1\u05af\u0003\u0002\u0002\u0002",
    "\u05b1\u05b2\u0003\u0002\u0002\u0002\u05b2\u009f\u0003\u0002\u0002\u0002",
    "\u05b3\u05b1\u0003\u0002\u0002\u0002\u05b4\u05b5\u0005\u00e6t\u0002",
    "\u05b5\u05b6\u0007\u00d2\u0002\u0002\u05b6\u05b7\u0005\u00dco\u0002",
    "\u05b7\u00a1\u0003\u0002\u0002\u0002\u05b8\u05ba\u0005\u00a4S\u0002",
    "\u05b9\u05b8\u0003\u0002\u0002\u0002\u05b9\u05ba\u0003\u0002\u0002\u0002",
    "\u05ba\u05bc\u0003\u0002\u0002\u0002\u05bb\u05bd\u0005\u00a6T\u0002",
    "\u05bc\u05bb\u0003\u0002\u0002\u0002\u05bc\u05bd\u0003\u0002\u0002\u0002",
    "\u05bd\u05bf\u0003\u0002\u0002\u0002\u05be\u05c0\u0005\u00a8U\u0002",
    "\u05bf\u05be\u0003\u0002\u0002\u0002\u05bf\u05c0\u0003\u0002\u0002\u0002",
    "\u05c0\u00a3\u0003\u0002\u0002\u0002\u05c1\u05c2\u0007\u007f\u0002\u0002",
    "\u05c2\u05c3\u0007\u0014\u0002\u0002\u05c3\u05c4\u0005\u00bc_\u0002",
    "\u05c4\u00a5\u0003\u0002\u0002\u0002\u05c5\u05c6\u0007{\u0002\u0002",
    "\u05c6\u05c7\u0007\u0014\u0002\u0002\u05c7\u05c8\u0005\u0098M\u0002",
    "\u05c8\u00a7\u0003\u0002\u0002\u0002\u05c9\u05ca\t\u0012\u0002\u0002",
    "\u05ca\u05cb\u0005\u00aaV\u0002\u05cb\u00a9\u0003\u0002\u0002\u0002",
    "\u05cc\u05d3\u0005\u00acW\u0002\u05cd\u05ce\u0007\u0012\u0002\u0002",
    "\u05ce\u05cf\u0005\u00acW\u0002\u05cf\u05d0\u0007\b\u0002\u0002\u05d0",
    "\u05d1\u0005\u00acW\u0002\u05d1\u05d3\u0003\u0002\u0002\u0002\u05d2",
    "\u05cc\u0003\u0002\u0002\u0002\u05d2\u05cd\u0003\u0002\u0002\u0002\u05d3",
    "\u00ab\u0003\u0002\u0002\u0002\u05d4\u05d5\u0007\"\u0002\u0002\u05d5",
    "\u05e1\u0007\u008f\u0002\u0002\u05d6\u05d7\u0007\u00b0\u0002\u0002\u05d7",
    "\u05e1\u0007\u0081\u0002\u0002\u05d8\u05d9\u0007\u00b0\u0002\u0002\u05d9",
    "\u05e1\u0007A\u0002\u0002\u05da\u05db\u0005\u00dan\u0002\u05db\u05dc",
    "\u0007\u0081\u0002\u0002\u05dc\u05e1\u0003\u0002\u0002\u0002\u05dd\u05de",
    "\u0005\u00dan\u0002\u05de\u05df\u0007A\u0002\u0002\u05df\u05e1\u0003",
    "\u0002\u0002\u0002\u05e0\u05d4\u0003\u0002\u0002\u0002\u05e0\u05d6\u0003",
    "\u0002\u0002\u0002\u05e0\u05d8\u0003\u0002\u0002\u0002\u05e0\u05da\u0003",
    "\u0002\u0002\u0002\u05e0\u05dd\u0003\u0002\u0002\u0002\u05e1\u00ad\u0003",
    "\u0002\u0002\u0002\u05e2\u05e3\u0007\u0096\u0002\u0002\u05e3\u05e4\u0005",
    "\u009eP\u0002\u05e4\u00af\u0003\u0002\u0002\u0002\u05e5\u05e6\u0007",
    "\u0098\u0002\u0002\u05e6\u05e7\u0007\u001f\u0002\u0002\u05e7\u05e8\u0007",
    "#\u0002\u0002\u05e8\u0610\u0005\u00d6l\u0002\u05e9\u05ea\u0007\u0098",
    "\u0002\u0002\u05ea\u05eb\u0007\u001f\u0002\u0002\u05eb\u05ec\u00070",
    "\u0002\u0002\u05ec\u0610\u0005\u00d0i\u0002\u05ed\u05ee\u0007\u0098",
    "\u0002\u0002\u05ee\u05f0\u0007\u001f\u0002\u0002\u05ef\u05f1\u0007\u00a2",
    "\u0002\u0002\u05f0\u05ef\u0003\u0002\u0002\u0002\u05f0\u05f1\u0003\u0002",
    "\u0002\u0002\u05f1\u05f3\u0003\u0002\u0002\u0002\u05f2\u05f4\u0007\u00a0",
    "\u0002\u0002\u05f3\u05f2\u0003\u0002\u0002\u0002\u05f3\u05f4\u0003\u0002",
    "\u0002\u0002\u05f4\u05f5\u0003\u0002\u0002\u0002\u05f5\u0610\u0005\u00d0",
    "i\u0002\u05f6\u05f7\u0007\u0098\u0002\u0002\u05f7\u0610\u0007$\u0002",
    "\u0002\u05f8\u05f9\u0007\u0098\u0002\u0002\u05f9\u05fc\u0007/\u0002",
    "\u0002\u05fa\u05fb\u0007E\u0002\u0002\u05fb\u05fd\u0005\u00d6l\u0002",
    "\u05fc\u05fa\u0003\u0002\u0002\u0002\u05fc\u05fd\u0003\u0002\u0002\u0002",
    "\u05fd\u0610\u0003\u0002\u0002\u0002\u05fe\u0600\u0007\u0098\u0002\u0002",
    "\u05ff\u0601\u0007\u00a2\u0002\u0002\u0600\u05ff\u0003\u0002\u0002\u0002",
    "\u0600\u0601\u0003\u0002\u0002\u0002\u0601\u0602\u0003\u0002\u0002\u0002",
    "\u0602\u0605\u0007\u00a1\u0002\u0002\u0603\u0604\t\u0013\u0002\u0002",
    "\u0604\u0606\u0005\u00d6l\u0002\u0605\u0603\u0003\u0002\u0002\u0002",
    "\u0605\u0606\u0003\u0002\u0002\u0002\u0606\u060a\u0003\u0002\u0002\u0002",
    "\u0607\u0608\u0007c\u0002\u0002\u0608\u060b\u0007\u00c7\u0002\u0002",
    "\u0609\u060b\u0005|?\u0002\u060a\u0607\u0003\u0002\u0002\u0002\u060a",
    "\u0609\u0003\u0002\u0002\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b",
    "\u060d\u0003\u0002\u0002\u0002\u060c\u060e\u0005\u0088E\u0002\u060d",
    "\u060c\u0003\u0002\u0002\u0002\u060d\u060e\u0003\u0002\u0002\u0002\u060e",
    "\u0610\u0003\u0002\u0002\u0002\u060f\u05e5\u0003\u0002\u0002\u0002\u060f",
    "\u05e9\u0003\u0002\u0002\u0002\u060f\u05ed\u0003\u0002\u0002\u0002\u060f",
    "\u05f6\u0003\u0002\u0002\u0002\u060f\u05f8\u0003\u0002\u0002\u0002\u060f",
    "\u05fe\u0003\u0002\u0002\u0002\u0610\u00b1\u0003\u0002\u0002\u0002\u0611",
    "\u0612\u0007\u009f\u0002\u0002\u0612\u0613\u0007@\u0002\u0002\u0613",
    "\u0614\u00073\u0002\u0002\u0614\u0634\u0005\u00d0i\u0002\u0615\u0616",
    "\u0007\u009f\u0002\u0002\u0616\u0617\u0007@\u0002\u0002\u0617\u0634",
    "\u0007g\u0002\u0002\u0618\u0619\u0007\u009f\u0002\u0002\u0619\u061a",
    "\u0007\u0087\u0002\u0002\u061a\u0634\u0007/\u0002\u0002\u061b\u061c",
    "\u0007\u009f\u0002\u0002\u061c\u061d\u0007\u0087\u0002\u0002\u061d\u061e",
    "\u00070\u0002\u0002\u061e\u0634\u0005\u00d0i\u0002\u061f\u0620\u0007",
    "\u009f\u0002\u0002\u0620\u0628\t\u0014\u0002\u0002\u0621\u0622\u0007",
    "3\u0002\u0002\u0622\u0629\u0007\u0095\u0002\u0002\u0623\u0629\u0007",
    "=\u0002\u0002\u0624\u0626\u0007\u00ae\u0002\u0002\u0625\u0624\u0003",
    "\u0002\u0002\u0002\u0625\u0626\u0003\u0002\u0002\u0002\u0626\u0627\u0003",
    "\u0002\u0002\u0002\u0627\u0629\u0007k\u0002\u0002\u0628\u0621\u0003",
    "\u0002\u0002\u0002\u0628\u0623\u0003\u0002\u0002\u0002\u0628\u0625\u0003",
    "\u0002\u0002\u0002\u0629\u062a\u0003\u0002\u0002\u0002\u062a\u0634\u0005",
    "\u00d0i\u0002\u062b\u062c\u0007\u009f\u0002\u0002\u062c\u062d\t\u0014",
    "\u0002\u0002\u062d\u062e\u0007\u008c\u0002\u0002\u062e\u0634\u0007\u0095",
    "\u0002\u0002\u062f\u0630\u0007\u009f\u0002\u0002\u0630\u0631\u0007\u009d",
    "\u0002\u0002\u0631\u0632\u0007\u008b\u0002\u0002\u0632\u0634\u0005\u00d0",
    "i\u0002\u0633\u0611\u0003\u0002\u0002\u0002\u0633\u0615\u0003\u0002",
    "\u0002\u0002\u0633\u0618\u0003\u0002\u0002\u0002\u0633\u061b\u0003\u0002",
    "\u0002\u0002\u0633\u061f\u0003\u0002\u0002\u0002\u0633\u062b\u0003\u0002",
    "\u0002\u0002\u0633\u062f\u0003\u0002\u0002\u0002\u0634\u00b3\u0003\u0002",
    "\u0002\u0002\u0635\u0637\u0007\u00ad\u0002\u0002\u0636\u0638\u0007\u00a2",
    "\u0002\u0002\u0637\u0636\u0003\u0002\u0002\u0002\u0637\u0638\u0003\u0002",
    "\u0002\u0002\u0638\u063a\u0003\u0002\u0002\u0002\u0639\u063b\u0007\u00a0",
    "\u0002\u0002\u063a\u0639\u0003\u0002\u0002\u0002\u063a\u063b\u0003\u0002",
    "\u0002\u0002\u063b\u063e\u0003\u0002\u0002\u0002\u063c\u063d\u0007O",
    "\u0002\u0002\u063d\u063f\u00079\u0002\u0002\u063e\u063c\u0003\u0002",
    "\u0002\u0002\u063e\u063f\u0003\u0002\u0002\u0002\u063f\u0640\u0003\u0002",
    "\u0002\u0002\u0640\u0642\u0005\u00d0i\u0002\u0641\u0643\u0005.\u0018",
    "\u0002\u0642\u0641\u0003\u0002\u0002\u0002\u0642\u0643\u0003\u0002\u0002",
    "\u0002\u0643\u00b5\u0003\u0002\u0002\u0002\u0644\u0645\u0007\u00b3\u0002",
    "\u0002\u0645\u0646\u0005\u00d6l\u0002\u0646\u00b7\u0003\u0002\u0002",
    "\u0002\u0647\u0648\u0007\u00b9\u0002\u0002\u0648\u064a\u0005\u00d0i",
    "\u0002\u0649\u064b\u00078\u0002\u0002\u064a\u0649\u0003\u0002\u0002",
    "\u0002\u064a\u064b\u0003\u0002\u0002\u0002\u064b\u064e\u0003\u0002\u0002",
    "\u0002\u064c\u064d\u0007d\u0002\u0002\u064d\u064f\u0007\u00c5\u0002",
    "\u0002\u064e\u064c\u0003\u0002\u0002\u0002\u064e\u064f\u0003\u0002\u0002",
    "\u0002\u064f\u00b9\u0003\u0002\u0002\u0002\u0650\u0680\u0005\u00e6t",
    "\u0002\u0651\u0652\u0005\u00e6t\u0002\u0652\u0653\u0007\u00d8\u0002",
    "\u0002\u0653\u0654\u0005\u00e6t\u0002\u0654\u065b\u0005\u00ba^\u0002",
    "\u0655\u0656\u0007\u00cd\u0002\u0002\u0656\u0657\u0005\u00e6t\u0002",
    "\u0657\u0658\u0005\u00ba^\u0002\u0658\u065a\u0003\u0002\u0002\u0002",
    "\u0659\u0655\u0003\u0002\u0002\u0002\u065a\u065d\u0003\u0002\u0002\u0002",
    "\u065b\u0659\u0003\u0002\u0002\u0002\u065b\u065c\u0003\u0002\u0002\u0002",
    "\u065c\u065e\u0003\u0002\u0002\u0002\u065d\u065b\u0003\u0002\u0002\u0002",
    "\u065e\u065f\u0007\u00e2\u0002\u0002\u065f\u0680\u0003\u0002\u0002\u0002",
    "\u0660\u0661\u0005\u00e6t\u0002\u0661\u0662\u0007\u00d8\u0002\u0002",
    "\u0662\u0667\u0005\u00eav\u0002\u0663\u0664\u0007\u00cd\u0002\u0002",
    "\u0664\u0666\u0005\u00eav\u0002\u0665\u0663\u0003\u0002\u0002\u0002",
    "\u0666\u0669\u0003\u0002\u0002\u0002\u0667\u0665\u0003\u0002\u0002\u0002",
    "\u0667\u0668\u0003\u0002\u0002\u0002\u0668\u066a\u0003\u0002\u0002\u0002",
    "\u0669\u0667\u0003\u0002\u0002\u0002\u066a\u066b\u0007\u00e2\u0002\u0002",
    "\u066b\u0680\u0003\u0002\u0002\u0002\u066c\u066d\u0005\u00e6t\u0002",
    "\u066d\u066e\u0007\u00d8\u0002\u0002\u066e\u0673\u0005\u00ba^\u0002",
    "\u066f\u0670\u0007\u00cd\u0002\u0002\u0670\u0672\u0005\u00ba^\u0002",
    "\u0671\u066f\u0003\u0002\u0002\u0002\u0672\u0675\u0003\u0002\u0002\u0002",
    "\u0673\u0671\u0003\u0002\u0002\u0002\u0673\u0674\u0003\u0002\u0002\u0002",
    "\u0674\u0676\u0003\u0002\u0002\u0002\u0675\u0673\u0003\u0002\u0002\u0002",
    "\u0676\u0677\u0007\u00e2\u0002\u0002\u0677\u0680\u0003\u0002\u0002\u0002",
    "\u0678\u0679\u0005\u00e6t\u0002\u0679\u067b\u0007\u00d8\u0002\u0002",
    "\u067a\u067c\u0005\u00bc_\u0002\u067b\u067a\u0003\u0002\u0002\u0002",
    "\u067b\u067c\u0003\u0002\u0002\u0002\u067c\u067d\u0003\u0002\u0002\u0002",
    "\u067d\u067e\u0007\u00e2\u0002\u0002\u067e\u0680\u0003\u0002\u0002\u0002",
    "\u067f\u0650\u0003\u0002\u0002\u0002\u067f\u0651\u0003\u0002\u0002\u0002",
    "\u067f\u0660\u0003\u0002\u0002\u0002\u067f\u066c\u0003\u0002\u0002\u0002",
    "\u067f\u0678\u0003\u0002\u0002\u0002\u0680\u00bb\u0003\u0002\u0002\u0002",
    "\u0681\u0686\u0005\u00be`\u0002\u0682\u0683\u0007\u00cd\u0002\u0002",
    "\u0683\u0685\u0005\u00be`\u0002\u0684\u0682\u0003\u0002\u0002\u0002",
    "\u0685\u0688\u0003\u0002\u0002\u0002\u0686\u0684\u0003\u0002\u0002\u0002",
    "\u0686\u0687\u0003\u0002\u0002\u0002\u0687\u00bd\u0003\u0002\u0002\u0002",
    "\u0688\u0686\u0003\u0002\u0002\u0002\u0689\u068a\u0005\u00d0i\u0002",
    "\u068a\u068b\u0007\u00d0\u0002\u0002\u068b\u068d\u0003\u0002\u0002\u0002",
    "\u068c\u0689\u0003\u0002\u0002\u0002\u068c\u068d\u0003\u0002\u0002\u0002",
    "\u068d\u068e\u0003\u0002\u0002\u0002\u068e\u0695\u0007\u00c9\u0002\u0002",
    "\u068f\u0690\u0007\u00d8\u0002\u0002\u0690\u0691\u0005j6\u0002\u0691",
    "\u0692\u0007\u00e2\u0002\u0002\u0692\u0695\u0003\u0002\u0002\u0002\u0693",
    "\u0695\u0005\u00c0a\u0002\u0694\u068c\u0003\u0002\u0002\u0002\u0694",
    "\u068f\u0003\u0002\u0002\u0002\u0694\u0693\u0003\u0002\u0002\u0002\u0695",
    "\u00bf\u0003\u0002\u0002\u0002\u0696\u0697\ba\u0001\u0002\u0697\u0699",
    "\u0007\u0015\u0002\u0002\u0698\u069a\u0005\u00c0a\u0002\u0699\u0698",
    "\u0003\u0002\u0002\u0002\u0699\u069a\u0003\u0002\u0002\u0002\u069a\u06a0",
    "\u0003\u0002\u0002\u0002\u069b\u069c\u0007\u00bb\u0002\u0002\u069c\u069d",
    "\u0005\u00c0a\u0002\u069d\u069e\u0007\u00a4\u0002\u0002\u069e\u069f",
    "\u0005\u00c0a\u0002\u069f\u06a1\u0003\u0002\u0002\u0002\u06a0\u069b",
    "\u0003\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002\u0002\u0002\u06a2\u06a0",
    "\u0003\u0002\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002\u06a3\u06a6",
    "\u0003\u0002\u0002\u0002\u06a4\u06a5\u00075\u0002\u0002\u06a5\u06a7",
    "\u0005\u00c0a\u0002\u06a6\u06a4\u0003\u0002\u0002\u0002\u06a6\u06a7",
    "\u0003\u0002\u0002\u0002\u06a7\u06a8\u0003\u0002\u0002\u0002\u06a8\u06a9",
    "\u00076\u0002\u0002\u06a9\u0718\u0003\u0002\u0002\u0002\u06aa\u06ab",
    "\u0007\u0016\u0002\u0002\u06ab\u06ac\u0007\u00d8\u0002\u0002\u06ac\u06ad",
    "\u0005\u00c0a\u0002\u06ad\u06ae\u0007\f\u0002\u0002\u06ae\u06af\u0005",
    "\u00ba^\u0002\u06af\u06b0\u0007\u00e2\u0002\u0002\u06b0\u0718\u0003",
    "\u0002\u0002\u0002\u06b1\u06b2\u0007%\u0002\u0002\u06b2\u0718\u0007",
    "\u00c7\u0002\u0002\u06b3\u06b4\u0007<\u0002\u0002\u06b4\u06b5\u0007",
    "\u00d8\u0002\u0002\u06b5\u06b6\u0005\u00dep\u0002\u06b6\u06b7\u0007",
    "E\u0002\u0002\u06b7\u06b8\u0005\u00c0a\u0002\u06b8\u06b9\u0007\u00e2",
    "\u0002\u0002\u06b9\u0718\u0003\u0002\u0002\u0002\u06ba\u06bb\u0007W",
    "\u0002\u0002\u06bb\u06bc\u0005\u00c0a\u0002\u06bc\u06bd\u0005\u00de",
    "p\u0002\u06bd\u0718\u0003\u0002\u0002\u0002\u06be\u06bf\u0007\u009c",
    "\u0002\u0002\u06bf\u06c0\u0007\u00d8\u0002\u0002\u06c0\u06c1\u0005\u00c0",
    "a\u0002\u06c1\u06c2\u0007E\u0002\u0002\u06c2\u06c5\u0005\u00c0a\u0002",
    "\u06c3\u06c4\u0007B\u0002\u0002\u06c4\u06c6\u0005\u00c0a\u0002\u06c5",
    "\u06c3\u0003\u0002\u0002\u0002\u06c5\u06c6\u0003\u0002\u0002\u0002\u06c6",
    "\u06c7\u0003\u0002\u0002\u0002\u06c7\u06c8\u0007\u00e2\u0002\u0002\u06c8",
    "\u0718\u0003\u0002\u0002\u0002\u06c9\u06ca\u0007\u00a7\u0002\u0002\u06ca",
    "\u0718\u0007\u00c7\u0002\u0002\u06cb\u06cc\u0007\u00ac\u0002\u0002\u06cc",
    "\u06cd\u0007\u00d8\u0002\u0002\u06cd\u06ce\t\u0015\u0002\u0002\u06ce",
    "\u06cf\u0007\u00c7\u0002\u0002\u06cf\u06d0\u0007E\u0002\u0002\u06d0",
    "\u06d1\u0005\u00c0a\u0002\u06d1\u06d2\u0007\u00e2\u0002\u0002\u06d2",
    "\u0718\u0003\u0002\u0002\u0002\u06d3\u06d4\u0005\u00e6t\u0002\u06d4",
    "\u06d6\u0007\u00d8\u0002\u0002\u06d5\u06d7\u0005\u00bc_\u0002\u06d6",
    "\u06d5\u0003\u0002\u0002\u0002\u06d6\u06d7\u0003\u0002\u0002\u0002\u06d7",
    "\u06d8\u0003\u0002\u0002\u0002\u06d8\u06d9\u0007\u00e2\u0002\u0002\u06d9",
    "\u06da\u0003\u0002\u0002\u0002\u06da\u06db\u0007~\u0002\u0002\u06db",
    "\u06dc\u0007\u00d8\u0002\u0002\u06dc\u06dd\u0005\u00a2R\u0002\u06dd",
    "\u06de\u0007\u00e2\u0002\u0002\u06de\u0718\u0003\u0002\u0002\u0002\u06df",
    "\u06e0\u0005\u00e6t\u0002\u06e0\u06e2\u0007\u00d8\u0002\u0002\u06e1",
    "\u06e3\u0005\u00bc_\u0002\u06e2\u06e1\u0003\u0002\u0002\u0002\u06e2",
    "\u06e3\u0003\u0002\u0002\u0002\u06e3\u06e4\u0003\u0002\u0002\u0002\u06e4",
    "\u06e5\u0007\u00e2\u0002\u0002\u06e5\u06e6\u0003\u0002\u0002\u0002\u06e6",
    "\u06e7\u0007~\u0002\u0002\u06e7\u06e8\u0005\u00e6t\u0002\u06e8\u0718",
    "\u0003\u0002\u0002\u0002\u06e9\u06ef\u0005\u00e6t\u0002\u06ea\u06ec",
    "\u0007\u00d8\u0002\u0002\u06eb\u06ed\u0005\u00bc_\u0002\u06ec\u06eb",
    "\u0003\u0002\u0002\u0002\u06ec\u06ed\u0003\u0002\u0002\u0002\u06ed\u06ee",
    "\u0003\u0002\u0002\u0002\u06ee\u06f0\u0007\u00e2\u0002\u0002\u06ef\u06ea",
    "\u0003\u0002\u0002\u0002\u06ef\u06f0\u0003\u0002\u0002\u0002\u06f0\u06f1",
    "\u0003\u0002\u0002\u0002\u06f1\u06f3\u0007\u00d8\u0002\u0002\u06f2\u06f4",
    "\u00072\u0002\u0002\u06f3\u06f2\u0003\u0002\u0002\u0002\u06f3\u06f4",
    "\u0003\u0002\u0002\u0002\u06f4\u06f6\u0003\u0002\u0002\u0002\u06f5\u06f7",
    "\u0005\u00c2b\u0002\u06f6\u06f5\u0003\u0002\u0002\u0002\u06f6\u06f7",
    "\u0003\u0002\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06f9",
    "\u0007\u00e2\u0002\u0002\u06f9\u0718\u0003\u0002\u0002\u0002\u06fa\u0718",
    "\u0005\u00dco\u0002\u06fb\u06fc\u0007\u00cf\u0002\u0002\u06fc\u0718",
    "\u0005\u00c0a\u0013\u06fd\u06fe\u0007t\u0002\u0002\u06fe\u0718\u0005",
    "\u00c0a\u000e\u06ff\u0700\u0005\u00d0i\u0002\u0700\u0701\u0007\u00d0",
    "\u0002\u0002\u0701\u0703\u0003\u0002\u0002\u0002\u0702\u06ff\u0003\u0002",
    "\u0002\u0002\u0702\u0703\u0003\u0002\u0002\u0002\u0703\u0704\u0003\u0002",
    "\u0002\u0002\u0704\u0718\u0007\u00c9\u0002\u0002\u0705\u0706\u0007\u00d8",
    "\u0002\u0002\u0706\u0707\u0005j6\u0002\u0707\u0708\u0007\u00e2\u0002",
    "\u0002\u0708\u0718\u0003\u0002\u0002\u0002\u0709\u070a\u0007\u00d8\u0002",
    "\u0002\u070a\u070b\u0005\u00c0a\u0002\u070b\u070c\u0007\u00e2\u0002",
    "\u0002\u070c\u0718\u0003\u0002\u0002\u0002\u070d\u070e\u0007\u00d8\u0002",
    "\u0002\u070e\u070f\u0005\u00bc_\u0002\u070f\u0710\u0007\u00e2\u0002",
    "\u0002\u0710\u0718\u0003\u0002\u0002\u0002\u0711\u0713\u0007\u00d6\u0002",
    "\u0002\u0712\u0714\u0005\u00bc_\u0002\u0713\u0712\u0003\u0002\u0002",
    "\u0002\u0713\u0714\u0003\u0002\u0002\u0002\u0714\u0715\u0003\u0002\u0002",
    "\u0002\u0715\u0718\u0007\u00e1\u0002\u0002\u0716\u0718\u0005\u00c8e",
    "\u0002\u0717\u0696\u0003\u0002\u0002\u0002\u0717\u06aa\u0003\u0002\u0002",
    "\u0002\u0717\u06b1\u0003\u0002\u0002\u0002\u0717\u06b3\u0003\u0002\u0002",
    "\u0002\u0717\u06ba\u0003\u0002\u0002\u0002\u0717\u06be\u0003\u0002\u0002",
    "\u0002\u0717\u06c9\u0003\u0002\u0002\u0002\u0717\u06cb\u0003\u0002\u0002",
    "\u0002\u0717\u06d3\u0003\u0002\u0002\u0002\u0717\u06df\u0003\u0002\u0002",
    "\u0002\u0717\u06e9\u0003\u0002\u0002\u0002\u0717\u06fa\u0003\u0002\u0002",
    "\u0002\u0717\u06fb\u0003\u0002\u0002\u0002\u0717\u06fd\u0003\u0002\u0002",
    "\u0002\u0717\u0702\u0003\u0002\u0002\u0002\u0717\u0705\u0003\u0002\u0002",
    "\u0002\u0717\u0709\u0003\u0002\u0002\u0002\u0717\u070d\u0003\u0002\u0002",
    "\u0002\u0717\u0711\u0003\u0002\u0002\u0002\u0717\u0716\u0003\u0002\u0002",
    "\u0002\u0718\u0760\u0003\u0002\u0002\u0002\u0719\u071a\f\u0012\u0002",
    "\u0002\u071a\u071b\t\u0016\u0002\u0002\u071b\u075f\u0005\u00c0a\u0013",
    "\u071c\u071d\f\u0011\u0002\u0002\u071d\u071e\t\u0017\u0002\u0002\u071e",
    "\u075f\u0005\u00c0a\u0012\u071f\u0732\f\u0010\u0002\u0002\u0720\u0733",
    "\u0007\u00d1\u0002\u0002\u0721\u0733\u0007\u00d2\u0002\u0002\u0722\u0733",
    "\u0007\u00da\u0002\u0002\u0723\u0733\u0007\u00d7\u0002\u0002\u0724\u0733",
    "\u0007\u00d3\u0002\u0002\u0725\u0733\u0007\u00d9\u0002\u0002\u0726\u0733",
    "\u0007\u00d4\u0002\u0002\u0727\u0729\u0007H\u0002\u0002\u0728\u0727",
    "\u0003\u0002\u0002\u0002\u0728\u0729\u0003\u0002\u0002\u0002\u0729\u072b",
    "\u0003\u0002\u0002\u0002\u072a\u072c\u0007t\u0002\u0002\u072b\u072a",
    "\u0003\u0002\u0002\u0002\u072b\u072c\u0003\u0002\u0002\u0002\u072c\u072d",
    "\u0003\u0002\u0002\u0002\u072d\u0733\u0007Q\u0002\u0002\u072e\u0730",
    "\u0007t\u0002\u0002\u072f\u072e\u0003\u0002\u0002\u0002\u072f\u0730",
    "\u0003\u0002\u0002\u0002\u0730\u0731\u0003\u0002\u0002\u0002\u0731\u0733",
    "\t\u0018\u0002\u0002\u0732\u0720\u0003\u0002\u0002\u0002\u0732\u0721",
    "\u0003\u0002\u0002\u0002\u0732\u0722\u0003\u0002\u0002\u0002\u0732\u0723",
    "\u0003\u0002\u0002\u0002\u0732\u0724\u0003\u0002\u0002\u0002\u0732\u0725",
    "\u0003\u0002\u0002\u0002\u0732\u0726\u0003\u0002\u0002\u0002\u0732\u0728",
    "\u0003\u0002\u0002\u0002\u0732\u072f\u0003\u0002\u0002\u0002\u0733\u0734",
    "\u0003\u0002\u0002\u0002\u0734\u075f\u0005\u00c0a\u0011\u0735\u0736",
    "\f\r\u0002\u0002\u0736\u0737\u0007\b\u0002\u0002\u0737\u075f\u0005\u00c0",
    "a\u000e\u0738\u0739\f\f\u0002\u0002\u0739\u073a\u0007z\u0002\u0002\u073a",
    "\u075f\u0005\u00c0a\r\u073b\u073d\f\u000b\u0002\u0002\u073c\u073e\u0007",
    "t\u0002\u0002\u073d\u073c\u0003\u0002\u0002\u0002\u073d\u073e\u0003",
    "\u0002\u0002\u0002\u073e\u073f\u0003\u0002\u0002\u0002\u073f\u0740\u0007",
    "\u0012\u0002\u0002\u0740\u0741\u0005\u00c0a\u0002\u0741\u0742\u0007",
    "\b\u0002\u0002\u0742\u0743\u0005\u00c0a\f\u0743\u075f\u0003\u0002\u0002",
    "\u0002\u0744\u0745\f\n\u0002\u0002\u0745\u0746\u0007\u00dd\u0002\u0002",
    "\u0746\u0747\u0005\u00c0a\u0002\u0747\u0748\u0007\u00cc\u0002\u0002",
    "\u0748\u0749\u0005\u00c0a\n\u0749\u075f\u0003\u0002\u0002\u0002\u074a",
    "\u074b\f\u0015\u0002\u0002\u074b\u074c\u0007\u00d6\u0002\u0002\u074c",
    "\u074d\u0005\u00c0a\u0002\u074d\u074e\u0007\u00e1\u0002\u0002\u074e",
    "\u075f\u0003\u0002\u0002\u0002\u074f\u0750\f\u0014\u0002\u0002\u0750",
    "\u0751\u0007\u00d0\u0002\u0002\u0751\u075f\u0007\u00c5\u0002\u0002\u0752",
    "\u0753\f\u000f\u0002\u0002\u0753\u0755\u0007Y\u0002\u0002\u0754\u0756",
    "\u0007t\u0002\u0002\u0755\u0754\u0003\u0002\u0002\u0002\u0755\u0756",
    "\u0003\u0002\u0002\u0002\u0756\u0757\u0003\u0002\u0002\u0002\u0757\u075f",
    "\u0007u\u0002\u0002\u0758\u075c\f\t\u0002\u0002\u0759\u075d\u0005\u00e4",
    "s\u0002\u075a\u075b\u0007\f\u0002\u0002\u075b\u075d\u0005\u00e6t\u0002",
    "\u075c\u0759\u0003\u0002\u0002\u0002\u075c\u075a\u0003\u0002\u0002\u0002",
    "\u075d\u075f\u0003\u0002\u0002\u0002\u075e\u0719\u0003\u0002\u0002\u0002",
    "\u075e\u071c\u0003\u0002\u0002\u0002\u075e\u071f\u0003\u0002\u0002\u0002",
    "\u075e\u0735\u0003\u0002\u0002\u0002\u075e\u0738\u0003\u0002\u0002\u0002",
    "\u075e\u073b\u0003\u0002\u0002\u0002\u075e\u0744\u0003\u0002\u0002\u0002",
    "\u075e\u074a\u0003\u0002\u0002\u0002\u075e\u074f\u0003\u0002\u0002\u0002",
    "\u075e\u0752\u0003\u0002\u0002\u0002\u075e\u0758\u0003\u0002\u0002\u0002",
    "\u075f\u0762\u0003\u0002\u0002\u0002\u0760\u075e\u0003\u0002\u0002\u0002",
    "\u0760\u0761\u0003\u0002\u0002\u0002\u0761\u00c1\u0003\u0002\u0002\u0002",
    "\u0762\u0760\u0003\u0002\u0002\u0002\u0763\u0768\u0005\u00c4c\u0002",
    "\u0764\u0765\u0007\u00cd\u0002\u0002\u0765\u0767\u0005\u00c4c\u0002",
    "\u0766\u0764\u0003\u0002\u0002\u0002\u0767\u076a\u0003\u0002\u0002\u0002",
    "\u0768\u0766\u0003\u0002\u0002\u0002\u0768\u0769\u0003\u0002\u0002\u0002",
    "\u0769\u00c3\u0003\u0002\u0002\u0002\u076a\u0768\u0003\u0002\u0002\u0002",
    "\u076b\u076e\u0005\u00c6d\u0002\u076c\u076e\u0005\u00c0a\u0002\u076d",
    "\u076b\u0003\u0002\u0002\u0002\u076d\u076c\u0003\u0002\u0002\u0002\u076e",
    "\u00c5\u0003\u0002\u0002\u0002\u076f\u0770\u0007\u00d8\u0002\u0002\u0770",
    "\u0775\u0005\u00e6t\u0002\u0771\u0772\u0007\u00cd\u0002\u0002\u0772",
    "\u0774\u0005\u00e6t\u0002\u0773\u0771\u0003\u0002\u0002\u0002\u0774",
    "\u0777\u0003\u0002\u0002\u0002\u0775\u0773\u0003\u0002\u0002\u0002\u0775",
    "\u0776\u0003\u0002\u0002\u0002\u0776\u0778\u0003\u0002\u0002\u0002\u0777",
    "\u0775\u0003\u0002\u0002\u0002\u0778\u0779\u0007\u00e2\u0002\u0002\u0779",
    "\u0783\u0003\u0002\u0002\u0002\u077a\u077f\u0005\u00e6t\u0002\u077b",
    "\u077c\u0007\u00cd\u0002\u0002\u077c\u077e\u0005\u00e6t\u0002\u077d",
    "\u077b\u0003\u0002\u0002\u0002\u077e\u0781\u0003\u0002\u0002\u0002\u077f",
    "\u077d\u0003\u0002\u0002\u0002\u077f\u0780\u0003\u0002\u0002\u0002\u0780",
    "\u0783\u0003\u0002\u0002\u0002\u0781\u077f\u0003\u0002\u0002\u0002\u0782",
    "\u076f\u0003\u0002\u0002\u0002\u0782\u077a\u0003\u0002\u0002\u0002\u0783",
    "\u0784\u0003\u0002\u0002\u0002\u0784\u0785\u0007\u00c8\u0002\u0002\u0785",
    "\u0786\u0005\u00c0a\u0002\u0786\u00c7\u0003\u0002\u0002\u0002\u0787",
    "\u0788\u0005\u00d0i\u0002\u0788\u0789\u0007\u00d0\u0002\u0002\u0789",
    "\u078b\u0003\u0002\u0002\u0002\u078a\u0787\u0003\u0002\u0002\u0002\u078a",
    "\u078b\u0003\u0002\u0002\u0002\u078b\u078c\u0003\u0002\u0002\u0002\u078c",
    "\u078d\u0005\u00caf\u0002\u078d\u00c9\u0003\u0002\u0002\u0002\u078e",
    "\u0791\u0005\u00e6t\u0002\u078f\u0790\u0007\u00d0\u0002\u0002\u0790",
    "\u0792\u0005\u00e6t\u0002\u0791\u078f\u0003\u0002\u0002\u0002\u0791",
    "\u0792\u0003\u0002\u0002\u0002\u0792\u00cb\u0003\u0002\u0002\u0002\u0793",
    "\u0794\bg\u0001\u0002\u0794\u079b\u0005\u00d0i\u0002\u0795\u079b\u0005",
    "\u00ceh\u0002\u0796\u0797\u0007\u00d8\u0002\u0002\u0797\u0798\u0005",
    "j6\u0002\u0798\u0799\u0007\u00e2\u0002\u0002\u0799\u079b\u0003\u0002",
    "\u0002\u0002\u079a\u0793\u0003\u0002\u0002\u0002\u079a\u0795\u0003\u0002",
    "\u0002\u0002\u079a\u0796\u0003\u0002\u0002\u0002\u079b\u07a4\u0003\u0002",
    "\u0002\u0002\u079c\u07a0\f\u0003\u0002\u0002\u079d\u07a1\u0005\u00e4",
    "s\u0002\u079e\u079f\u0007\f\u0002\u0002\u079f\u07a1\u0005\u00e6t\u0002",
    "\u07a0\u079d\u0003\u0002\u0002\u0002\u07a0\u079e\u0003\u0002\u0002\u0002",
    "\u07a1\u07a3\u0003\u0002\u0002\u0002\u07a2\u079c\u0003\u0002\u0002\u0002",
    "\u07a3\u07a6\u0003\u0002\u0002\u0002\u07a4\u07a2\u0003\u0002\u0002\u0002",
    "\u07a4\u07a5\u0003\u0002\u0002\u0002\u07a5\u00cd\u0003\u0002\u0002\u0002",
    "\u07a6\u07a4\u0003\u0002\u0002\u0002\u07a7\u07a8\u0005\u00e6t\u0002",
    "\u07a8\u07aa\u0007\u00d8\u0002\u0002\u07a9\u07ab\u0005\u00d2j\u0002",
    "\u07aa\u07a9\u0003\u0002\u0002\u0002\u07aa\u07ab\u0003\u0002\u0002\u0002",
    "\u07ab\u07ac\u0003\u0002\u0002\u0002\u07ac\u07ad\u0007\u00e2\u0002\u0002",
    "\u07ad\u00cf\u0003\u0002\u0002\u0002\u07ae\u07af\u0005\u00d6l\u0002",
    "\u07af\u07b0\u0007\u00d0\u0002\u0002\u07b0\u07b2\u0003\u0002\u0002\u0002",
    "\u07b1\u07ae\u0003\u0002\u0002\u0002\u07b1\u07b2\u0003\u0002\u0002\u0002",
    "\u07b2\u07b3\u0003\u0002\u0002\u0002\u07b3\u07b4\u0005\u00e6t\u0002",
    "\u07b4\u00d1\u0003\u0002\u0002\u0002\u07b5\u07ba\u0005\u00d4k\u0002",
    "\u07b6\u07b7\u0007\u00cd\u0002\u0002\u07b7\u07b9\u0005\u00d4k\u0002",
    "\u07b8\u07b6\u0003\u0002\u0002\u0002\u07b9\u07bc\u0003\u0002\u0002\u0002",
    "\u07ba\u07b8\u0003\u0002\u0002\u0002\u07ba\u07bb\u0003\u0002\u0002\u0002",
    "\u07bb\u00d3\u0003\u0002\u0002\u0002\u07bc\u07ba\u0003\u0002\u0002\u0002",
    "\u07bd\u07c1\u0005\u00caf\u0002\u07be\u07c1\u0005\u00ceh\u0002\u07bf",
    "\u07c1\u0005\u00dco\u0002\u07c0\u07bd\u0003\u0002\u0002\u0002\u07c0",
    "\u07be\u0003\u0002\u0002\u0002\u07c0\u07bf\u0003\u0002\u0002\u0002\u07c1",
    "\u00d5\u0003\u0002\u0002\u0002\u07c2\u07c3\u0005\u00e6t\u0002\u07c3",
    "\u00d7\u0003\u0002\u0002\u0002\u07c4\u07cd\u0007\u00c3\u0002\u0002\u07c5",
    "\u07c6\u0007\u00d0\u0002\u0002\u07c6\u07cd\t\u0019\u0002\u0002\u07c7",
    "\u07c8\u0007\u00c5\u0002\u0002\u07c8\u07ca\u0007\u00d0\u0002\u0002\u07c9",
    "\u07cb\t\u0019\u0002\u0002\u07ca\u07c9\u0003\u0002\u0002\u0002\u07ca",
    "\u07cb\u0003\u0002\u0002\u0002\u07cb\u07cd\u0003\u0002\u0002\u0002\u07cc",
    "\u07c4\u0003\u0002\u0002\u0002\u07cc\u07c5\u0003\u0002\u0002\u0002\u07cc",
    "\u07c7\u0003\u0002\u0002\u0002\u07cd\u00d9\u0003\u0002\u0002\u0002\u07ce",
    "\u07d0\t\u001a\u0002\u0002\u07cf\u07ce\u0003\u0002\u0002\u0002\u07cf",
    "\u07d0\u0003\u0002\u0002\u0002\u07d0\u07d7\u0003\u0002\u0002\u0002\u07d1",
    "\u07d8\u0005\u00d8m\u0002\u07d2\u07d8\u0007\u00c4\u0002\u0002\u07d3",
    "\u07d8\u0007\u00c5\u0002\u0002\u07d4\u07d8\u0007\u00c6\u0002\u0002\u07d5",
    "\u07d8\u0007S\u0002\u0002\u07d6\u07d8\u0007r\u0002\u0002\u07d7\u07d1",
    "\u0003\u0002\u0002\u0002\u07d7\u07d2\u0003\u0002\u0002\u0002\u07d7\u07d3",
    "\u0003\u0002\u0002\u0002\u07d7\u07d4\u0003\u0002\u0002\u0002\u07d7\u07d5",
    "\u0003\u0002\u0002\u0002\u07d7\u07d6\u0003\u0002\u0002\u0002\u07d8\u00db",
    "\u0003\u0002\u0002\u0002\u07d9\u07dd\u0005\u00dan\u0002\u07da\u07dd",
    "\u0007\u00c7\u0002\u0002\u07db\u07dd\u0007u\u0002\u0002\u07dc\u07d9",
    "\u0003\u0002\u0002\u0002\u07dc\u07da\u0003\u0002\u0002\u0002\u07dc\u07db",
    "\u0003\u0002\u0002\u0002\u07dd\u00dd\u0003\u0002\u0002\u0002\u07de\u07df",
    "\t\u001b\u0002\u0002\u07df\u00df\u0003\u0002\u0002\u0002\u07e0\u07e1",
    "\t\u001c\u0002\u0002\u07e1\u00e1\u0003\u0002\u0002\u0002\u07e2\u07e3",
    "\t\u001d\u0002\u0002\u07e3\u00e3\u0003\u0002\u0002\u0002\u07e4\u07e7",
    "\u0007\u00c2\u0002\u0002\u07e5\u07e7\u0005\u00e2r\u0002\u07e6\u07e4",
    "\u0003\u0002\u0002\u0002\u07e6\u07e5\u0003\u0002\u0002\u0002\u07e7\u00e5",
    "\u0003\u0002\u0002\u0002\u07e8\u07ec\u0007\u00c2\u0002\u0002\u07e9\u07ec",
    "\u0005\u00dep\u0002\u07ea\u07ec\u0005\u00e0q\u0002\u07eb\u07e8\u0003",
    "\u0002\u0002\u0002\u07eb\u07e9\u0003\u0002\u0002\u0002\u07eb\u07ea\u0003",
    "\u0002\u0002\u0002\u07ec\u00e7\u0003\u0002\u0002\u0002\u07ed\u07f0\u0005",
    "\u00e6t\u0002\u07ee\u07f0\u0007u\u0002\u0002\u07ef\u07ed\u0003\u0002",
    "\u0002\u0002\u07ef\u07ee\u0003\u0002\u0002\u0002\u07f0\u00e9\u0003\u0002",
    "\u0002\u0002\u07f1\u07f2\u0007\u00c7\u0002\u0002\u07f2\u07f3\u0007\u00d2",
    "\u0002\u0002\u07f3\u07f4\u0005\u00dan\u0002\u07f4\u00eb\u0003\u0002",
    "\u0002\u0002\u0111\u00f0\u00f5\u00fe\u0102\u0105\u0108\u011c\u0122\u0129",
    "\u0131\u0136\u013d\u0142\u0149\u014e\u0154\u015a\u015f\u0165\u016a\u0170",
    "\u0175\u017b\u0189\u0190\u0197\u019e\u01a4\u01a9\u01af\u01b4\u01ba\u01c3",
    "\u01cd\u01d7\u01eb\u01f3\u0202\u0209\u0217\u021d\u0223\u022a\u022e\u0231",
    "\u0237\u023a\u0240\u0244\u0247\u0252\u0256\u0259\u025e\u0260\u0263\u0266",
    "\u0270\u0274\u0277\u027a\u027f\u0281\u0289\u028c\u028f\u0295\u0299\u029c",
    "\u029f\u02a2\u02a5\u02aa\u02b0\u02b4\u02b7\u02ba\u02be\u02c6\u02e0\u02e2",
    "\u02e6\u02fc\u02fe\u0309\u030c\u0315\u0326\u0331\u0343\u0350\u0361\u036a",
    "\u0385\u0387\u039c\u03a1\u03a6\u03a9\u03b5\u03ba\u03be\u03c1\u03c5\u03c9",
    "\u03ce\u03d1\u03d5\u03d7\u03ed\u03f5\u03f8\u0402\u0406\u040e\u0412\u0417",
    "\u041b\u041f\u0423\u0427\u0429\u0431\u0435\u0438\u0440\u0445\u044a\u044d",
    "\u0457\u0461\u0465\u046a\u046e\u0474\u0477\u047a\u047d\u048b\u048f\u0493",
    "\u0498\u049b\u04a5\u04ad\u04b0\u04b4\u04b7\u04bb\u04be\u04c1\u04c4\u04c7",
    "\u04ca\u04ce\u04d2\u04d5\u04d8\u04db\u04de\u04e1\u04ea\u04f0\u050b\u0521",
    "\u0529\u052c\u0532\u053a\u053d\u0543\u0545\u0549\u054e\u0551\u0554\u0558",
    "\u055c\u055f\u0561\u0564\u0568\u056c\u056f\u0571\u0573\u0576\u057b\u0586",
    "\u058c\u0591\u0598\u059d\u05a1\u05a5\u05aa\u05b1\u05b9\u05bc\u05bf\u05d2",
    "\u05e0\u05f0\u05f3\u05fc\u0600\u0605\u060a\u060d\u060f\u0625\u0628\u0633",
    "\u0637\u063a\u063e\u0642\u064a\u064e\u065b\u0667\u0673\u067b\u067f\u0686",
    "\u068c\u0694\u0699\u06a2\u06a6\u06c5\u06d6\u06e2\u06ec\u06ef\u06f3\u06f6",
    "\u0702\u0713\u0717\u0728\u072b\u072f\u0732\u073d\u0755\u075c\u075e\u0760",
    "\u0768\u076d\u0775\u077f\u0782\u078a\u0791\u079a\u07a0\u07a4\u07aa\u07b1",
    "\u07ba\u07c0\u07ca\u07cc\u07cf\u07d7\u07dc\u07e6\u07eb\u07ef"].join("");


const atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

const decisionsToDFA = atn.decisionToState.map( (ds, index) => new antlr4.dfa.DFA(ds, index) );

const sharedContextCache = new antlr4.PredictionContextCache();

export default class ClickHouseParser extends antlr4.Parser {

    static grammarFileName = "ClickHouseParser.g4";
    static literalNames = [ null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, null, null, 
                            null, null, null, null, null, null, "'false'", 
                            "'true'", null, null, null, null, null, null, 
                            "'->'", "'*'", "'`'", "'\\'", "':'", "','", 
                            "'||'", "'-'", "'.'", "'=='", "'='", "'>='", 
                            "'>'", "'{'", "'['", "'<='", "'('", "'<'", null, 
                            "'%'", "'+'", "'?'", "'\"'", "'''", "'}'", "']'", 
                            "')'", "';'", "'/'", "'_'" ];
    static symbolicNames = [ null, "ADD", "AFTER", "ALIAS", "ALL", "ALTER", 
                             "AND", "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", 
                             "ASOF", "AST", "ASYNC", "ATTACH", "BETWEEN", 
                             "BOTH", "BY", "CASE", "CAST", "CHECK", "CLEAR", 
                             "CLUSTER", "CODEC", "COLLATE", "COLUMN", "COMMENT", 
                             "CONSTRAINT", "CREATE", "CROSS", "CUBE", "CURRENT", 
                             "DATABASE", "DATABASES", "DATE", "DAY", "DEDUPLICATE", 
                             "DEFAULT", "DELAY", "DELETE", "DESC", "DESCENDING", 
                             "DESCRIBE", "DETACH", "DICTIONARIES", "DICTIONARY", 
                             "DISK", "DISTINCT", "DISTRIBUTED", "DROP", 
                             "ELSE", "END", "ENGINE", "EVENTS", "EXISTS", 
                             "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", 
                             "FINAL", "FIRST", "FLUSH", "FOLLOWING", "FOR", 
                             "FORMAT", "FREEZE", "FROM", "FULL", "FUNCTION", 
                             "GLOBAL", "GRANULARITY", "GROUP", "HAVING", 
                             "HIERARCHICAL", "HOUR", "ID", "IF", "ILIKE", 
                             "IN", "INDEX", "INF", "INJECTIVE", "INNER", 
                             "INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", 
                             "JOIN", "KEY", "KILL", "LAST", "LAYOUT", "LEADING", 
                             "LEFT", "LIFETIME", "LIKE", "LIMIT", "LIVE", 
                             "LOCAL", "LOGS", "MATERIALIZE", "MATERIALIZED", 
                             "MAX", "MERGES", "MIN", "MINUTE", "MODIFY", 
                             "MONTH", "MOVE", "MUTATION", "NAN_SQL", "NO", 
                             "NOT", "NULL_SQL", "NULLS", "OFFSET", "ON", 
                             "OPTIMIZE", "OR", "ORDER", "OUTER", "OUTFILE", 
                             "OVER", "PARTITION", "POPULATE", "PRECEDING", 
                             "PREWHERE", "PRIMARY", "PROJECTION", "QUARTER", 
                             "RANGE", "RELOAD", "REMOVE", "RENAME", "REPLACE", 
                             "REPLICA", "REPLICATED", "RIGHT", "ROLLUP", 
                             "ROW", "ROWS", "SAMPLE", "SECOND", "SELECT", 
                             "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", 
                             "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", 
                             "SYNTAX", "SYSTEM", "TABLE", "TABLES", "TEMPORARY", 
                             "TEST", "THEN", "TIES", "TIMEOUT", "TIMESTAMP", 
                             "TO", "TOP", "TOTALS", "TRAILING", "TRIM", 
                             "TRUNCATE", "TTL", "TYPE", "UNBOUNDED", "UNION", 
                             "UPDATE", "USE", "USING", "UUID", "VALUES", 
                             "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", 
                             "WHERE", "WINDOW", "WITH", "YEAR", "JSON_FALSE", 
                             "JSON_TRUE", "IDENTIFIER", "FLOATING_LITERAL", 
                             "OCTAL_LITERAL", "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", 
                             "STRING_LITERAL", "ARROW", "ASTERISK", "BACKQUOTE", 
                             "BACKSLASH", "COLON", "COMMA", "CONCAT", "DASH", 
                             "DOT", "EQ_DOUBLE", "EQ_SINGLE", "GE", "GT", 
                             "LBRACE", "LBRACKET", "LE", "LPAREN", "LT", 
                             "NOT_EQ", "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", 
                             "QUOTE_SINGLE", "RBRACE", "RBRACKET", "RPAREN", 
                             "SEMICOLON", "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", 
                             "SINGLE_LINE_COMMENT", "WHITESPACE" ];
    static ruleNames = [ "sql", "queryStmt", "query", "alterStmt", "alterTableClause", 
                         "assignmentExprList", "assignmentExpr", "tableColumnPropertyType", 
                         "partitionClause", "attachStmt", "checkStmt", "createStmt", 
                         "dictionarySchemaClause", "dictionaryAttrDfnt", 
                         "dictionaryEngineClause", "dictionaryPrimaryKeyClause", 
                         "dictionaryArgExpr", "sourceClause", "lifetimeClause", 
                         "layoutClause", "rangeClause", "dictionarySettingsClause", 
                         "clusterClause", "uuidClause", "destinationClause", 
                         "subqueryClause", "tableSchemaClause", "engineClause", 
                         "partitionByClause", "primaryKeyClause", "sampleByClause", 
                         "ttlClause", "engineExpr", "tableElementExpr", 
                         "tableColumnDfnt", "tableColumnPropertyExpr", "tableIndexDfnt", 
                         "tableProjectionDfnt", "codecExpr", "codecArgExpr", 
                         "ttlExpr", "describeStmt", "dropStmt", "existsStmt", 
                         "explainStmt", "insertStmt", "columnsClause", "dataClause", 
                         "killStmt", "optimizeStmt", "renameStmt", "projectionSelectStmt", 
                         "selectUnionStmt", "selectStmtWithParens", "selectStmt", 
                         "withClause", "topClause", "fromClause", "arrayJoinClause", 
                         "windowClause", "prewhereClause", "whereClause", 
                         "groupByClause", "havingClause", "orderByClause", 
                         "projectionOrderByClause", "limitByClause", "limitClause", 
                         "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
                         "joinConstraintClause", "sampleClause", "limitExpr", 
                         "orderExprList", "orderExpr", "ratioExpr", "settingExprList", 
                         "settingExpr", "windowExpr", "winPartitionByClause", 
                         "winOrderByClause", "winFrameClause", "winFrameExtend", 
                         "winFrameBound", "setStmt", "showStmt", "systemStmt", 
                         "truncateStmt", "useStmt", "watchStmt", "columnTypeExpr", 
                         "columnExprList", "columnsExpr", "columnExpr", 
                         "columnArgList", "columnArgExpr", "columnLambdaExpr", 
                         "columnIdentifier", "nestedIdentifier", "tableExpr", 
                         "tableFunctionExpr", "tableIdentifier", "tableArgList", 
                         "tableArgExpr", "databaseIdentifier", "floatingLiteral", 
                         "numberLiteral", "literal", "interval", "keyword", 
                         "keywordForAlias", "alias", "identifier", "identifierOrNull", 
                         "enumValue" ];

    constructor(input) {
        super(input);
        this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
        this.ruleNames = ClickHouseParser.ruleNames;
        this.literalNames = ClickHouseParser.literalNames;
        this.symbolicNames = ClickHouseParser.symbolicNames;
    }

    get atn() {
        return atn;
    }

    sempred(localctx, ruleIndex, predIndex) {
    	switch(ruleIndex) {
    	case 13:
    	    		return this.dictionaryAttrDfnt_sempred(localctx, predIndex);
    	case 14:
    	    		return this.dictionaryEngineClause_sempred(localctx, predIndex);
    	case 27:
    	    		return this.engineClause_sempred(localctx, predIndex);
    	case 69:
    	    		return this.joinExpr_sempred(localctx, predIndex);
    	case 95:
    	    		return this.columnExpr_sempred(localctx, predIndex);
    	case 101:
    	    		return this.tableExpr_sempred(localctx, predIndex);
        default:
            throw "No predicate with index:" + ruleIndex;
       }
    }

    dictionaryAttrDfnt_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 0:
    			return !localctx.attrs.count("default");
    		case 1:
    			return !localctx.attrs.count("expression");
    		case 2:
    			return !localctx.attrs.count("hierarchical");
    		case 3:
    			return !localctx.attrs.count("injective");
    		case 4:
    			return !localctx.attrs.count("is_object_id");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    dictionaryEngineClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 5:
    			return !localctx.clauses.count("source");
    		case 6:
    			return !localctx.clauses.count("lifetime");
    		case 7:
    			return !localctx.clauses.count("layout");
    		case 8:
    			return !localctx.clauses.count("range");
    		case 9:
    			return !localctx.clauses.count("settings");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    engineClause_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 10:
    			return !localctx.clauses.count("orderByClause");
    		case 11:
    			return !localctx.clauses.count("partitionByClause");
    		case 12:
    			return !localctx.clauses.count("primaryKeyClause");
    		case 13:
    			return !localctx.clauses.count("sampleByClause");
    		case 14:
    			return !localctx.clauses.count("ttlClause");
    		case 15:
    			return !localctx.clauses.count("settingsClause");
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    joinExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 16:
    			return this.precpred(this._ctx, 3);
    		case 17:
    			return this.precpred(this._ctx, 4);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    columnExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 18:
    			return this.precpred(this._ctx, 16);
    		case 19:
    			return this.precpred(this._ctx, 15);
    		case 20:
    			return this.precpred(this._ctx, 14);
    		case 21:
    			return this.precpred(this._ctx, 11);
    		case 22:
    			return this.precpred(this._ctx, 10);
    		case 23:
    			return this.precpred(this._ctx, 9);
    		case 24:
    			return this.precpred(this._ctx, 8);
    		case 25:
    			return this.precpred(this._ctx, 19);
    		case 26:
    			return this.precpred(this._ctx, 18);
    		case 27:
    			return this.precpred(this._ctx, 13);
    		case 28:
    			return this.precpred(this._ctx, 7);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };

    tableExpr_sempred(localctx, predIndex) {
    	switch(predIndex) {
    		case 29:
    			return this.precpred(this._ctx, 1);
    		default:
    			throw "No predicate with index:" + predIndex;
    	}
    };




	sql() {
	    let localctx = new SqlContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 0, ClickHouseParser.RULE_sql);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 243;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CREATE))) !== 0) || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (ClickHouseParser.DESC - 41)) | (1 << (ClickHouseParser.DESCRIBE - 41)) | (1 << (ClickHouseParser.DETACH - 41)) | (1 << (ClickHouseParser.DROP - 41)) | (1 << (ClickHouseParser.EXISTS - 41)) | (1 << (ClickHouseParser.EXPLAIN - 41)))) !== 0) || _la===ClickHouseParser.INSERT || _la===ClickHouseParser.KILL || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (ClickHouseParser.OPTIMIZE - 119)) | (1 << (ClickHouseParser.RENAME - 119)) | (1 << (ClickHouseParser.REPLACE - 119)) | (1 << (ClickHouseParser.SELECT - 119)) | (1 << (ClickHouseParser.SET - 119)) | (1 << (ClickHouseParser.SHOW - 119)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (ClickHouseParser.SYSTEM - 157)) | (1 << (ClickHouseParser.TRUNCATE - 157)) | (1 << (ClickHouseParser.USE - 157)) | (1 << (ClickHouseParser.WATCH - 157)) | (1 << (ClickHouseParser.WITH - 157)))) !== 0) || _la===ClickHouseParser.LPAREN) {
	            this.state = 234;
	            this.queryStmt();
	            this.state = 238;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ClickHouseParser.SEMICOLON) {
	                this.state = 235;
	                this.match(ClickHouseParser.SEMICOLON);
	                this.state = 240;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 245;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 246;
	        this.match(ClickHouseParser.EOF);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	queryStmt() {
	    let localctx = new QueryStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 2, ClickHouseParser.RULE_queryStmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 262;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.ALTER:
	        case ClickHouseParser.ATTACH:
	        case ClickHouseParser.CHECK:
	        case ClickHouseParser.CREATE:
	        case ClickHouseParser.DESC:
	        case ClickHouseParser.DESCRIBE:
	        case ClickHouseParser.DETACH:
	        case ClickHouseParser.DROP:
	        case ClickHouseParser.EXISTS:
	        case ClickHouseParser.EXPLAIN:
	        case ClickHouseParser.KILL:
	        case ClickHouseParser.OPTIMIZE:
	        case ClickHouseParser.RENAME:
	        case ClickHouseParser.REPLACE:
	        case ClickHouseParser.SELECT:
	        case ClickHouseParser.SET:
	        case ClickHouseParser.SHOW:
	        case ClickHouseParser.SYSTEM:
	        case ClickHouseParser.TRUNCATE:
	        case ClickHouseParser.USE:
	        case ClickHouseParser.WATCH:
	        case ClickHouseParser.WITH:
	        case ClickHouseParser.LPAREN:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 248;
	            this.query();
	            this.state = 252;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.INTO) {
	                this.state = 249;
	                this.match(ClickHouseParser.INTO);
	                this.state = 250;
	                this.match(ClickHouseParser.OUTFILE);
	                this.state = 251;
	                this.match(ClickHouseParser.STRING_LITERAL);
	            }

	            this.state = 256;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.FORMAT) {
	                this.state = 254;
	                this.match(ClickHouseParser.FORMAT);
	                this.state = 255;
	                this.identifierOrNull();
	            }

	            this.state = 259;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
	            if(la_===1) {
	                this.state = 258;
	                this.match(ClickHouseParser.SEMICOLON);

	            }
	            break;
	        case ClickHouseParser.INSERT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 261;
	            this.insertStmt();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	query() {
	    let localctx = new QueryContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 4, ClickHouseParser.RULE_query);
	    try {
	        this.state = 282;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 264;
	            this.alterStmt();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 265;
	            this.attachStmt();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 266;
	            this.checkStmt();
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 267;
	            this.createStmt();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 268;
	            this.describeStmt();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 269;
	            this.dropStmt();
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 270;
	            this.existsStmt();
	            break;

	        case 8:
	            this.enterOuterAlt(localctx, 8);
	            this.state = 271;
	            this.explainStmt();
	            break;

	        case 9:
	            this.enterOuterAlt(localctx, 9);
	            this.state = 272;
	            this.killStmt();
	            break;

	        case 10:
	            this.enterOuterAlt(localctx, 10);
	            this.state = 273;
	            this.optimizeStmt();
	            break;

	        case 11:
	            this.enterOuterAlt(localctx, 11);
	            this.state = 274;
	            this.renameStmt();
	            break;

	        case 12:
	            this.enterOuterAlt(localctx, 12);
	            this.state = 275;
	            this.selectUnionStmt();
	            break;

	        case 13:
	            this.enterOuterAlt(localctx, 13);
	            this.state = 276;
	            this.setStmt();
	            break;

	        case 14:
	            this.enterOuterAlt(localctx, 14);
	            this.state = 277;
	            this.showStmt();
	            break;

	        case 15:
	            this.enterOuterAlt(localctx, 15);
	            this.state = 278;
	            this.systemStmt();
	            break;

	        case 16:
	            this.enterOuterAlt(localctx, 16);
	            this.state = 279;
	            this.truncateStmt();
	            break;

	        case 17:
	            this.enterOuterAlt(localctx, 17);
	            this.state = 280;
	            this.useStmt();
	            break;

	        case 18:
	            this.enterOuterAlt(localctx, 18);
	            this.state = 281;
	            this.watchStmt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterStmt() {
	    let localctx = new AlterStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 6, ClickHouseParser.RULE_alterStmt);
	    var _la = 0; // Token type
	    try {
	        localctx = new AlterTableStmtContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 284;
	        this.match(ClickHouseParser.ALTER);
	        this.state = 285;
	        this.match(ClickHouseParser.TABLE);
	        this.state = 286;
	        this.tableIdentifier();
	        this.state = 288;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ON) {
	            this.state = 287;
	            this.clusterClause();
	        }

	        this.state = 290;
	        this.alterTableClause();
	        this.state = 295;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ClickHouseParser.COMMA) {
	            this.state = 291;
	            this.match(ClickHouseParser.COMMA);
	            this.state = 292;
	            this.alterTableClause();
	            this.state = 297;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alterTableClause() {
	    let localctx = new AlterTableClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 8, ClickHouseParser.RULE_alterTableClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 512;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new AlterTableClauseAddColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 298;
	            this.match(ClickHouseParser.ADD);
	            this.state = 299;
	            this.match(ClickHouseParser.COLUMN);
	            this.state = 303;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
	            if(la_===1) {
	                this.state = 300;
	                this.match(ClickHouseParser.IF);
	                this.state = 301;
	                this.match(ClickHouseParser.NOT);
	                this.state = 302;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 305;
	            this.tableColumnDfnt();
	            this.state = 308;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.AFTER) {
	                this.state = 306;
	                this.match(ClickHouseParser.AFTER);
	                this.state = 307;
	                this.nestedIdentifier();
	            }

	            break;

	        case 2:
	            localctx = new AlterTableClauseAddIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 310;
	            this.match(ClickHouseParser.ADD);
	            this.state = 311;
	            this.match(ClickHouseParser.INDEX);
	            this.state = 315;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
	            if(la_===1) {
	                this.state = 312;
	                this.match(ClickHouseParser.IF);
	                this.state = 313;
	                this.match(ClickHouseParser.NOT);
	                this.state = 314;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 317;
	            this.tableIndexDfnt();
	            this.state = 320;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.AFTER) {
	                this.state = 318;
	                this.match(ClickHouseParser.AFTER);
	                this.state = 319;
	                this.nestedIdentifier();
	            }

	            break;

	        case 3:
	            localctx = new AlterTableClauseAddProjectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 322;
	            this.match(ClickHouseParser.ADD);
	            this.state = 323;
	            this.match(ClickHouseParser.PROJECTION);
	            this.state = 327;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
	            if(la_===1) {
	                this.state = 324;
	                this.match(ClickHouseParser.IF);
	                this.state = 325;
	                this.match(ClickHouseParser.NOT);
	                this.state = 326;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 329;
	            this.tableProjectionDfnt();
	            this.state = 332;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.AFTER) {
	                this.state = 330;
	                this.match(ClickHouseParser.AFTER);
	                this.state = 331;
	                this.nestedIdentifier();
	            }

	            break;

	        case 4:
	            localctx = new AlterTableClauseAttachContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 334;
	            this.match(ClickHouseParser.ATTACH);
	            this.state = 335;
	            this.partitionClause();
	            this.state = 338;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.FROM) {
	                this.state = 336;
	                this.match(ClickHouseParser.FROM);
	                this.state = 337;
	                this.tableIdentifier();
	            }

	            break;

	        case 5:
	            localctx = new AlterTableClauseClearColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 340;
	            this.match(ClickHouseParser.CLEAR);
	            this.state = 341;
	            this.match(ClickHouseParser.COLUMN);
	            this.state = 344;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
	            if(la_===1) {
	                this.state = 342;
	                this.match(ClickHouseParser.IF);
	                this.state = 343;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 346;
	            this.nestedIdentifier();
	            this.state = 349;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.IN) {
	                this.state = 347;
	                this.match(ClickHouseParser.IN);
	                this.state = 348;
	                this.partitionClause();
	            }

	            break;

	        case 6:
	            localctx = new AlterTableClauseClearIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 351;
	            this.match(ClickHouseParser.CLEAR);
	            this.state = 352;
	            this.match(ClickHouseParser.INDEX);
	            this.state = 355;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
	            if(la_===1) {
	                this.state = 353;
	                this.match(ClickHouseParser.IF);
	                this.state = 354;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 357;
	            this.nestedIdentifier();
	            this.state = 360;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.IN) {
	                this.state = 358;
	                this.match(ClickHouseParser.IN);
	                this.state = 359;
	                this.partitionClause();
	            }

	            break;

	        case 7:
	            localctx = new AlterTableClauseClearProjectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 7);
	            this.state = 362;
	            this.match(ClickHouseParser.CLEAR);
	            this.state = 363;
	            this.match(ClickHouseParser.PROJECTION);
	            this.state = 366;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
	            if(la_===1) {
	                this.state = 364;
	                this.match(ClickHouseParser.IF);
	                this.state = 365;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 368;
	            this.nestedIdentifier();
	            this.state = 371;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.IN) {
	                this.state = 369;
	                this.match(ClickHouseParser.IN);
	                this.state = 370;
	                this.partitionClause();
	            }

	            break;

	        case 8:
	            localctx = new AlterTableClauseCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 8);
	            this.state = 373;
	            this.match(ClickHouseParser.COMMENT);
	            this.state = 374;
	            this.match(ClickHouseParser.COLUMN);
	            this.state = 377;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
	            if(la_===1) {
	                this.state = 375;
	                this.match(ClickHouseParser.IF);
	                this.state = 376;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 379;
	            this.nestedIdentifier();
	            this.state = 380;
	            this.match(ClickHouseParser.STRING_LITERAL);
	            break;

	        case 9:
	            localctx = new AlterTableClauseDeleteContext(this, localctx);
	            this.enterOuterAlt(localctx, 9);
	            this.state = 382;
	            this.match(ClickHouseParser.DELETE);
	            this.state = 383;
	            this.match(ClickHouseParser.WHERE);
	            this.state = 384;
	            this.columnExpr(0);
	            break;

	        case 10:
	            localctx = new AlterTableClauseDetachContext(this, localctx);
	            this.enterOuterAlt(localctx, 10);
	            this.state = 385;
	            this.match(ClickHouseParser.DETACH);
	            this.state = 386;
	            this.partitionClause();
	            break;

	        case 11:
	            localctx = new AlterTableClauseDropColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 11);
	            this.state = 387;
	            this.match(ClickHouseParser.DROP);
	            this.state = 388;
	            this.match(ClickHouseParser.COLUMN);
	            this.state = 391;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
	            if(la_===1) {
	                this.state = 389;
	                this.match(ClickHouseParser.IF);
	                this.state = 390;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 393;
	            this.nestedIdentifier();
	            break;

	        case 12:
	            localctx = new AlterTableClauseDropIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 12);
	            this.state = 394;
	            this.match(ClickHouseParser.DROP);
	            this.state = 395;
	            this.match(ClickHouseParser.INDEX);
	            this.state = 398;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
	            if(la_===1) {
	                this.state = 396;
	                this.match(ClickHouseParser.IF);
	                this.state = 397;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 400;
	            this.nestedIdentifier();
	            break;

	        case 13:
	            localctx = new AlterTableClauseDropProjectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 13);
	            this.state = 401;
	            this.match(ClickHouseParser.DROP);
	            this.state = 402;
	            this.match(ClickHouseParser.PROJECTION);
	            this.state = 405;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
	            if(la_===1) {
	                this.state = 403;
	                this.match(ClickHouseParser.IF);
	                this.state = 404;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 407;
	            this.nestedIdentifier();
	            break;

	        case 14:
	            localctx = new AlterTableClauseDropPartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 14);
	            this.state = 408;
	            this.match(ClickHouseParser.DROP);
	            this.state = 409;
	            this.partitionClause();
	            break;

	        case 15:
	            localctx = new AlterTableClauseFreezePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 15);
	            this.state = 410;
	            this.match(ClickHouseParser.FREEZE);
	            this.state = 412;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.PARTITION) {
	                this.state = 411;
	                this.partitionClause();
	            }

	            break;

	        case 16:
	            localctx = new AlterTableClauseMaterializeIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 16);
	            this.state = 414;
	            this.match(ClickHouseParser.MATERIALIZE);
	            this.state = 415;
	            this.match(ClickHouseParser.INDEX);
	            this.state = 418;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
	            if(la_===1) {
	                this.state = 416;
	                this.match(ClickHouseParser.IF);
	                this.state = 417;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 420;
	            this.nestedIdentifier();
	            this.state = 423;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.IN) {
	                this.state = 421;
	                this.match(ClickHouseParser.IN);
	                this.state = 422;
	                this.partitionClause();
	            }

	            break;

	        case 17:
	            localctx = new AlterTableClauseMaterializeProjectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 17);
	            this.state = 425;
	            this.match(ClickHouseParser.MATERIALIZE);
	            this.state = 426;
	            this.match(ClickHouseParser.PROJECTION);
	            this.state = 429;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
	            if(la_===1) {
	                this.state = 427;
	                this.match(ClickHouseParser.IF);
	                this.state = 428;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 431;
	            this.nestedIdentifier();
	            this.state = 434;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.IN) {
	                this.state = 432;
	                this.match(ClickHouseParser.IN);
	                this.state = 433;
	                this.partitionClause();
	            }

	            break;

	        case 18:
	            localctx = new AlterTableClauseModifyCodecContext(this, localctx);
	            this.enterOuterAlt(localctx, 18);
	            this.state = 436;
	            this.match(ClickHouseParser.MODIFY);
	            this.state = 437;
	            this.match(ClickHouseParser.COLUMN);
	            this.state = 440;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
	            if(la_===1) {
	                this.state = 438;
	                this.match(ClickHouseParser.IF);
	                this.state = 439;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 442;
	            this.nestedIdentifier();
	            this.state = 443;
	            this.codecExpr();
	            break;

	        case 19:
	            localctx = new AlterTableClauseModifyCommentContext(this, localctx);
	            this.enterOuterAlt(localctx, 19);
	            this.state = 445;
	            this.match(ClickHouseParser.MODIFY);
	            this.state = 446;
	            this.match(ClickHouseParser.COLUMN);
	            this.state = 449;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
	            if(la_===1) {
	                this.state = 447;
	                this.match(ClickHouseParser.IF);
	                this.state = 448;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 451;
	            this.nestedIdentifier();
	            this.state = 452;
	            this.match(ClickHouseParser.COMMENT);
	            this.state = 453;
	            this.match(ClickHouseParser.STRING_LITERAL);
	            break;

	        case 20:
	            localctx = new AlterTableClauseModifyRemoveContext(this, localctx);
	            this.enterOuterAlt(localctx, 20);
	            this.state = 455;
	            this.match(ClickHouseParser.MODIFY);
	            this.state = 456;
	            this.match(ClickHouseParser.COLUMN);
	            this.state = 459;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
	            if(la_===1) {
	                this.state = 457;
	                this.match(ClickHouseParser.IF);
	                this.state = 458;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 461;
	            this.nestedIdentifier();
	            this.state = 462;
	            this.match(ClickHouseParser.REMOVE);
	            this.state = 463;
	            this.tableColumnPropertyType();
	            break;

	        case 21:
	            localctx = new AlterTableClauseModifyContext(this, localctx);
	            this.enterOuterAlt(localctx, 21);
	            this.state = 465;
	            this.match(ClickHouseParser.MODIFY);
	            this.state = 466;
	            this.match(ClickHouseParser.COLUMN);
	            this.state = 469;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
	            if(la_===1) {
	                this.state = 467;
	                this.match(ClickHouseParser.IF);
	                this.state = 468;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 471;
	            this.tableColumnDfnt();
	            break;

	        case 22:
	            localctx = new AlterTableClauseModifyOrderByContext(this, localctx);
	            this.enterOuterAlt(localctx, 22);
	            this.state = 472;
	            this.match(ClickHouseParser.MODIFY);
	            this.state = 473;
	            this.match(ClickHouseParser.ORDER);
	            this.state = 474;
	            this.match(ClickHouseParser.BY);
	            this.state = 475;
	            this.columnExpr(0);
	            break;

	        case 23:
	            localctx = new AlterTableClauseModifyTTLContext(this, localctx);
	            this.enterOuterAlt(localctx, 23);
	            this.state = 476;
	            this.match(ClickHouseParser.MODIFY);
	            this.state = 477;
	            this.ttlClause();
	            break;

	        case 24:
	            localctx = new AlterTableClauseMovePartitionContext(this, localctx);
	            this.enterOuterAlt(localctx, 24);
	            this.state = 478;
	            this.match(ClickHouseParser.MOVE);
	            this.state = 479;
	            this.partitionClause();
	            this.state = 489;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 480;
	                this.match(ClickHouseParser.TO);
	                this.state = 481;
	                this.match(ClickHouseParser.DISK);
	                this.state = 482;
	                this.match(ClickHouseParser.STRING_LITERAL);
	                break;

	            case 2:
	                this.state = 483;
	                this.match(ClickHouseParser.TO);
	                this.state = 484;
	                this.match(ClickHouseParser.VOLUME);
	                this.state = 485;
	                this.match(ClickHouseParser.STRING_LITERAL);
	                break;

	            case 3:
	                this.state = 486;
	                this.match(ClickHouseParser.TO);
	                this.state = 487;
	                this.match(ClickHouseParser.TABLE);
	                this.state = 488;
	                this.tableIdentifier();
	                break;

	            }
	            break;

	        case 25:
	            localctx = new AlterTableClauseRemoveTTLContext(this, localctx);
	            this.enterOuterAlt(localctx, 25);
	            this.state = 491;
	            this.match(ClickHouseParser.REMOVE);
	            this.state = 492;
	            this.match(ClickHouseParser.TTL);
	            break;

	        case 26:
	            localctx = new AlterTableClauseRenameContext(this, localctx);
	            this.enterOuterAlt(localctx, 26);
	            this.state = 493;
	            this.match(ClickHouseParser.RENAME);
	            this.state = 494;
	            this.match(ClickHouseParser.COLUMN);
	            this.state = 497;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
	            if(la_===1) {
	                this.state = 495;
	                this.match(ClickHouseParser.IF);
	                this.state = 496;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 499;
	            this.nestedIdentifier();
	            this.state = 500;
	            this.match(ClickHouseParser.TO);
	            this.state = 501;
	            this.nestedIdentifier();
	            break;

	        case 27:
	            localctx = new AlterTableClauseReplaceContext(this, localctx);
	            this.enterOuterAlt(localctx, 27);
	            this.state = 503;
	            this.match(ClickHouseParser.REPLACE);
	            this.state = 504;
	            this.partitionClause();
	            this.state = 505;
	            this.match(ClickHouseParser.FROM);
	            this.state = 506;
	            this.tableIdentifier();
	            break;

	        case 28:
	            localctx = new AlterTableClauseUpdateContext(this, localctx);
	            this.enterOuterAlt(localctx, 28);
	            this.state = 508;
	            this.match(ClickHouseParser.UPDATE);
	            this.state = 509;
	            this.assignmentExprList();
	            this.state = 510;
	            this.whereClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExprList() {
	    let localctx = new AssignmentExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 10, ClickHouseParser.RULE_assignmentExprList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 514;
	        this.assignmentExpr();
	        this.state = 519;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ClickHouseParser.COMMA) {
	            this.state = 515;
	            this.match(ClickHouseParser.COMMA);
	            this.state = 516;
	            this.assignmentExpr();
	            this.state = 521;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	assignmentExpr() {
	    let localctx = new AssignmentExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 12, ClickHouseParser.RULE_assignmentExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 522;
	        this.nestedIdentifier();
	        this.state = 523;
	        this.match(ClickHouseParser.EQ_SINGLE);
	        this.state = 524;
	        this.columnExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableColumnPropertyType() {
	    let localctx = new TableColumnPropertyTypeContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 14, ClickHouseParser.RULE_tableColumnPropertyType);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 526;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COMMENT))) !== 0) || _la===ClickHouseParser.DEFAULT || _la===ClickHouseParser.MATERIALIZED || _la===ClickHouseParser.TTL)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionClause() {
	    let localctx = new PartitionClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 16, ClickHouseParser.RULE_partitionClause);
	    try {
	        this.state = 533;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 528;
	            this.match(ClickHouseParser.PARTITION);
	            this.state = 529;
	            this.columnExpr(0);
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 530;
	            this.match(ClickHouseParser.PARTITION);
	            this.state = 531;
	            this.match(ClickHouseParser.ID);
	            this.state = 532;
	            this.match(ClickHouseParser.STRING_LITERAL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	attachStmt() {
	    let localctx = new AttachStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 18, ClickHouseParser.RULE_attachStmt);
	    var _la = 0; // Token type
	    try {
	        localctx = new AttachDictionaryStmtContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 535;
	        this.match(ClickHouseParser.ATTACH);
	        this.state = 536;
	        this.match(ClickHouseParser.DICTIONARY);
	        this.state = 537;
	        this.tableIdentifier();
	        this.state = 539;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ON) {
	            this.state = 538;
	            this.clusterClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	checkStmt() {
	    let localctx = new CheckStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 20, ClickHouseParser.RULE_checkStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 541;
	        this.match(ClickHouseParser.CHECK);
	        this.state = 542;
	        this.match(ClickHouseParser.TABLE);
	        this.state = 543;
	        this.tableIdentifier();
	        this.state = 545;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.PARTITION) {
	            this.state = 544;
	            this.partitionClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	createStmt() {
	    let localctx = new CreateStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 22, ClickHouseParser.RULE_createStmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 700;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new CreateDatabaseStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 547;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.ATTACH || _la===ClickHouseParser.CREATE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 548;
	            this.match(ClickHouseParser.DATABASE);
	            this.state = 552;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
	            if(la_===1) {
	                this.state = 549;
	                this.match(ClickHouseParser.IF);
	                this.state = 550;
	                this.match(ClickHouseParser.NOT);
	                this.state = 551;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 554;
	            this.databaseIdentifier();
	            this.state = 556;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ON) {
	                this.state = 555;
	                this.clusterClause();
	            }

	            this.state = 559;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ENGINE) {
	                this.state = 558;
	                this.engineExpr();
	            }

	            break;

	        case 2:
	            localctx = new CreateDictionaryStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 568;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ClickHouseParser.ATTACH:
	                this.state = 561;
	                this.match(ClickHouseParser.ATTACH);
	                break;
	            case ClickHouseParser.CREATE:
	                this.state = 562;
	                this.match(ClickHouseParser.CREATE);
	                this.state = 565;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.OR) {
	                    this.state = 563;
	                    this.match(ClickHouseParser.OR);
	                    this.state = 564;
	                    this.match(ClickHouseParser.REPLACE);
	                }

	                break;
	            case ClickHouseParser.REPLACE:
	                this.state = 567;
	                this.match(ClickHouseParser.REPLACE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 570;
	            this.match(ClickHouseParser.DICTIONARY);
	            this.state = 574;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
	            if(la_===1) {
	                this.state = 571;
	                this.match(ClickHouseParser.IF);
	                this.state = 572;
	                this.match(ClickHouseParser.NOT);
	                this.state = 573;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 576;
	            this.tableIdentifier();
	            this.state = 578;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.UUID) {
	                this.state = 577;
	                this.uuidClause();
	            }

	            this.state = 581;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ON) {
	                this.state = 580;
	                this.clusterClause();
	            }

	            this.state = 583;
	            this.dictionarySchemaClause();
	            this.state = 584;
	            this.dictionaryEngineClause();
	            break;

	        case 3:
	            localctx = new CreateLiveViewStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 586;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.ATTACH || _la===ClickHouseParser.CREATE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 587;
	            this.match(ClickHouseParser.LIVE);
	            this.state = 588;
	            this.match(ClickHouseParser.VIEW);
	            this.state = 592;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
	            if(la_===1) {
	                this.state = 589;
	                this.match(ClickHouseParser.IF);
	                this.state = 590;
	                this.match(ClickHouseParser.NOT);
	                this.state = 591;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 594;
	            this.tableIdentifier();
	            this.state = 596;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.UUID) {
	                this.state = 595;
	                this.uuidClause();
	            }

	            this.state = 599;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ON) {
	                this.state = 598;
	                this.clusterClause();
	            }

	            this.state = 606;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.WITH) {
	                this.state = 601;
	                this.match(ClickHouseParser.WITH);
	                this.state = 602;
	                this.match(ClickHouseParser.TIMEOUT);
	                this.state = 604;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.DECIMAL_LITERAL) {
	                    this.state = 603;
	                    this.match(ClickHouseParser.DECIMAL_LITERAL);
	                }

	            }

	            this.state = 609;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.TO) {
	                this.state = 608;
	                this.destinationClause();
	            }

	            this.state = 612;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
	            if(la_===1) {
	                this.state = 611;
	                this.tableSchemaClause();

	            }
	            this.state = 614;
	            this.subqueryClause();
	            break;

	        case 4:
	            localctx = new CreateMaterializedViewStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 616;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.ATTACH || _la===ClickHouseParser.CREATE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 617;
	            this.match(ClickHouseParser.MATERIALIZED);
	            this.state = 618;
	            this.match(ClickHouseParser.VIEW);
	            this.state = 622;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
	            if(la_===1) {
	                this.state = 619;
	                this.match(ClickHouseParser.IF);
	                this.state = 620;
	                this.match(ClickHouseParser.NOT);
	                this.state = 621;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 624;
	            this.tableIdentifier();
	            this.state = 626;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.UUID) {
	                this.state = 625;
	                this.uuidClause();
	            }

	            this.state = 629;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ON) {
	                this.state = 628;
	                this.clusterClause();
	            }

	            this.state = 632;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.AS || _la===ClickHouseParser.LPAREN) {
	                this.state = 631;
	                this.tableSchemaClause();
	            }

	            this.state = 639;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ClickHouseParser.TO:
	                this.state = 634;
	                this.destinationClause();
	                break;
	            case ClickHouseParser.ENGINE:
	                this.state = 635;
	                this.engineClause();
	                this.state = 637;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.POPULATE) {
	                    this.state = 636;
	                    this.match(ClickHouseParser.POPULATE);
	                }

	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 641;
	            this.subqueryClause();
	            break;

	        case 5:
	            localctx = new CreateTableStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 650;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ClickHouseParser.ATTACH:
	                this.state = 643;
	                this.match(ClickHouseParser.ATTACH);
	                break;
	            case ClickHouseParser.CREATE:
	                this.state = 644;
	                this.match(ClickHouseParser.CREATE);
	                this.state = 647;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.OR) {
	                    this.state = 645;
	                    this.match(ClickHouseParser.OR);
	                    this.state = 646;
	                    this.match(ClickHouseParser.REPLACE);
	                }

	                break;
	            case ClickHouseParser.REPLACE:
	                this.state = 649;
	                this.match(ClickHouseParser.REPLACE);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 653;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.TEMPORARY) {
	                this.state = 652;
	                this.match(ClickHouseParser.TEMPORARY);
	            }

	            this.state = 655;
	            this.match(ClickHouseParser.TABLE);
	            this.state = 659;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
	            if(la_===1) {
	                this.state = 656;
	                this.match(ClickHouseParser.IF);
	                this.state = 657;
	                this.match(ClickHouseParser.NOT);
	                this.state = 658;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 661;
	            this.tableIdentifier();
	            this.state = 663;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.UUID) {
	                this.state = 662;
	                this.uuidClause();
	            }

	            this.state = 666;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ON) {
	                this.state = 665;
	                this.clusterClause();
	            }

	            this.state = 669;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
	            if(la_===1) {
	                this.state = 668;
	                this.tableSchemaClause();

	            }
	            this.state = 672;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ENGINE) {
	                this.state = 671;
	                this.engineClause();
	            }

	            this.state = 675;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.AS) {
	                this.state = 674;
	                this.subqueryClause();
	            }

	            break;

	        case 6:
	            localctx = new CreateViewStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 677;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.ATTACH || _la===ClickHouseParser.CREATE)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 680;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.OR) {
	                this.state = 678;
	                this.match(ClickHouseParser.OR);
	                this.state = 679;
	                this.match(ClickHouseParser.REPLACE);
	            }

	            this.state = 682;
	            this.match(ClickHouseParser.VIEW);
	            this.state = 686;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
	            if(la_===1) {
	                this.state = 683;
	                this.match(ClickHouseParser.IF);
	                this.state = 684;
	                this.match(ClickHouseParser.NOT);
	                this.state = 685;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 688;
	            this.tableIdentifier();
	            this.state = 690;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.UUID) {
	                this.state = 689;
	                this.uuidClause();
	            }

	            this.state = 693;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ON) {
	                this.state = 692;
	                this.clusterClause();
	            }

	            this.state = 696;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
	            if(la_===1) {
	                this.state = 695;
	                this.tableSchemaClause();

	            }
	            this.state = 698;
	            this.subqueryClause();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionarySchemaClause() {
	    let localctx = new DictionarySchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 24, ClickHouseParser.RULE_dictionarySchemaClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 702;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 703;
	        this.dictionaryAttrDfnt();
	        this.state = 708;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ClickHouseParser.COMMA) {
	            this.state = 704;
	            this.match(ClickHouseParser.COMMA);
	            this.state = 705;
	            this.dictionaryAttrDfnt();
	            this.state = 710;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 711;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryAttrDfnt() {
	    let localctx = new DictionaryAttrDfntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 26, ClickHouseParser.RULE_dictionaryAttrDfnt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 713;
	        this.identifier();
	        this.state = 714;
	        this.columnTypeExpr();
	        this.state = 736;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 734;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 715;
	                    if (!( !localctx.attrs.count("default"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$attrs.count(\"default\")");
	                    }
	                    this.state = 716;
	                    this.match(ClickHouseParser.DEFAULT);
	                    this.state = 717;
	                    this.literal();
	                    localctx.attrs.insert("default");
	                    break;

	                case 2:
	                    this.state = 720;
	                    if (!( !localctx.attrs.count("expression"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$attrs.count(\"expression\")");
	                    }
	                    this.state = 721;
	                    this.match(ClickHouseParser.EXPRESSION);
	                    this.state = 722;
	                    this.columnExpr(0);
	                    localctx.attrs.insert("expression");
	                    break;

	                case 3:
	                    this.state = 725;
	                    if (!( !localctx.attrs.count("hierarchical"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$attrs.count(\"hierarchical\")");
	                    }
	                    this.state = 726;
	                    this.match(ClickHouseParser.HIERARCHICAL);
	                    localctx.attrs.insert("hierarchical");
	                    break;

	                case 4:
	                    this.state = 728;
	                    if (!( !localctx.attrs.count("injective"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$attrs.count(\"injective\")");
	                    }
	                    this.state = 729;
	                    this.match(ClickHouseParser.INJECTIVE);
	                    localctx.attrs.insert("injective");
	                    break;

	                case 5:
	                    this.state = 731;
	                    if (!( !localctx.attrs.count("is_object_id"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$attrs.count(\"is_object_id\")");
	                    }
	                    this.state = 732;
	                    this.match(ClickHouseParser.IS_OBJECT_ID);
	                    localctx.attrs.insert("is_object_id");
	                    break;

	                } 
	            }
	            this.state = 738;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryEngineClause() {
	    let localctx = new DictionaryEngineClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 28, ClickHouseParser.RULE_dictionaryEngineClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 740;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
	        if(la_===1) {
	            this.state = 739;
	            this.dictionaryPrimaryKeyClause();

	        }
	        this.state = 764;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 762;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 742;
	                    if (!( !localctx.clauses.count("source"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"source\")");
	                    }
	                    this.state = 743;
	                    this.sourceClause();
	                    localctx.clauses.insert("source");
	                    break;

	                case 2:
	                    this.state = 746;
	                    if (!( !localctx.clauses.count("lifetime"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"lifetime\")");
	                    }
	                    this.state = 747;
	                    this.lifetimeClause();
	                    localctx.clauses.insert("lifetime");
	                    break;

	                case 3:
	                    this.state = 750;
	                    if (!( !localctx.clauses.count("layout"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"layout\")");
	                    }
	                    this.state = 751;
	                    this.layoutClause();
	                    localctx.clauses.insert("layout");
	                    break;

	                case 4:
	                    this.state = 754;
	                    if (!( !localctx.clauses.count("range"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"range\")");
	                    }
	                    this.state = 755;
	                    this.rangeClause();
	                    localctx.clauses.insert("range");
	                    break;

	                case 5:
	                    this.state = 758;
	                    if (!( !localctx.clauses.count("settings"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"settings\")");
	                    }
	                    this.state = 759;
	                    this.dictionarySettingsClause();
	                    localctx.clauses.insert("settings");
	                    break;

	                } 
	            }
	            this.state = 766;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryPrimaryKeyClause() {
	    let localctx = new DictionaryPrimaryKeyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 30, ClickHouseParser.RULE_dictionaryPrimaryKeyClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 767;
	        this.match(ClickHouseParser.PRIMARY);
	        this.state = 768;
	        this.match(ClickHouseParser.KEY);
	        this.state = 769;
	        this.columnExprList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionaryArgExpr() {
	    let localctx = new DictionaryArgExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 32, ClickHouseParser.RULE_dictionaryArgExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 771;
	        this.identifier();
	        this.state = 778;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.AFTER:
	        case ClickHouseParser.ALIAS:
	        case ClickHouseParser.ALL:
	        case ClickHouseParser.ALTER:
	        case ClickHouseParser.AND:
	        case ClickHouseParser.ANTI:
	        case ClickHouseParser.ANY:
	        case ClickHouseParser.ARRAY:
	        case ClickHouseParser.AS:
	        case ClickHouseParser.ASCENDING:
	        case ClickHouseParser.ASOF:
	        case ClickHouseParser.AST:
	        case ClickHouseParser.ASYNC:
	        case ClickHouseParser.ATTACH:
	        case ClickHouseParser.BETWEEN:
	        case ClickHouseParser.BOTH:
	        case ClickHouseParser.BY:
	        case ClickHouseParser.CASE:
	        case ClickHouseParser.CAST:
	        case ClickHouseParser.CHECK:
	        case ClickHouseParser.CLEAR:
	        case ClickHouseParser.CLUSTER:
	        case ClickHouseParser.CODEC:
	        case ClickHouseParser.COLLATE:
	        case ClickHouseParser.COLUMN:
	        case ClickHouseParser.COMMENT:
	        case ClickHouseParser.CONSTRAINT:
	        case ClickHouseParser.CREATE:
	        case ClickHouseParser.CROSS:
	        case ClickHouseParser.CUBE:
	        case ClickHouseParser.CURRENT:
	        case ClickHouseParser.DATABASE:
	        case ClickHouseParser.DATABASES:
	        case ClickHouseParser.DATE:
	        case ClickHouseParser.DAY:
	        case ClickHouseParser.DEDUPLICATE:
	        case ClickHouseParser.DEFAULT:
	        case ClickHouseParser.DELAY:
	        case ClickHouseParser.DELETE:
	        case ClickHouseParser.DESC:
	        case ClickHouseParser.DESCENDING:
	        case ClickHouseParser.DESCRIBE:
	        case ClickHouseParser.DETACH:
	        case ClickHouseParser.DICTIONARIES:
	        case ClickHouseParser.DICTIONARY:
	        case ClickHouseParser.DISK:
	        case ClickHouseParser.DISTINCT:
	        case ClickHouseParser.DISTRIBUTED:
	        case ClickHouseParser.DROP:
	        case ClickHouseParser.ELSE:
	        case ClickHouseParser.END:
	        case ClickHouseParser.ENGINE:
	        case ClickHouseParser.EVENTS:
	        case ClickHouseParser.EXISTS:
	        case ClickHouseParser.EXPLAIN:
	        case ClickHouseParser.EXPRESSION:
	        case ClickHouseParser.EXTRACT:
	        case ClickHouseParser.FETCHES:
	        case ClickHouseParser.FINAL:
	        case ClickHouseParser.FIRST:
	        case ClickHouseParser.FLUSH:
	        case ClickHouseParser.FOLLOWING:
	        case ClickHouseParser.FOR:
	        case ClickHouseParser.FORMAT:
	        case ClickHouseParser.FREEZE:
	        case ClickHouseParser.FROM:
	        case ClickHouseParser.FULL:
	        case ClickHouseParser.FUNCTION:
	        case ClickHouseParser.GLOBAL:
	        case ClickHouseParser.GRANULARITY:
	        case ClickHouseParser.GROUP:
	        case ClickHouseParser.HAVING:
	        case ClickHouseParser.HIERARCHICAL:
	        case ClickHouseParser.HOUR:
	        case ClickHouseParser.ID:
	        case ClickHouseParser.IF:
	        case ClickHouseParser.ILIKE:
	        case ClickHouseParser.IN:
	        case ClickHouseParser.INDEX:
	        case ClickHouseParser.INJECTIVE:
	        case ClickHouseParser.INNER:
	        case ClickHouseParser.INSERT:
	        case ClickHouseParser.INTERVAL:
	        case ClickHouseParser.INTO:
	        case ClickHouseParser.IS:
	        case ClickHouseParser.IS_OBJECT_ID:
	        case ClickHouseParser.JOIN:
	        case ClickHouseParser.KEY:
	        case ClickHouseParser.KILL:
	        case ClickHouseParser.LAST:
	        case ClickHouseParser.LAYOUT:
	        case ClickHouseParser.LEADING:
	        case ClickHouseParser.LEFT:
	        case ClickHouseParser.LIFETIME:
	        case ClickHouseParser.LIKE:
	        case ClickHouseParser.LIMIT:
	        case ClickHouseParser.LIVE:
	        case ClickHouseParser.LOCAL:
	        case ClickHouseParser.LOGS:
	        case ClickHouseParser.MATERIALIZE:
	        case ClickHouseParser.MATERIALIZED:
	        case ClickHouseParser.MAX:
	        case ClickHouseParser.MERGES:
	        case ClickHouseParser.MIN:
	        case ClickHouseParser.MINUTE:
	        case ClickHouseParser.MODIFY:
	        case ClickHouseParser.MONTH:
	        case ClickHouseParser.MOVE:
	        case ClickHouseParser.MUTATION:
	        case ClickHouseParser.NO:
	        case ClickHouseParser.NOT:
	        case ClickHouseParser.NULLS:
	        case ClickHouseParser.OFFSET:
	        case ClickHouseParser.ON:
	        case ClickHouseParser.OPTIMIZE:
	        case ClickHouseParser.OR:
	        case ClickHouseParser.ORDER:
	        case ClickHouseParser.OUTER:
	        case ClickHouseParser.OUTFILE:
	        case ClickHouseParser.OVER:
	        case ClickHouseParser.PARTITION:
	        case ClickHouseParser.POPULATE:
	        case ClickHouseParser.PRECEDING:
	        case ClickHouseParser.PREWHERE:
	        case ClickHouseParser.PRIMARY:
	        case ClickHouseParser.QUARTER:
	        case ClickHouseParser.RANGE:
	        case ClickHouseParser.RELOAD:
	        case ClickHouseParser.REMOVE:
	        case ClickHouseParser.RENAME:
	        case ClickHouseParser.REPLACE:
	        case ClickHouseParser.REPLICA:
	        case ClickHouseParser.REPLICATED:
	        case ClickHouseParser.RIGHT:
	        case ClickHouseParser.ROLLUP:
	        case ClickHouseParser.ROW:
	        case ClickHouseParser.ROWS:
	        case ClickHouseParser.SAMPLE:
	        case ClickHouseParser.SECOND:
	        case ClickHouseParser.SELECT:
	        case ClickHouseParser.SEMI:
	        case ClickHouseParser.SENDS:
	        case ClickHouseParser.SET:
	        case ClickHouseParser.SETTINGS:
	        case ClickHouseParser.SHOW:
	        case ClickHouseParser.SOURCE:
	        case ClickHouseParser.START:
	        case ClickHouseParser.STOP:
	        case ClickHouseParser.SUBSTRING:
	        case ClickHouseParser.SYNC:
	        case ClickHouseParser.SYNTAX:
	        case ClickHouseParser.SYSTEM:
	        case ClickHouseParser.TABLE:
	        case ClickHouseParser.TABLES:
	        case ClickHouseParser.TEMPORARY:
	        case ClickHouseParser.TEST:
	        case ClickHouseParser.THEN:
	        case ClickHouseParser.TIES:
	        case ClickHouseParser.TIMEOUT:
	        case ClickHouseParser.TIMESTAMP:
	        case ClickHouseParser.TO:
	        case ClickHouseParser.TOP:
	        case ClickHouseParser.TOTALS:
	        case ClickHouseParser.TRAILING:
	        case ClickHouseParser.TRIM:
	        case ClickHouseParser.TRUNCATE:
	        case ClickHouseParser.TTL:
	        case ClickHouseParser.TYPE:
	        case ClickHouseParser.UNBOUNDED:
	        case ClickHouseParser.UNION:
	        case ClickHouseParser.UPDATE:
	        case ClickHouseParser.USE:
	        case ClickHouseParser.USING:
	        case ClickHouseParser.UUID:
	        case ClickHouseParser.VALUES:
	        case ClickHouseParser.VIEW:
	        case ClickHouseParser.VOLUME:
	        case ClickHouseParser.WATCH:
	        case ClickHouseParser.WEEK:
	        case ClickHouseParser.WHEN:
	        case ClickHouseParser.WHERE:
	        case ClickHouseParser.WINDOW:
	        case ClickHouseParser.WITH:
	        case ClickHouseParser.YEAR:
	        case ClickHouseParser.JSON_FALSE:
	        case ClickHouseParser.JSON_TRUE:
	        case ClickHouseParser.IDENTIFIER:
	            this.state = 772;
	            this.identifier();
	            this.state = 775;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.LPAREN) {
	                this.state = 773;
	                this.match(ClickHouseParser.LPAREN);
	                this.state = 774;
	                this.match(ClickHouseParser.RPAREN);
	            }

	            break;
	        case ClickHouseParser.INF:
	        case ClickHouseParser.NAN_SQL:
	        case ClickHouseParser.NULL_SQL:
	        case ClickHouseParser.FLOATING_LITERAL:
	        case ClickHouseParser.OCTAL_LITERAL:
	        case ClickHouseParser.DECIMAL_LITERAL:
	        case ClickHouseParser.HEXADECIMAL_LITERAL:
	        case ClickHouseParser.STRING_LITERAL:
	        case ClickHouseParser.DASH:
	        case ClickHouseParser.DOT:
	        case ClickHouseParser.PLUS:
	            this.state = 777;
	            this.literal();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sourceClause() {
	    let localctx = new SourceClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 34, ClickHouseParser.RULE_sourceClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 780;
	        this.match(ClickHouseParser.SOURCE);
	        this.state = 781;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 782;
	        this.identifier();
	        this.state = 783;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 787;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ClickHouseParser.DATABASES - 34)) | (1 << (ClickHouseParser.DATE - 34)) | (1 << (ClickHouseParser.DAY - 34)) | (1 << (ClickHouseParser.DEDUPLICATE - 34)) | (1 << (ClickHouseParser.DEFAULT - 34)) | (1 << (ClickHouseParser.DELAY - 34)) | (1 << (ClickHouseParser.DELETE - 34)) | (1 << (ClickHouseParser.DESC - 34)) | (1 << (ClickHouseParser.DESCENDING - 34)) | (1 << (ClickHouseParser.DESCRIBE - 34)) | (1 << (ClickHouseParser.DETACH - 34)) | (1 << (ClickHouseParser.DICTIONARIES - 34)) | (1 << (ClickHouseParser.DICTIONARY - 34)) | (1 << (ClickHouseParser.DISK - 34)) | (1 << (ClickHouseParser.DISTINCT - 34)) | (1 << (ClickHouseParser.DISTRIBUTED - 34)) | (1 << (ClickHouseParser.DROP - 34)) | (1 << (ClickHouseParser.ELSE - 34)) | (1 << (ClickHouseParser.END - 34)) | (1 << (ClickHouseParser.ENGINE - 34)) | (1 << (ClickHouseParser.EVENTS - 34)) | (1 << (ClickHouseParser.EXISTS - 34)) | (1 << (ClickHouseParser.EXPLAIN - 34)) | (1 << (ClickHouseParser.EXPRESSION - 34)) | (1 << (ClickHouseParser.EXTRACT - 34)) | (1 << (ClickHouseParser.FETCHES - 34)) | (1 << (ClickHouseParser.FINAL - 34)) | (1 << (ClickHouseParser.FIRST - 34)) | (1 << (ClickHouseParser.FLUSH - 34)) | (1 << (ClickHouseParser.FOLLOWING - 34)) | (1 << (ClickHouseParser.FOR - 34)) | (1 << (ClickHouseParser.FORMAT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ClickHouseParser.LIMIT - 98)) | (1 << (ClickHouseParser.LIVE - 98)) | (1 << (ClickHouseParser.LOCAL - 98)) | (1 << (ClickHouseParser.LOGS - 98)) | (1 << (ClickHouseParser.MATERIALIZE - 98)) | (1 << (ClickHouseParser.MATERIALIZED - 98)) | (1 << (ClickHouseParser.MAX - 98)) | (1 << (ClickHouseParser.MERGES - 98)) | (1 << (ClickHouseParser.MIN - 98)) | (1 << (ClickHouseParser.MINUTE - 98)) | (1 << (ClickHouseParser.MODIFY - 98)) | (1 << (ClickHouseParser.MONTH - 98)) | (1 << (ClickHouseParser.MOVE - 98)) | (1 << (ClickHouseParser.MUTATION - 98)) | (1 << (ClickHouseParser.NO - 98)) | (1 << (ClickHouseParser.NOT - 98)) | (1 << (ClickHouseParser.NULLS - 98)) | (1 << (ClickHouseParser.OFFSET - 98)) | (1 << (ClickHouseParser.ON - 98)) | (1 << (ClickHouseParser.OPTIMIZE - 98)) | (1 << (ClickHouseParser.OR - 98)) | (1 << (ClickHouseParser.ORDER - 98)) | (1 << (ClickHouseParser.OUTER - 98)) | (1 << (ClickHouseParser.OUTFILE - 98)) | (1 << (ClickHouseParser.OVER - 98)) | (1 << (ClickHouseParser.PARTITION - 98)) | (1 << (ClickHouseParser.POPULATE - 98)) | (1 << (ClickHouseParser.PRECEDING - 98)) | (1 << (ClickHouseParser.PREWHERE - 98)) | (1 << (ClickHouseParser.PRIMARY - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (ClickHouseParser.TIES - 163)) | (1 << (ClickHouseParser.TIMEOUT - 163)) | (1 << (ClickHouseParser.TIMESTAMP - 163)) | (1 << (ClickHouseParser.TO - 163)) | (1 << (ClickHouseParser.TOP - 163)) | (1 << (ClickHouseParser.TOTALS - 163)) | (1 << (ClickHouseParser.TRAILING - 163)) | (1 << (ClickHouseParser.TRIM - 163)) | (1 << (ClickHouseParser.TRUNCATE - 163)) | (1 << (ClickHouseParser.TTL - 163)) | (1 << (ClickHouseParser.TYPE - 163)) | (1 << (ClickHouseParser.UNBOUNDED - 163)) | (1 << (ClickHouseParser.UNION - 163)) | (1 << (ClickHouseParser.UPDATE - 163)) | (1 << (ClickHouseParser.USE - 163)) | (1 << (ClickHouseParser.USING - 163)) | (1 << (ClickHouseParser.UUID - 163)) | (1 << (ClickHouseParser.VALUES - 163)) | (1 << (ClickHouseParser.VIEW - 163)) | (1 << (ClickHouseParser.VOLUME - 163)) | (1 << (ClickHouseParser.WATCH - 163)) | (1 << (ClickHouseParser.WEEK - 163)) | (1 << (ClickHouseParser.WHEN - 163)) | (1 << (ClickHouseParser.WHERE - 163)) | (1 << (ClickHouseParser.WINDOW - 163)) | (1 << (ClickHouseParser.WITH - 163)) | (1 << (ClickHouseParser.YEAR - 163)) | (1 << (ClickHouseParser.JSON_FALSE - 163)) | (1 << (ClickHouseParser.JSON_TRUE - 163)) | (1 << (ClickHouseParser.IDENTIFIER - 163)))) !== 0)) {
	            this.state = 784;
	            this.dictionaryArgExpr();
	            this.state = 789;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 790;
	        this.match(ClickHouseParser.RPAREN);
	        this.state = 791;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	lifetimeClause() {
	    let localctx = new LifetimeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 36, ClickHouseParser.RULE_lifetimeClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 793;
	        this.match(ClickHouseParser.LIFETIME);
	        this.state = 794;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 804;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.DECIMAL_LITERAL:
	            this.state = 795;
	            this.match(ClickHouseParser.DECIMAL_LITERAL);
	            break;
	        case ClickHouseParser.MIN:
	            this.state = 796;
	            this.match(ClickHouseParser.MIN);
	            this.state = 797;
	            this.match(ClickHouseParser.DECIMAL_LITERAL);
	            this.state = 798;
	            this.match(ClickHouseParser.MAX);
	            this.state = 799;
	            this.match(ClickHouseParser.DECIMAL_LITERAL);
	            break;
	        case ClickHouseParser.MAX:
	            this.state = 800;
	            this.match(ClickHouseParser.MAX);
	            this.state = 801;
	            this.match(ClickHouseParser.DECIMAL_LITERAL);
	            this.state = 802;
	            this.match(ClickHouseParser.MIN);
	            this.state = 803;
	            this.match(ClickHouseParser.DECIMAL_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 806;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	layoutClause() {
	    let localctx = new LayoutClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 38, ClickHouseParser.RULE_layoutClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 808;
	        this.match(ClickHouseParser.LAYOUT);
	        this.state = 809;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 810;
	        this.identifier();
	        this.state = 811;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 815;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ClickHouseParser.DATABASES - 34)) | (1 << (ClickHouseParser.DATE - 34)) | (1 << (ClickHouseParser.DAY - 34)) | (1 << (ClickHouseParser.DEDUPLICATE - 34)) | (1 << (ClickHouseParser.DEFAULT - 34)) | (1 << (ClickHouseParser.DELAY - 34)) | (1 << (ClickHouseParser.DELETE - 34)) | (1 << (ClickHouseParser.DESC - 34)) | (1 << (ClickHouseParser.DESCENDING - 34)) | (1 << (ClickHouseParser.DESCRIBE - 34)) | (1 << (ClickHouseParser.DETACH - 34)) | (1 << (ClickHouseParser.DICTIONARIES - 34)) | (1 << (ClickHouseParser.DICTIONARY - 34)) | (1 << (ClickHouseParser.DISK - 34)) | (1 << (ClickHouseParser.DISTINCT - 34)) | (1 << (ClickHouseParser.DISTRIBUTED - 34)) | (1 << (ClickHouseParser.DROP - 34)) | (1 << (ClickHouseParser.ELSE - 34)) | (1 << (ClickHouseParser.END - 34)) | (1 << (ClickHouseParser.ENGINE - 34)) | (1 << (ClickHouseParser.EVENTS - 34)) | (1 << (ClickHouseParser.EXISTS - 34)) | (1 << (ClickHouseParser.EXPLAIN - 34)) | (1 << (ClickHouseParser.EXPRESSION - 34)) | (1 << (ClickHouseParser.EXTRACT - 34)) | (1 << (ClickHouseParser.FETCHES - 34)) | (1 << (ClickHouseParser.FINAL - 34)) | (1 << (ClickHouseParser.FIRST - 34)) | (1 << (ClickHouseParser.FLUSH - 34)) | (1 << (ClickHouseParser.FOLLOWING - 34)) | (1 << (ClickHouseParser.FOR - 34)) | (1 << (ClickHouseParser.FORMAT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ClickHouseParser.LIMIT - 98)) | (1 << (ClickHouseParser.LIVE - 98)) | (1 << (ClickHouseParser.LOCAL - 98)) | (1 << (ClickHouseParser.LOGS - 98)) | (1 << (ClickHouseParser.MATERIALIZE - 98)) | (1 << (ClickHouseParser.MATERIALIZED - 98)) | (1 << (ClickHouseParser.MAX - 98)) | (1 << (ClickHouseParser.MERGES - 98)) | (1 << (ClickHouseParser.MIN - 98)) | (1 << (ClickHouseParser.MINUTE - 98)) | (1 << (ClickHouseParser.MODIFY - 98)) | (1 << (ClickHouseParser.MONTH - 98)) | (1 << (ClickHouseParser.MOVE - 98)) | (1 << (ClickHouseParser.MUTATION - 98)) | (1 << (ClickHouseParser.NO - 98)) | (1 << (ClickHouseParser.NOT - 98)) | (1 << (ClickHouseParser.NULLS - 98)) | (1 << (ClickHouseParser.OFFSET - 98)) | (1 << (ClickHouseParser.ON - 98)) | (1 << (ClickHouseParser.OPTIMIZE - 98)) | (1 << (ClickHouseParser.OR - 98)) | (1 << (ClickHouseParser.ORDER - 98)) | (1 << (ClickHouseParser.OUTER - 98)) | (1 << (ClickHouseParser.OUTFILE - 98)) | (1 << (ClickHouseParser.OVER - 98)) | (1 << (ClickHouseParser.PARTITION - 98)) | (1 << (ClickHouseParser.POPULATE - 98)) | (1 << (ClickHouseParser.PRECEDING - 98)) | (1 << (ClickHouseParser.PREWHERE - 98)) | (1 << (ClickHouseParser.PRIMARY - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (ClickHouseParser.TIES - 163)) | (1 << (ClickHouseParser.TIMEOUT - 163)) | (1 << (ClickHouseParser.TIMESTAMP - 163)) | (1 << (ClickHouseParser.TO - 163)) | (1 << (ClickHouseParser.TOP - 163)) | (1 << (ClickHouseParser.TOTALS - 163)) | (1 << (ClickHouseParser.TRAILING - 163)) | (1 << (ClickHouseParser.TRIM - 163)) | (1 << (ClickHouseParser.TRUNCATE - 163)) | (1 << (ClickHouseParser.TTL - 163)) | (1 << (ClickHouseParser.TYPE - 163)) | (1 << (ClickHouseParser.UNBOUNDED - 163)) | (1 << (ClickHouseParser.UNION - 163)) | (1 << (ClickHouseParser.UPDATE - 163)) | (1 << (ClickHouseParser.USE - 163)) | (1 << (ClickHouseParser.USING - 163)) | (1 << (ClickHouseParser.UUID - 163)) | (1 << (ClickHouseParser.VALUES - 163)) | (1 << (ClickHouseParser.VIEW - 163)) | (1 << (ClickHouseParser.VOLUME - 163)) | (1 << (ClickHouseParser.WATCH - 163)) | (1 << (ClickHouseParser.WEEK - 163)) | (1 << (ClickHouseParser.WHEN - 163)) | (1 << (ClickHouseParser.WHERE - 163)) | (1 << (ClickHouseParser.WINDOW - 163)) | (1 << (ClickHouseParser.WITH - 163)) | (1 << (ClickHouseParser.YEAR - 163)) | (1 << (ClickHouseParser.JSON_FALSE - 163)) | (1 << (ClickHouseParser.JSON_TRUE - 163)) | (1 << (ClickHouseParser.IDENTIFIER - 163)))) !== 0)) {
	            this.state = 812;
	            this.dictionaryArgExpr();
	            this.state = 817;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 818;
	        this.match(ClickHouseParser.RPAREN);
	        this.state = 819;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	rangeClause() {
	    let localctx = new RangeClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 40, ClickHouseParser.RULE_rangeClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 821;
	        this.match(ClickHouseParser.RANGE);
	        this.state = 822;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 833;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.MIN:
	            this.state = 823;
	            this.match(ClickHouseParser.MIN);
	            this.state = 824;
	            this.identifier();
	            this.state = 825;
	            this.match(ClickHouseParser.MAX);
	            this.state = 826;
	            this.identifier();
	            break;
	        case ClickHouseParser.MAX:
	            this.state = 828;
	            this.match(ClickHouseParser.MAX);
	            this.state = 829;
	            this.identifier();
	            this.state = 830;
	            this.match(ClickHouseParser.MIN);
	            this.state = 831;
	            this.identifier();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 835;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dictionarySettingsClause() {
	    let localctx = new DictionarySettingsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 42, ClickHouseParser.RULE_dictionarySettingsClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 837;
	        this.match(ClickHouseParser.SETTINGS);
	        this.state = 838;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 839;
	        this.settingExprList();
	        this.state = 840;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	clusterClause() {
	    let localctx = new ClusterClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 44, ClickHouseParser.RULE_clusterClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 842;
	        this.match(ClickHouseParser.ON);
	        this.state = 843;
	        this.match(ClickHouseParser.CLUSTER);
	        this.state = 846;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.AFTER:
	        case ClickHouseParser.ALIAS:
	        case ClickHouseParser.ALL:
	        case ClickHouseParser.ALTER:
	        case ClickHouseParser.AND:
	        case ClickHouseParser.ANTI:
	        case ClickHouseParser.ANY:
	        case ClickHouseParser.ARRAY:
	        case ClickHouseParser.AS:
	        case ClickHouseParser.ASCENDING:
	        case ClickHouseParser.ASOF:
	        case ClickHouseParser.AST:
	        case ClickHouseParser.ASYNC:
	        case ClickHouseParser.ATTACH:
	        case ClickHouseParser.BETWEEN:
	        case ClickHouseParser.BOTH:
	        case ClickHouseParser.BY:
	        case ClickHouseParser.CASE:
	        case ClickHouseParser.CAST:
	        case ClickHouseParser.CHECK:
	        case ClickHouseParser.CLEAR:
	        case ClickHouseParser.CLUSTER:
	        case ClickHouseParser.CODEC:
	        case ClickHouseParser.COLLATE:
	        case ClickHouseParser.COLUMN:
	        case ClickHouseParser.COMMENT:
	        case ClickHouseParser.CONSTRAINT:
	        case ClickHouseParser.CREATE:
	        case ClickHouseParser.CROSS:
	        case ClickHouseParser.CUBE:
	        case ClickHouseParser.CURRENT:
	        case ClickHouseParser.DATABASE:
	        case ClickHouseParser.DATABASES:
	        case ClickHouseParser.DATE:
	        case ClickHouseParser.DAY:
	        case ClickHouseParser.DEDUPLICATE:
	        case ClickHouseParser.DEFAULT:
	        case ClickHouseParser.DELAY:
	        case ClickHouseParser.DELETE:
	        case ClickHouseParser.DESC:
	        case ClickHouseParser.DESCENDING:
	        case ClickHouseParser.DESCRIBE:
	        case ClickHouseParser.DETACH:
	        case ClickHouseParser.DICTIONARIES:
	        case ClickHouseParser.DICTIONARY:
	        case ClickHouseParser.DISK:
	        case ClickHouseParser.DISTINCT:
	        case ClickHouseParser.DISTRIBUTED:
	        case ClickHouseParser.DROP:
	        case ClickHouseParser.ELSE:
	        case ClickHouseParser.END:
	        case ClickHouseParser.ENGINE:
	        case ClickHouseParser.EVENTS:
	        case ClickHouseParser.EXISTS:
	        case ClickHouseParser.EXPLAIN:
	        case ClickHouseParser.EXPRESSION:
	        case ClickHouseParser.EXTRACT:
	        case ClickHouseParser.FETCHES:
	        case ClickHouseParser.FINAL:
	        case ClickHouseParser.FIRST:
	        case ClickHouseParser.FLUSH:
	        case ClickHouseParser.FOLLOWING:
	        case ClickHouseParser.FOR:
	        case ClickHouseParser.FORMAT:
	        case ClickHouseParser.FREEZE:
	        case ClickHouseParser.FROM:
	        case ClickHouseParser.FULL:
	        case ClickHouseParser.FUNCTION:
	        case ClickHouseParser.GLOBAL:
	        case ClickHouseParser.GRANULARITY:
	        case ClickHouseParser.GROUP:
	        case ClickHouseParser.HAVING:
	        case ClickHouseParser.HIERARCHICAL:
	        case ClickHouseParser.HOUR:
	        case ClickHouseParser.ID:
	        case ClickHouseParser.IF:
	        case ClickHouseParser.ILIKE:
	        case ClickHouseParser.IN:
	        case ClickHouseParser.INDEX:
	        case ClickHouseParser.INJECTIVE:
	        case ClickHouseParser.INNER:
	        case ClickHouseParser.INSERT:
	        case ClickHouseParser.INTERVAL:
	        case ClickHouseParser.INTO:
	        case ClickHouseParser.IS:
	        case ClickHouseParser.IS_OBJECT_ID:
	        case ClickHouseParser.JOIN:
	        case ClickHouseParser.KEY:
	        case ClickHouseParser.KILL:
	        case ClickHouseParser.LAST:
	        case ClickHouseParser.LAYOUT:
	        case ClickHouseParser.LEADING:
	        case ClickHouseParser.LEFT:
	        case ClickHouseParser.LIFETIME:
	        case ClickHouseParser.LIKE:
	        case ClickHouseParser.LIMIT:
	        case ClickHouseParser.LIVE:
	        case ClickHouseParser.LOCAL:
	        case ClickHouseParser.LOGS:
	        case ClickHouseParser.MATERIALIZE:
	        case ClickHouseParser.MATERIALIZED:
	        case ClickHouseParser.MAX:
	        case ClickHouseParser.MERGES:
	        case ClickHouseParser.MIN:
	        case ClickHouseParser.MINUTE:
	        case ClickHouseParser.MODIFY:
	        case ClickHouseParser.MONTH:
	        case ClickHouseParser.MOVE:
	        case ClickHouseParser.MUTATION:
	        case ClickHouseParser.NO:
	        case ClickHouseParser.NOT:
	        case ClickHouseParser.NULLS:
	        case ClickHouseParser.OFFSET:
	        case ClickHouseParser.ON:
	        case ClickHouseParser.OPTIMIZE:
	        case ClickHouseParser.OR:
	        case ClickHouseParser.ORDER:
	        case ClickHouseParser.OUTER:
	        case ClickHouseParser.OUTFILE:
	        case ClickHouseParser.OVER:
	        case ClickHouseParser.PARTITION:
	        case ClickHouseParser.POPULATE:
	        case ClickHouseParser.PRECEDING:
	        case ClickHouseParser.PREWHERE:
	        case ClickHouseParser.PRIMARY:
	        case ClickHouseParser.QUARTER:
	        case ClickHouseParser.RANGE:
	        case ClickHouseParser.RELOAD:
	        case ClickHouseParser.REMOVE:
	        case ClickHouseParser.RENAME:
	        case ClickHouseParser.REPLACE:
	        case ClickHouseParser.REPLICA:
	        case ClickHouseParser.REPLICATED:
	        case ClickHouseParser.RIGHT:
	        case ClickHouseParser.ROLLUP:
	        case ClickHouseParser.ROW:
	        case ClickHouseParser.ROWS:
	        case ClickHouseParser.SAMPLE:
	        case ClickHouseParser.SECOND:
	        case ClickHouseParser.SELECT:
	        case ClickHouseParser.SEMI:
	        case ClickHouseParser.SENDS:
	        case ClickHouseParser.SET:
	        case ClickHouseParser.SETTINGS:
	        case ClickHouseParser.SHOW:
	        case ClickHouseParser.SOURCE:
	        case ClickHouseParser.START:
	        case ClickHouseParser.STOP:
	        case ClickHouseParser.SUBSTRING:
	        case ClickHouseParser.SYNC:
	        case ClickHouseParser.SYNTAX:
	        case ClickHouseParser.SYSTEM:
	        case ClickHouseParser.TABLE:
	        case ClickHouseParser.TABLES:
	        case ClickHouseParser.TEMPORARY:
	        case ClickHouseParser.TEST:
	        case ClickHouseParser.THEN:
	        case ClickHouseParser.TIES:
	        case ClickHouseParser.TIMEOUT:
	        case ClickHouseParser.TIMESTAMP:
	        case ClickHouseParser.TO:
	        case ClickHouseParser.TOP:
	        case ClickHouseParser.TOTALS:
	        case ClickHouseParser.TRAILING:
	        case ClickHouseParser.TRIM:
	        case ClickHouseParser.TRUNCATE:
	        case ClickHouseParser.TTL:
	        case ClickHouseParser.TYPE:
	        case ClickHouseParser.UNBOUNDED:
	        case ClickHouseParser.UNION:
	        case ClickHouseParser.UPDATE:
	        case ClickHouseParser.USE:
	        case ClickHouseParser.USING:
	        case ClickHouseParser.UUID:
	        case ClickHouseParser.VALUES:
	        case ClickHouseParser.VIEW:
	        case ClickHouseParser.VOLUME:
	        case ClickHouseParser.WATCH:
	        case ClickHouseParser.WEEK:
	        case ClickHouseParser.WHEN:
	        case ClickHouseParser.WHERE:
	        case ClickHouseParser.WINDOW:
	        case ClickHouseParser.WITH:
	        case ClickHouseParser.YEAR:
	        case ClickHouseParser.JSON_FALSE:
	        case ClickHouseParser.JSON_TRUE:
	        case ClickHouseParser.IDENTIFIER:
	            this.state = 844;
	            this.identifier();
	            break;
	        case ClickHouseParser.STRING_LITERAL:
	            this.state = 845;
	            this.match(ClickHouseParser.STRING_LITERAL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	uuidClause() {
	    let localctx = new UuidClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 46, ClickHouseParser.RULE_uuidClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 848;
	        this.match(ClickHouseParser.UUID);
	        this.state = 849;
	        this.match(ClickHouseParser.STRING_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	destinationClause() {
	    let localctx = new DestinationClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 48, ClickHouseParser.RULE_destinationClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 851;
	        this.match(ClickHouseParser.TO);
	        this.state = 852;
	        this.tableIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	subqueryClause() {
	    let localctx = new SubqueryClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 50, ClickHouseParser.RULE_subqueryClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 854;
	        this.match(ClickHouseParser.AS);
	        this.state = 855;
	        this.selectUnionStmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableSchemaClause() {
	    let localctx = new TableSchemaClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 52, ClickHouseParser.RULE_tableSchemaClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 872;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new SchemaDescriptionClauseContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 857;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 858;
	            this.tableElementExpr();
	            this.state = 863;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ClickHouseParser.COMMA) {
	                this.state = 859;
	                this.match(ClickHouseParser.COMMA);
	                this.state = 860;
	                this.tableElementExpr();
	                this.state = 865;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 866;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 2:
	            localctx = new SchemaAsTableClauseContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 868;
	            this.match(ClickHouseParser.AS);
	            this.state = 869;
	            this.tableIdentifier();
	            break;

	        case 3:
	            localctx = new SchemaAsFunctionClauseContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 870;
	            this.match(ClickHouseParser.AS);
	            this.state = 871;
	            this.tableFunctionExpr();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	engineClause() {
	    let localctx = new EngineClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 54, ClickHouseParser.RULE_engineClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 874;
	        this.engineExpr();
	        this.state = 901;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 899;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
	                switch(la_) {
	                case 1:
	                    this.state = 875;
	                    if (!( !localctx.clauses.count("orderByClause"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"orderByClause\")");
	                    }
	                    this.state = 876;
	                    this.orderByClause();
	                    localctx.clauses.insert("orderByClause");
	                    break;

	                case 2:
	                    this.state = 879;
	                    if (!( !localctx.clauses.count("partitionByClause"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"partitionByClause\")");
	                    }
	                    this.state = 880;
	                    this.partitionByClause();
	                    localctx.clauses.insert("partitionByClause");
	                    break;

	                case 3:
	                    this.state = 883;
	                    if (!( !localctx.clauses.count("primaryKeyClause"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"primaryKeyClause\")");
	                    }
	                    this.state = 884;
	                    this.primaryKeyClause();
	                    localctx.clauses.insert("primaryKeyClause");
	                    break;

	                case 4:
	                    this.state = 887;
	                    if (!( !localctx.clauses.count("sampleByClause"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"sampleByClause\")");
	                    }
	                    this.state = 888;
	                    this.sampleByClause();
	                    localctx.clauses.insert("sampleByClause");
	                    break;

	                case 5:
	                    this.state = 891;
	                    if (!( !localctx.clauses.count("ttlClause"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"ttlClause\")");
	                    }
	                    this.state = 892;
	                    this.ttlClause();
	                    localctx.clauses.insert("ttlClause");
	                    break;

	                case 6:
	                    this.state = 895;
	                    if (!( !localctx.clauses.count("settingsClause"))) {
	                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"settingsClause\")");
	                    }
	                    this.state = 896;
	                    this.settingsClause();
	                    localctx.clauses.insert("settingsClause");
	                    break;

	                } 
	            }
	            this.state = 903;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	partitionByClause() {
	    let localctx = new PartitionByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 56, ClickHouseParser.RULE_partitionByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 904;
	        this.match(ClickHouseParser.PARTITION);
	        this.state = 905;
	        this.match(ClickHouseParser.BY);
	        this.state = 906;
	        this.columnExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	primaryKeyClause() {
	    let localctx = new PrimaryKeyClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 58, ClickHouseParser.RULE_primaryKeyClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 908;
	        this.match(ClickHouseParser.PRIMARY);
	        this.state = 909;
	        this.match(ClickHouseParser.KEY);
	        this.state = 910;
	        this.columnExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sampleByClause() {
	    let localctx = new SampleByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 60, ClickHouseParser.RULE_sampleByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 912;
	        this.match(ClickHouseParser.SAMPLE);
	        this.state = 913;
	        this.match(ClickHouseParser.BY);
	        this.state = 914;
	        this.columnExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ttlClause() {
	    let localctx = new TtlClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 62, ClickHouseParser.RULE_ttlClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 916;
	        this.match(ClickHouseParser.TTL);
	        this.state = 917;
	        this.ttlExpr();
	        this.state = 922;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 918;
	                this.match(ClickHouseParser.COMMA);
	                this.state = 919;
	                this.ttlExpr(); 
	            }
	            this.state = 924;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	engineExpr() {
	    let localctx = new EngineExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 64, ClickHouseParser.RULE_engineExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 925;
	        this.match(ClickHouseParser.ENGINE);
	        this.state = 927;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.EQ_SINGLE) {
	            this.state = 926;
	            this.match(ClickHouseParser.EQ_SINGLE);
	        }

	        this.state = 929;
	        this.identifierOrNull();
	        this.state = 935;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
	        if(la_===1) {
	            this.state = 930;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 932;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
	                this.state = 931;
	                this.columnExprList();
	            }

	            this.state = 934;
	            this.match(ClickHouseParser.RPAREN);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableElementExpr() {
	    let localctx = new TableElementExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 66, ClickHouseParser.RULE_tableElementExpr);
	    try {
	        this.state = 947;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableElementExprColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 937;
	            this.tableColumnDfnt();
	            break;

	        case 2:
	            localctx = new TableElementExprConstraintContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 938;
	            this.match(ClickHouseParser.CONSTRAINT);
	            this.state = 939;
	            this.identifier();
	            this.state = 940;
	            this.match(ClickHouseParser.CHECK);
	            this.state = 941;
	            this.columnExpr(0);
	            break;

	        case 3:
	            localctx = new TableElementExprIndexContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 943;
	            this.match(ClickHouseParser.INDEX);
	            this.state = 944;
	            this.tableIndexDfnt();
	            break;

	        case 4:
	            localctx = new TableElementExprProjectionContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 945;
	            this.match(ClickHouseParser.PROJECTION);
	            this.state = 946;
	            this.tableProjectionDfnt();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableColumnDfnt() {
	    let localctx = new TableColumnDfntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 68, ClickHouseParser.RULE_tableColumnDfnt);
	    var _la = 0; // Token type
	    try {
	        this.state = 981;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 949;
	            this.nestedIdentifier();
	            this.state = 950;
	            this.columnTypeExpr();
	            this.state = 952;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ALIAS || _la===ClickHouseParser.DEFAULT || _la===ClickHouseParser.MATERIALIZED) {
	                this.state = 951;
	                this.tableColumnPropertyExpr();
	            }

	            this.state = 956;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.COMMENT) {
	                this.state = 954;
	                this.match(ClickHouseParser.COMMENT);
	                this.state = 955;
	                this.match(ClickHouseParser.STRING_LITERAL);
	            }

	            this.state = 959;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.CODEC) {
	                this.state = 958;
	                this.codecExpr();
	            }

	            this.state = 963;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.TTL) {
	                this.state = 961;
	                this.match(ClickHouseParser.TTL);
	                this.state = 962;
	                this.columnExpr(0);
	            }

	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 965;
	            this.nestedIdentifier();
	            this.state = 967;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
	            if(la_===1) {
	                this.state = 966;
	                this.columnTypeExpr();

	            }
	            this.state = 969;
	            this.tableColumnPropertyExpr();
	            this.state = 972;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.COMMENT) {
	                this.state = 970;
	                this.match(ClickHouseParser.COMMENT);
	                this.state = 971;
	                this.match(ClickHouseParser.STRING_LITERAL);
	            }

	            this.state = 975;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.CODEC) {
	                this.state = 974;
	                this.codecExpr();
	            }

	            this.state = 979;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.TTL) {
	                this.state = 977;
	                this.match(ClickHouseParser.TTL);
	                this.state = 978;
	                this.columnExpr(0);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableColumnPropertyExpr() {
	    let localctx = new TableColumnPropertyExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 70, ClickHouseParser.RULE_tableColumnPropertyExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 983;
	        _la = this._input.LA(1);
	        if(!(_la===ClickHouseParser.ALIAS || _la===ClickHouseParser.DEFAULT || _la===ClickHouseParser.MATERIALIZED)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 984;
	        this.columnExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableIndexDfnt() {
	    let localctx = new TableIndexDfntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 72, ClickHouseParser.RULE_tableIndexDfnt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 986;
	        this.nestedIdentifier();
	        this.state = 987;
	        this.columnExpr(0);
	        this.state = 988;
	        this.match(ClickHouseParser.TYPE);
	        this.state = 989;
	        this.columnTypeExpr();
	        this.state = 990;
	        this.match(ClickHouseParser.GRANULARITY);
	        this.state = 991;
	        this.match(ClickHouseParser.DECIMAL_LITERAL);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableProjectionDfnt() {
	    let localctx = new TableProjectionDfntContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 74, ClickHouseParser.RULE_tableProjectionDfnt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 993;
	        this.nestedIdentifier();
	        this.state = 994;
	        this.projectionSelectStmt();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codecExpr() {
	    let localctx = new CodecExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 76, ClickHouseParser.RULE_codecExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 996;
	        this.match(ClickHouseParser.CODEC);
	        this.state = 997;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 998;
	        this.codecArgExpr();
	        this.state = 1003;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ClickHouseParser.COMMA) {
	            this.state = 999;
	            this.match(ClickHouseParser.COMMA);
	            this.state = 1000;
	            this.codecArgExpr();
	            this.state = 1005;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1006;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	codecArgExpr() {
	    let localctx = new CodecArgExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 78, ClickHouseParser.RULE_codecArgExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1008;
	        this.identifier();
	        this.state = 1014;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.LPAREN) {
	            this.state = 1009;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1011;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
	                this.state = 1010;
	                this.columnExprList();
	            }

	            this.state = 1013;
	            this.match(ClickHouseParser.RPAREN);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ttlExpr() {
	    let localctx = new TtlExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 80, ClickHouseParser.RULE_ttlExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1016;
	        this.columnExpr(0);
	        this.state = 1024;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
	        if(la_===1) {
	            this.state = 1017;
	            this.match(ClickHouseParser.DELETE);

	        } else if(la_===2) {
	            this.state = 1018;
	            this.match(ClickHouseParser.TO);
	            this.state = 1019;
	            this.match(ClickHouseParser.DISK);
	            this.state = 1020;
	            this.match(ClickHouseParser.STRING_LITERAL);

	        } else if(la_===3) {
	            this.state = 1021;
	            this.match(ClickHouseParser.TO);
	            this.state = 1022;
	            this.match(ClickHouseParser.VOLUME);
	            this.state = 1023;
	            this.match(ClickHouseParser.STRING_LITERAL);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	describeStmt() {
	    let localctx = new DescribeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 82, ClickHouseParser.RULE_describeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1026;
	        _la = this._input.LA(1);
	        if(!(_la===ClickHouseParser.DESC || _la===ClickHouseParser.DESCRIBE)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1028;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
	        if(la_===1) {
	            this.state = 1027;
	            this.match(ClickHouseParser.TABLE);

	        }
	        this.state = 1030;
	        this.tableExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dropStmt() {
	    let localctx = new DropStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 84, ClickHouseParser.RULE_dropStmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 1063;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new DropDatabaseStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1032;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.DETACH || _la===ClickHouseParser.DROP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1033;
	            this.match(ClickHouseParser.DATABASE);
	            this.state = 1036;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
	            if(la_===1) {
	                this.state = 1034;
	                this.match(ClickHouseParser.IF);
	                this.state = 1035;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 1038;
	            this.databaseIdentifier();
	            this.state = 1040;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ON) {
	                this.state = 1039;
	                this.clusterClause();
	            }

	            break;

	        case 2:
	            localctx = new DropTableStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1042;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.DETACH || _la===ClickHouseParser.DROP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1049;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ClickHouseParser.DICTIONARY:
	                this.state = 1043;
	                this.match(ClickHouseParser.DICTIONARY);
	                break;
	            case ClickHouseParser.TABLE:
	            case ClickHouseParser.TEMPORARY:
	                this.state = 1045;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.TEMPORARY) {
	                    this.state = 1044;
	                    this.match(ClickHouseParser.TEMPORARY);
	                }

	                this.state = 1047;
	                this.match(ClickHouseParser.TABLE);
	                break;
	            case ClickHouseParser.VIEW:
	                this.state = 1048;
	                this.match(ClickHouseParser.VIEW);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1053;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
	            if(la_===1) {
	                this.state = 1051;
	                this.match(ClickHouseParser.IF);
	                this.state = 1052;
	                this.match(ClickHouseParser.EXISTS);

	            }
	            this.state = 1055;
	            this.tableIdentifier();
	            this.state = 1057;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ON) {
	                this.state = 1056;
	                this.clusterClause();
	            }

	            this.state = 1061;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.NO) {
	                this.state = 1059;
	                this.match(ClickHouseParser.NO);
	                this.state = 1060;
	                this.match(ClickHouseParser.DELAY);
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	existsStmt() {
	    let localctx = new ExistsStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 86, ClickHouseParser.RULE_existsStmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 1078;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExistsDatabaseStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1065;
	            this.match(ClickHouseParser.EXISTS);
	            this.state = 1066;
	            this.match(ClickHouseParser.DATABASE);
	            this.state = 1067;
	            this.databaseIdentifier();
	            break;

	        case 2:
	            localctx = new ExistsTableStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1068;
	            this.match(ClickHouseParser.EXISTS);
	            this.state = 1075;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
	            if(la_===1) {
	                this.state = 1069;
	                this.match(ClickHouseParser.DICTIONARY);

	            } else if(la_===2) {
	                this.state = 1071;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.TEMPORARY) {
	                    this.state = 1070;
	                    this.match(ClickHouseParser.TEMPORARY);
	                }

	                this.state = 1073;
	                this.match(ClickHouseParser.TABLE);

	            } else if(la_===3) {
	                this.state = 1074;
	                this.match(ClickHouseParser.VIEW);

	            }
	            this.state = 1077;
	            this.tableIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	explainStmt() {
	    let localctx = new ExplainStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 88, ClickHouseParser.RULE_explainStmt);
	    try {
	        this.state = 1086;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ExplainASTStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1080;
	            this.match(ClickHouseParser.EXPLAIN);
	            this.state = 1081;
	            this.match(ClickHouseParser.AST);
	            this.state = 1082;
	            this.query();
	            break;

	        case 2:
	            localctx = new ExplainSyntaxStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1083;
	            this.match(ClickHouseParser.EXPLAIN);
	            this.state = 1084;
	            this.match(ClickHouseParser.SYNTAX);
	            this.state = 1085;
	            this.query();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	insertStmt() {
	    let localctx = new InsertStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 90, ClickHouseParser.RULE_insertStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1088;
	        this.match(ClickHouseParser.INSERT);
	        this.state = 1089;
	        this.match(ClickHouseParser.INTO);
	        this.state = 1091;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
	        if(la_===1) {
	            this.state = 1090;
	            this.match(ClickHouseParser.TABLE);

	        }
	        this.state = 1096;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1093;
	            this.tableIdentifier();
	            break;

	        case 2:
	            this.state = 1094;
	            this.match(ClickHouseParser.FUNCTION);
	            this.state = 1095;
	            this.tableFunctionExpr();
	            break;

	        }
	        this.state = 1099;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
	        if(la_===1) {
	            this.state = 1098;
	            this.columnsClause();

	        }
	        this.state = 1101;
	        this.dataClause();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnsClause() {
	    let localctx = new ColumnsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 92, ClickHouseParser.RULE_columnsClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1103;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 1104;
	        this.nestedIdentifier();
	        this.state = 1109;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ClickHouseParser.COMMA) {
	            this.state = 1105;
	            this.match(ClickHouseParser.COMMA);
	            this.state = 1106;
	            this.nestedIdentifier();
	            this.state = 1111;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1112;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	dataClause() {
	    let localctx = new DataClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 94, ClickHouseParser.RULE_dataClause);
	    var _la = 0; // Token type
	    try {
	        this.state = 1123;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.FORMAT:
	            localctx = new DataClauseFormatContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1114;
	            this.match(ClickHouseParser.FORMAT);
	            this.state = 1115;
	            this.identifier();
	            break;
	        case ClickHouseParser.VALUES:
	            localctx = new DataClauseValuesContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1116;
	            this.match(ClickHouseParser.VALUES);
	            break;
	        case ClickHouseParser.SELECT:
	        case ClickHouseParser.WITH:
	        case ClickHouseParser.LPAREN:
	            localctx = new DataClauseSelectContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1117;
	            this.selectUnionStmt();
	            this.state = 1119;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.SEMICOLON) {
	                this.state = 1118;
	                this.match(ClickHouseParser.SEMICOLON);
	            }

	            this.state = 1121;
	            this.match(ClickHouseParser.EOF);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	killStmt() {
	    let localctx = new KillStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 96, ClickHouseParser.RULE_killStmt);
	    var _la = 0; // Token type
	    try {
	        localctx = new KillMutationStmtContext(this, localctx);
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1125;
	        this.match(ClickHouseParser.KILL);
	        this.state = 1126;
	        this.match(ClickHouseParser.MUTATION);
	        this.state = 1128;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ON) {
	            this.state = 1127;
	            this.clusterClause();
	        }

	        this.state = 1130;
	        this.whereClause();
	        this.state = 1132;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ASYNC || _la===ClickHouseParser.SYNC || _la===ClickHouseParser.TEST) {
	            this.state = 1131;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.ASYNC || _la===ClickHouseParser.SYNC || _la===ClickHouseParser.TEST)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	optimizeStmt() {
	    let localctx = new OptimizeStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 98, ClickHouseParser.RULE_optimizeStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1134;
	        this.match(ClickHouseParser.OPTIMIZE);
	        this.state = 1135;
	        this.match(ClickHouseParser.TABLE);
	        this.state = 1136;
	        this.tableIdentifier();
	        this.state = 1138;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ON) {
	            this.state = 1137;
	            this.clusterClause();
	        }

	        this.state = 1141;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.PARTITION) {
	            this.state = 1140;
	            this.partitionClause();
	        }

	        this.state = 1144;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.FINAL) {
	            this.state = 1143;
	            this.match(ClickHouseParser.FINAL);
	        }

	        this.state = 1147;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.DEDUPLICATE) {
	            this.state = 1146;
	            this.match(ClickHouseParser.DEDUPLICATE);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	renameStmt() {
	    let localctx = new RenameStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 100, ClickHouseParser.RULE_renameStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1149;
	        this.match(ClickHouseParser.RENAME);
	        this.state = 1150;
	        this.match(ClickHouseParser.TABLE);
	        this.state = 1151;
	        this.tableIdentifier();
	        this.state = 1152;
	        this.match(ClickHouseParser.TO);
	        this.state = 1153;
	        this.tableIdentifier();
	        this.state = 1161;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ClickHouseParser.COMMA) {
	            this.state = 1154;
	            this.match(ClickHouseParser.COMMA);
	            this.state = 1155;
	            this.tableIdentifier();
	            this.state = 1156;
	            this.match(ClickHouseParser.TO);
	            this.state = 1157;
	            this.tableIdentifier();
	            this.state = 1163;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	        this.state = 1165;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ON) {
	            this.state = 1164;
	            this.clusterClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionSelectStmt() {
	    let localctx = new ProjectionSelectStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 102, ClickHouseParser.RULE_projectionSelectStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1167;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 1169;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.WITH) {
	            this.state = 1168;
	            this.withClause();
	        }

	        this.state = 1171;
	        this.match(ClickHouseParser.SELECT);
	        this.state = 1172;
	        this.columnExprList();
	        this.state = 1174;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.GROUP) {
	            this.state = 1173;
	            this.groupByClause();
	        }

	        this.state = 1177;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ORDER) {
	            this.state = 1176;
	            this.projectionOrderByClause();
	        }

	        this.state = 1179;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectUnionStmt() {
	    let localctx = new SelectUnionStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 104, ClickHouseParser.RULE_selectUnionStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1181;
	        this.selectStmtWithParens();
	        this.state = 1187;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ClickHouseParser.UNION) {
	            this.state = 1182;
	            this.match(ClickHouseParser.UNION);
	            this.state = 1183;
	            this.match(ClickHouseParser.ALL);
	            this.state = 1184;
	            this.selectStmtWithParens();
	            this.state = 1189;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStmtWithParens() {
	    let localctx = new SelectStmtWithParensContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 106, ClickHouseParser.RULE_selectStmtWithParens);
	    try {
	        this.state = 1195;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.SELECT:
	        case ClickHouseParser.WITH:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1190;
	            this.selectStmt();
	            break;
	        case ClickHouseParser.LPAREN:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1191;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1192;
	            this.selectUnionStmt();
	            this.state = 1193;
	            this.match(ClickHouseParser.RPAREN);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	selectStmt() {
	    let localctx = new SelectStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 108, ClickHouseParser.RULE_selectStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1198;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.WITH) {
	            this.state = 1197;
	            this.withClause();
	        }

	        this.state = 1200;
	        this.match(ClickHouseParser.SELECT);
	        this.state = 1202;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
	        if(la_===1) {
	            this.state = 1201;
	            this.match(ClickHouseParser.DISTINCT);

	        }
	        this.state = 1205;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
	        if(la_===1) {
	            this.state = 1204;
	            this.topClause();

	        }
	        this.state = 1207;
	        this.columnExprList();
	        this.state = 1209;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.FROM) {
	            this.state = 1208;
	            this.fromClause();
	        }

	        this.state = 1212;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ARRAY || _la===ClickHouseParser.INNER || _la===ClickHouseParser.LEFT) {
	            this.state = 1211;
	            this.arrayJoinClause();
	        }

	        this.state = 1215;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.WINDOW) {
	            this.state = 1214;
	            this.windowClause();
	        }

	        this.state = 1218;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.PREWHERE) {
	            this.state = 1217;
	            this.prewhereClause();
	        }

	        this.state = 1221;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.WHERE) {
	            this.state = 1220;
	            this.whereClause();
	        }

	        this.state = 1224;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.GROUP) {
	            this.state = 1223;
	            this.groupByClause();
	        }

	        this.state = 1228;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
	        if(la_===1) {
	            this.state = 1226;
	            this.match(ClickHouseParser.WITH);
	            this.state = 1227;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.CUBE || _la===ClickHouseParser.ROLLUP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1232;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
	        if(la_===1) {
	            this.state = 1230;
	            this.match(ClickHouseParser.WITH);
	            this.state = 1231;
	            this.match(ClickHouseParser.TOTALS);

	        }
	        this.state = 1235;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.HAVING) {
	            this.state = 1234;
	            this.havingClause();
	        }

	        this.state = 1238;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ORDER) {
	            this.state = 1237;
	            this.orderByClause();
	        }

	        this.state = 1241;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
	        if(la_===1) {
	            this.state = 1240;
	            this.limitByClause();

	        }
	        this.state = 1244;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.LIMIT) {
	            this.state = 1243;
	            this.limitClause();
	        }

	        this.state = 1247;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.SETTINGS) {
	            this.state = 1246;
	            this.settingsClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	withClause() {
	    let localctx = new WithClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 110, ClickHouseParser.RULE_withClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1249;
	        this.match(ClickHouseParser.WITH);
	        this.state = 1250;
	        this.columnExprList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	topClause() {
	    let localctx = new TopClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 112, ClickHouseParser.RULE_topClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1252;
	        this.match(ClickHouseParser.TOP);
	        this.state = 1253;
	        this.match(ClickHouseParser.DECIMAL_LITERAL);
	        this.state = 1256;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
	        if(la_===1) {
	            this.state = 1254;
	            this.match(ClickHouseParser.WITH);
	            this.state = 1255;
	            this.match(ClickHouseParser.TIES);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	fromClause() {
	    let localctx = new FromClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 114, ClickHouseParser.RULE_fromClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1258;
	        this.match(ClickHouseParser.FROM);
	        this.state = 1259;
	        this.joinExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	arrayJoinClause() {
	    let localctx = new ArrayJoinClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 116, ClickHouseParser.RULE_arrayJoinClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1262;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.INNER || _la===ClickHouseParser.LEFT) {
	            this.state = 1261;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.INNER || _la===ClickHouseParser.LEFT)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 1264;
	        this.match(ClickHouseParser.ARRAY);
	        this.state = 1265;
	        this.match(ClickHouseParser.JOIN);
	        this.state = 1266;
	        this.columnExprList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowClause() {
	    let localctx = new WindowClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 118, ClickHouseParser.RULE_windowClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1268;
	        this.match(ClickHouseParser.WINDOW);
	        this.state = 1269;
	        this.identifier();
	        this.state = 1270;
	        this.match(ClickHouseParser.AS);
	        this.state = 1271;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 1272;
	        this.windowExpr();
	        this.state = 1273;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	prewhereClause() {
	    let localctx = new PrewhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 120, ClickHouseParser.RULE_prewhereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1275;
	        this.match(ClickHouseParser.PREWHERE);
	        this.state = 1276;
	        this.columnExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	whereClause() {
	    let localctx = new WhereClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 122, ClickHouseParser.RULE_whereClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1278;
	        this.match(ClickHouseParser.WHERE);
	        this.state = 1279;
	        this.columnExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	groupByClause() {
	    let localctx = new GroupByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 124, ClickHouseParser.RULE_groupByClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1281;
	        this.match(ClickHouseParser.GROUP);
	        this.state = 1282;
	        this.match(ClickHouseParser.BY);
	        this.state = 1289;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1283;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.CUBE || _la===ClickHouseParser.ROLLUP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1284;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1285;
	            this.columnExprList();
	            this.state = 1286;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 2:
	            this.state = 1288;
	            this.columnExprList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	havingClause() {
	    let localctx = new HavingClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 126, ClickHouseParser.RULE_havingClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1291;
	        this.match(ClickHouseParser.HAVING);
	        this.state = 1292;
	        this.columnExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderByClause() {
	    let localctx = new OrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 128, ClickHouseParser.RULE_orderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1294;
	        this.match(ClickHouseParser.ORDER);
	        this.state = 1295;
	        this.match(ClickHouseParser.BY);
	        this.state = 1296;
	        this.orderExprList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	projectionOrderByClause() {
	    let localctx = new ProjectionOrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 130, ClickHouseParser.RULE_projectionOrderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1298;
	        this.match(ClickHouseParser.ORDER);
	        this.state = 1299;
	        this.match(ClickHouseParser.BY);
	        this.state = 1300;
	        this.columnExprList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitByClause() {
	    let localctx = new LimitByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 132, ClickHouseParser.RULE_limitByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1302;
	        this.match(ClickHouseParser.LIMIT);
	        this.state = 1303;
	        this.limitExpr();
	        this.state = 1304;
	        this.match(ClickHouseParser.BY);
	        this.state = 1305;
	        this.columnExprList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitClause() {
	    let localctx = new LimitClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 134, ClickHouseParser.RULE_limitClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1307;
	        this.match(ClickHouseParser.LIMIT);
	        this.state = 1308;
	        this.limitExpr();
	        this.state = 1311;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
	        if(la_===1) {
	            this.state = 1309;
	            this.match(ClickHouseParser.WITH);
	            this.state = 1310;
	            this.match(ClickHouseParser.TIES);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	settingsClause() {
	    let localctx = new SettingsClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 136, ClickHouseParser.RULE_settingsClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1313;
	        this.match(ClickHouseParser.SETTINGS);
	        this.state = 1314;
	        this.settingExprList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	joinExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new JoinExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 138;
	    this.enterRecursionRule(localctx, 138, ClickHouseParser.RULE_joinExpr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1328;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new JoinExprTableContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1317;
	            this.tableExpr(0);
	            this.state = 1319;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
	            if(la_===1) {
	                this.state = 1318;
	                this.match(ClickHouseParser.FINAL);

	            }
	            this.state = 1322;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
	            if(la_===1) {
	                this.state = 1321;
	                this.sampleClause();

	            }
	            break;

	        case 2:
	            localctx = new JoinExprParensContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1324;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1325;
	            this.joinExpr(0);
	            this.state = 1326;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1347;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,171,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1345;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new JoinExprCrossOpContext(this, new JoinExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_joinExpr);
	                    this.state = 1330;
	                    if (!( this.precpred(this._ctx, 3))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
	                    }
	                    this.state = 1331;
	                    this.joinOpCross();
	                    this.state = 1332;
	                    this.joinExpr(4);
	                    break;

	                case 2:
	                    localctx = new JoinExprOpContext(this, new JoinExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_joinExpr);
	                    this.state = 1334;
	                    if (!( this.precpred(this._ctx, 4))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
	                    }
	                    this.state = 1336;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===ClickHouseParser.GLOBAL || _la===ClickHouseParser.LOCAL) {
	                        this.state = 1335;
	                        _la = this._input.LA(1);
	                        if(!(_la===ClickHouseParser.GLOBAL || _la===ClickHouseParser.LOCAL)) {
	                        this._errHandler.recoverInline(this);
	                        }
	                        else {
	                        	this._errHandler.reportMatch(this);
	                            this.consume();
	                        }
	                    }

	                    this.state = 1339;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (ClickHouseParser.FULL - 68)) | (1 << (ClickHouseParser.INNER - 68)) | (1 << (ClickHouseParser.LEFT - 68)))) !== 0) || _la===ClickHouseParser.RIGHT || _la===ClickHouseParser.SEMI) {
	                        this.state = 1338;
	                        this.joinOp();
	                    }

	                    this.state = 1341;
	                    this.match(ClickHouseParser.JOIN);
	                    this.state = 1342;
	                    this.joinExpr(0);
	                    this.state = 1343;
	                    this.joinConstraintClause();
	                    break;

	                } 
	            }
	            this.state = 1349;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,171,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	joinOp() {
	    let localctx = new JoinOpContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 140, ClickHouseParser.RULE_joinOp);
	    var _la = 0; // Token type
	    try {
	        this.state = 1393;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new JoinOpInnerContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1359;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1351;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0)) {
	                    this.state = 1350;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 1353;
	                this.match(ClickHouseParser.INNER);
	                break;

	            case 2:
	                this.state = 1354;
	                this.match(ClickHouseParser.INNER);
	                this.state = 1356;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0)) {
	                    this.state = 1355;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                break;

	            case 3:
	                this.state = 1358;
	                _la = this._input.LA(1);
	                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0))) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                break;

	            }
	            break;

	        case 2:
	            localctx = new JoinOpLeftRightContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1375;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1362;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0) || _la===ClickHouseParser.SEMI) {
	                    this.state = 1361;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0) || _la===ClickHouseParser.SEMI)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 1364;
	                _la = this._input.LA(1);
	                if(!(_la===ClickHouseParser.LEFT || _la===ClickHouseParser.RIGHT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1366;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.OUTER) {
	                    this.state = 1365;
	                    this.match(ClickHouseParser.OUTER);
	                }

	                break;

	            case 2:
	                this.state = 1368;
	                _la = this._input.LA(1);
	                if(!(_la===ClickHouseParser.LEFT || _la===ClickHouseParser.RIGHT)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1370;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.OUTER) {
	                    this.state = 1369;
	                    this.match(ClickHouseParser.OUTER);
	                }

	                this.state = 1373;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0) || _la===ClickHouseParser.SEMI) {
	                    this.state = 1372;
	                    _la = this._input.LA(1);
	                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0) || _la===ClickHouseParser.SEMI)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                break;

	            }
	            break;

	        case 3:
	            localctx = new JoinOpFullContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1391;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
	            switch(la_) {
	            case 1:
	                this.state = 1378;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.ALL || _la===ClickHouseParser.ANY) {
	                    this.state = 1377;
	                    _la = this._input.LA(1);
	                    if(!(_la===ClickHouseParser.ALL || _la===ClickHouseParser.ANY)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                this.state = 1380;
	                this.match(ClickHouseParser.FULL);
	                this.state = 1382;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.OUTER) {
	                    this.state = 1381;
	                    this.match(ClickHouseParser.OUTER);
	                }

	                break;

	            case 2:
	                this.state = 1384;
	                this.match(ClickHouseParser.FULL);
	                this.state = 1386;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.OUTER) {
	                    this.state = 1385;
	                    this.match(ClickHouseParser.OUTER);
	                }

	                this.state = 1389;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.ALL || _la===ClickHouseParser.ANY) {
	                    this.state = 1388;
	                    _la = this._input.LA(1);
	                    if(!(_la===ClickHouseParser.ALL || _la===ClickHouseParser.ANY)) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                }

	                break;

	            }
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinOpCross() {
	    let localctx = new JoinOpCrossContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 142, ClickHouseParser.RULE_joinOpCross);
	    var _la = 0; // Token type
	    try {
	        this.state = 1401;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.CROSS:
	        case ClickHouseParser.GLOBAL:
	        case ClickHouseParser.LOCAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1396;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.GLOBAL || _la===ClickHouseParser.LOCAL) {
	                this.state = 1395;
	                _la = this._input.LA(1);
	                if(!(_la===ClickHouseParser.GLOBAL || _la===ClickHouseParser.LOCAL)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	            }

	            this.state = 1398;
	            this.match(ClickHouseParser.CROSS);
	            this.state = 1399;
	            this.match(ClickHouseParser.JOIN);
	            break;
	        case ClickHouseParser.COMMA:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1400;
	            this.match(ClickHouseParser.COMMA);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	joinConstraintClause() {
	    let localctx = new JoinConstraintClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 144, ClickHouseParser.RULE_joinConstraintClause);
	    try {
	        this.state = 1412;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1403;
	            this.match(ClickHouseParser.ON);
	            this.state = 1404;
	            this.columnExprList();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1405;
	            this.match(ClickHouseParser.USING);
	            this.state = 1406;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1407;
	            this.columnExprList();
	            this.state = 1408;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1410;
	            this.match(ClickHouseParser.USING);
	            this.state = 1411;
	            this.columnExprList();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	sampleClause() {
	    let localctx = new SampleClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 146, ClickHouseParser.RULE_sampleClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1414;
	        this.match(ClickHouseParser.SAMPLE);
	        this.state = 1415;
	        this.ratioExpr();
	        this.state = 1418;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
	        if(la_===1) {
	            this.state = 1416;
	            this.match(ClickHouseParser.OFFSET);
	            this.state = 1417;
	            this.ratioExpr();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	limitExpr() {
	    let localctx = new LimitExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 148, ClickHouseParser.RULE_limitExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1420;
	        this.columnExpr(0);
	        this.state = 1423;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.OFFSET || _la===ClickHouseParser.COMMA) {
	            this.state = 1421;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.OFFSET || _la===ClickHouseParser.COMMA)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1422;
	            this.columnExpr(0);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderExprList() {
	    let localctx = new OrderExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 150, ClickHouseParser.RULE_orderExprList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1425;
	        this.orderExpr();
	        this.state = 1430;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,191,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1426;
	                this.match(ClickHouseParser.COMMA);
	                this.state = 1427;
	                this.orderExpr(); 
	            }
	            this.state = 1432;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,191,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	orderExpr() {
	    let localctx = new OrderExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 152, ClickHouseParser.RULE_orderExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1433;
	        this.columnExpr(0);
	        this.state = 1435;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
	        if(la_===1) {
	            this.state = 1434;
	            _la = this._input.LA(1);
	            if(!(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (ClickHouseParser.ASCENDING - 11)) | (1 << (ClickHouseParser.DESC - 11)) | (1 << (ClickHouseParser.DESCENDING - 11)))) !== 0))) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1439;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
	        if(la_===1) {
	            this.state = 1437;
	            this.match(ClickHouseParser.NULLS);
	            this.state = 1438;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.FIRST || _la===ClickHouseParser.LAST)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }

	        }
	        this.state = 1443;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
	        if(la_===1) {
	            this.state = 1441;
	            this.match(ClickHouseParser.COLLATE);
	            this.state = 1442;
	            this.match(ClickHouseParser.STRING_LITERAL);

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	ratioExpr() {
	    let localctx = new RatioExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 154, ClickHouseParser.RULE_ratioExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1445;
	        this.numberLiteral();
	        this.state = 1448;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
	        if(la_===1) {
	            this.state = 1446;
	            this.match(ClickHouseParser.SLASH);
	            this.state = 1447;
	            this.numberLiteral();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	settingExprList() {
	    let localctx = new SettingExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 156, ClickHouseParser.RULE_settingExprList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1450;
	        this.settingExpr();
	        this.state = 1455;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,196,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1451;
	                this.match(ClickHouseParser.COMMA);
	                this.state = 1452;
	                this.settingExpr(); 
	            }
	            this.state = 1457;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,196,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	settingExpr() {
	    let localctx = new SettingExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 158, ClickHouseParser.RULE_settingExpr);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1458;
	        this.identifier();
	        this.state = 1459;
	        this.match(ClickHouseParser.EQ_SINGLE);
	        this.state = 1460;
	        this.literal();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	windowExpr() {
	    let localctx = new WindowExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 160, ClickHouseParser.RULE_windowExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1463;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.PARTITION) {
	            this.state = 1462;
	            this.winPartitionByClause();
	        }

	        this.state = 1466;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ORDER) {
	            this.state = 1465;
	            this.winOrderByClause();
	        }

	        this.state = 1469;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.RANGE || _la===ClickHouseParser.ROWS) {
	            this.state = 1468;
	            this.winFrameClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	winPartitionByClause() {
	    let localctx = new WinPartitionByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 162, ClickHouseParser.RULE_winPartitionByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1471;
	        this.match(ClickHouseParser.PARTITION);
	        this.state = 1472;
	        this.match(ClickHouseParser.BY);
	        this.state = 1473;
	        this.columnExprList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	winOrderByClause() {
	    let localctx = new WinOrderByClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 164, ClickHouseParser.RULE_winOrderByClause);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1475;
	        this.match(ClickHouseParser.ORDER);
	        this.state = 1476;
	        this.match(ClickHouseParser.BY);
	        this.state = 1477;
	        this.orderExprList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	winFrameClause() {
	    let localctx = new WinFrameClauseContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 166, ClickHouseParser.RULE_winFrameClause);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1479;
	        _la = this._input.LA(1);
	        if(!(_la===ClickHouseParser.RANGE || _la===ClickHouseParser.ROWS)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	        this.state = 1480;
	        this.winFrameExtend();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	winFrameExtend() {
	    let localctx = new WinFrameExtendContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 168, ClickHouseParser.RULE_winFrameExtend);
	    try {
	        this.state = 1488;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.CURRENT:
	        case ClickHouseParser.INF:
	        case ClickHouseParser.NAN_SQL:
	        case ClickHouseParser.UNBOUNDED:
	        case ClickHouseParser.FLOATING_LITERAL:
	        case ClickHouseParser.OCTAL_LITERAL:
	        case ClickHouseParser.DECIMAL_LITERAL:
	        case ClickHouseParser.HEXADECIMAL_LITERAL:
	        case ClickHouseParser.DASH:
	        case ClickHouseParser.DOT:
	        case ClickHouseParser.PLUS:
	            localctx = new FrameStartContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1482;
	            this.winFrameBound();
	            break;
	        case ClickHouseParser.BETWEEN:
	            localctx = new FrameBetweenContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1483;
	            this.match(ClickHouseParser.BETWEEN);
	            this.state = 1484;
	            this.winFrameBound();
	            this.state = 1485;
	            this.match(ClickHouseParser.AND);
	            this.state = 1486;
	            this.winFrameBound();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	winFrameBound() {
	    let localctx = new WinFrameBoundContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 170, ClickHouseParser.RULE_winFrameBound);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1502;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1490;
	            this.match(ClickHouseParser.CURRENT);
	            this.state = 1491;
	            this.match(ClickHouseParser.ROW);
	            break;

	        case 2:
	            this.state = 1492;
	            this.match(ClickHouseParser.UNBOUNDED);
	            this.state = 1493;
	            this.match(ClickHouseParser.PRECEDING);
	            break;

	        case 3:
	            this.state = 1494;
	            this.match(ClickHouseParser.UNBOUNDED);
	            this.state = 1495;
	            this.match(ClickHouseParser.FOLLOWING);
	            break;

	        case 4:
	            this.state = 1496;
	            this.numberLiteral();
	            this.state = 1497;
	            this.match(ClickHouseParser.PRECEDING);
	            break;

	        case 5:
	            this.state = 1499;
	            this.numberLiteral();
	            this.state = 1500;
	            this.match(ClickHouseParser.FOLLOWING);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	setStmt() {
	    let localctx = new SetStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 172, ClickHouseParser.RULE_setStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1504;
	        this.match(ClickHouseParser.SET);
	        this.state = 1505;
	        this.settingExprList();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	showStmt() {
	    let localctx = new ShowStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 174, ClickHouseParser.RULE_showStmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 1549;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ShowCreateDatabaseStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1507;
	            this.match(ClickHouseParser.SHOW);
	            this.state = 1508;
	            this.match(ClickHouseParser.CREATE);
	            this.state = 1509;
	            this.match(ClickHouseParser.DATABASE);
	            this.state = 1510;
	            this.databaseIdentifier();
	            break;

	        case 2:
	            localctx = new ShowCreateDictionaryStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1511;
	            this.match(ClickHouseParser.SHOW);
	            this.state = 1512;
	            this.match(ClickHouseParser.CREATE);
	            this.state = 1513;
	            this.match(ClickHouseParser.DICTIONARY);
	            this.state = 1514;
	            this.tableIdentifier();
	            break;

	        case 3:
	            localctx = new ShowCreateTableStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1515;
	            this.match(ClickHouseParser.SHOW);
	            this.state = 1516;
	            this.match(ClickHouseParser.CREATE);
	            this.state = 1518;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
	            if(la_===1) {
	                this.state = 1517;
	                this.match(ClickHouseParser.TEMPORARY);

	            }
	            this.state = 1521;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
	            if(la_===1) {
	                this.state = 1520;
	                this.match(ClickHouseParser.TABLE);

	            }
	            this.state = 1523;
	            this.tableIdentifier();
	            break;

	        case 4:
	            localctx = new ShowDatabasesStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1524;
	            this.match(ClickHouseParser.SHOW);
	            this.state = 1525;
	            this.match(ClickHouseParser.DATABASES);
	            break;

	        case 5:
	            localctx = new ShowDictionariesStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1526;
	            this.match(ClickHouseParser.SHOW);
	            this.state = 1527;
	            this.match(ClickHouseParser.DICTIONARIES);
	            this.state = 1530;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.FROM) {
	                this.state = 1528;
	                this.match(ClickHouseParser.FROM);
	                this.state = 1529;
	                this.databaseIdentifier();
	            }

	            break;

	        case 6:
	            localctx = new ShowTablesStmtContext(this, localctx);
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1532;
	            this.match(ClickHouseParser.SHOW);
	            this.state = 1534;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.TEMPORARY) {
	                this.state = 1533;
	                this.match(ClickHouseParser.TEMPORARY);
	            }

	            this.state = 1536;
	            this.match(ClickHouseParser.TABLES);
	            this.state = 1539;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.FROM || _la===ClickHouseParser.IN) {
	                this.state = 1537;
	                _la = this._input.LA(1);
	                if(!(_la===ClickHouseParser.FROM || _la===ClickHouseParser.IN)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }
	                this.state = 1538;
	                this.databaseIdentifier();
	            }

	            this.state = 1544;
	            this._errHandler.sync(this);
	            switch (this._input.LA(1)) {
	            case ClickHouseParser.LIKE:
	            	this.state = 1541;
	            	this.match(ClickHouseParser.LIKE);
	            	this.state = 1542;
	            	this.match(ClickHouseParser.STRING_LITERAL);
	            	break;
	            case ClickHouseParser.WHERE:
	            	this.state = 1543;
	            	this.whereClause();
	            	break;
	            case ClickHouseParser.EOF:
	            case ClickHouseParser.ALTER:
	            case ClickHouseParser.ATTACH:
	            case ClickHouseParser.CHECK:
	            case ClickHouseParser.CREATE:
	            case ClickHouseParser.DESC:
	            case ClickHouseParser.DESCRIBE:
	            case ClickHouseParser.DETACH:
	            case ClickHouseParser.DROP:
	            case ClickHouseParser.EXISTS:
	            case ClickHouseParser.EXPLAIN:
	            case ClickHouseParser.FORMAT:
	            case ClickHouseParser.INSERT:
	            case ClickHouseParser.INTO:
	            case ClickHouseParser.KILL:
	            case ClickHouseParser.LIMIT:
	            case ClickHouseParser.OPTIMIZE:
	            case ClickHouseParser.RENAME:
	            case ClickHouseParser.REPLACE:
	            case ClickHouseParser.SELECT:
	            case ClickHouseParser.SET:
	            case ClickHouseParser.SHOW:
	            case ClickHouseParser.SYSTEM:
	            case ClickHouseParser.TRUNCATE:
	            case ClickHouseParser.USE:
	            case ClickHouseParser.WATCH:
	            case ClickHouseParser.WITH:
	            case ClickHouseParser.LPAREN:
	            case ClickHouseParser.SEMICOLON:
	            	break;
	            default:
	            	break;
	            }
	            this.state = 1547;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.LIMIT) {
	                this.state = 1546;
	                this.limitClause();
	            }

	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	systemStmt() {
	    let localctx = new SystemStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 176, ClickHouseParser.RULE_systemStmt);
	    var _la = 0; // Token type
	    try {
	        this.state = 1585;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1551;
	            this.match(ClickHouseParser.SYSTEM);
	            this.state = 1552;
	            this.match(ClickHouseParser.FLUSH);
	            this.state = 1553;
	            this.match(ClickHouseParser.DISTRIBUTED);
	            this.state = 1554;
	            this.tableIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1555;
	            this.match(ClickHouseParser.SYSTEM);
	            this.state = 1556;
	            this.match(ClickHouseParser.FLUSH);
	            this.state = 1557;
	            this.match(ClickHouseParser.LOGS);
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1558;
	            this.match(ClickHouseParser.SYSTEM);
	            this.state = 1559;
	            this.match(ClickHouseParser.RELOAD);
	            this.state = 1560;
	            this.match(ClickHouseParser.DICTIONARIES);
	            break;

	        case 4:
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1561;
	            this.match(ClickHouseParser.SYSTEM);
	            this.state = 1562;
	            this.match(ClickHouseParser.RELOAD);
	            this.state = 1563;
	            this.match(ClickHouseParser.DICTIONARY);
	            this.state = 1564;
	            this.tableIdentifier();
	            break;

	        case 5:
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1565;
	            this.match(ClickHouseParser.SYSTEM);
	            this.state = 1566;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.START || _la===ClickHouseParser.STOP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1574;
	            this._errHandler.sync(this);
	            switch(this._input.LA(1)) {
	            case ClickHouseParser.DISTRIBUTED:
	                this.state = 1567;
	                this.match(ClickHouseParser.DISTRIBUTED);
	                this.state = 1568;
	                this.match(ClickHouseParser.SENDS);
	                break;
	            case ClickHouseParser.FETCHES:
	                this.state = 1569;
	                this.match(ClickHouseParser.FETCHES);
	                break;
	            case ClickHouseParser.MERGES:
	            case ClickHouseParser.TTL:
	                this.state = 1571;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if(_la===ClickHouseParser.TTL) {
	                    this.state = 1570;
	                    this.match(ClickHouseParser.TTL);
	                }

	                this.state = 1573;
	                this.match(ClickHouseParser.MERGES);
	                break;
	            default:
	                throw new antlr4.error.NoViableAltException(this);
	            }
	            this.state = 1576;
	            this.tableIdentifier();
	            break;

	        case 6:
	            this.enterOuterAlt(localctx, 6);
	            this.state = 1577;
	            this.match(ClickHouseParser.SYSTEM);
	            this.state = 1578;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.START || _la===ClickHouseParser.STOP)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1579;
	            this.match(ClickHouseParser.REPLICATED);
	            this.state = 1580;
	            this.match(ClickHouseParser.SENDS);
	            break;

	        case 7:
	            this.enterOuterAlt(localctx, 7);
	            this.state = 1581;
	            this.match(ClickHouseParser.SYSTEM);
	            this.state = 1582;
	            this.match(ClickHouseParser.SYNC);
	            this.state = 1583;
	            this.match(ClickHouseParser.REPLICA);
	            this.state = 1584;
	            this.tableIdentifier();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	truncateStmt() {
	    let localctx = new TruncateStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 178, ClickHouseParser.RULE_truncateStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1587;
	        this.match(ClickHouseParser.TRUNCATE);
	        this.state = 1589;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
	        if(la_===1) {
	            this.state = 1588;
	            this.match(ClickHouseParser.TEMPORARY);

	        }
	        this.state = 1592;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
	        if(la_===1) {
	            this.state = 1591;
	            this.match(ClickHouseParser.TABLE);

	        }
	        this.state = 1596;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
	        if(la_===1) {
	            this.state = 1594;
	            this.match(ClickHouseParser.IF);
	            this.state = 1595;
	            this.match(ClickHouseParser.EXISTS);

	        }
	        this.state = 1598;
	        this.tableIdentifier();
	        this.state = 1600;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.ON) {
	            this.state = 1599;
	            this.clusterClause();
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	useStmt() {
	    let localctx = new UseStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 180, ClickHouseParser.RULE_useStmt);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1602;
	        this.match(ClickHouseParser.USE);
	        this.state = 1603;
	        this.databaseIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	watchStmt() {
	    let localctx = new WatchStmtContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 182, ClickHouseParser.RULE_watchStmt);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1605;
	        this.match(ClickHouseParser.WATCH);
	        this.state = 1606;
	        this.tableIdentifier();
	        this.state = 1608;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.EVENTS) {
	            this.state = 1607;
	            this.match(ClickHouseParser.EVENTS);
	        }

	        this.state = 1612;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.LIMIT) {
	            this.state = 1610;
	            this.match(ClickHouseParser.LIMIT);
	            this.state = 1611;
	            this.match(ClickHouseParser.DECIMAL_LITERAL);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnTypeExpr() {
	    let localctx = new ColumnTypeExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 184, ClickHouseParser.RULE_columnTypeExpr);
	    var _la = 0; // Token type
	    try {
	        this.state = 1661;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ColumnTypeExprSimpleContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1614;
	            this.identifier();
	            break;

	        case 2:
	            localctx = new ColumnTypeExprNestedContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1615;
	            this.identifier();
	            this.state = 1616;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1617;
	            this.identifier();
	            this.state = 1618;
	            this.columnTypeExpr();
	            this.state = 1625;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ClickHouseParser.COMMA) {
	                this.state = 1619;
	                this.match(ClickHouseParser.COMMA);
	                this.state = 1620;
	                this.identifier();
	                this.state = 1621;
	                this.columnTypeExpr();
	                this.state = 1627;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1628;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 3:
	            localctx = new ColumnTypeExprEnumContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1630;
	            this.identifier();
	            this.state = 1631;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1632;
	            this.enumValue();
	            this.state = 1637;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ClickHouseParser.COMMA) {
	                this.state = 1633;
	                this.match(ClickHouseParser.COMMA);
	                this.state = 1634;
	                this.enumValue();
	                this.state = 1639;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1640;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 4:
	            localctx = new ColumnTypeExprComplexContext(this, localctx);
	            this.enterOuterAlt(localctx, 4);
	            this.state = 1642;
	            this.identifier();
	            this.state = 1643;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1644;
	            this.columnTypeExpr();
	            this.state = 1649;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ClickHouseParser.COMMA) {
	                this.state = 1645;
	                this.match(ClickHouseParser.COMMA);
	                this.state = 1646;
	                this.columnTypeExpr();
	                this.state = 1651;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1652;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 5:
	            localctx = new ColumnTypeExprParamContext(this, localctx);
	            this.enterOuterAlt(localctx, 5);
	            this.state = 1654;
	            this.identifier();
	            this.state = 1655;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1657;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
	                this.state = 1656;
	                this.columnExprList();
	            }

	            this.state = 1659;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnExprList() {
	    let localctx = new ColumnExprListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 186, ClickHouseParser.RULE_columnExprList);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1663;
	        this.columnsExpr();
	        this.state = 1668;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                this.state = 1664;
	                this.match(ClickHouseParser.COMMA);
	                this.state = 1665;
	                this.columnsExpr(); 
	            }
	            this.state = 1670;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
	        }

	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnsExpr() {
	    let localctx = new ColumnsExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 188, ClickHouseParser.RULE_columnsExpr);
	    var _la = 0; // Token type
	    try {
	        this.state = 1682;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ColumnsExprAsteriskContext(this, localctx);
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1674;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ClickHouseParser.DATABASES - 34)) | (1 << (ClickHouseParser.DATE - 34)) | (1 << (ClickHouseParser.DAY - 34)) | (1 << (ClickHouseParser.DEDUPLICATE - 34)) | (1 << (ClickHouseParser.DEFAULT - 34)) | (1 << (ClickHouseParser.DELAY - 34)) | (1 << (ClickHouseParser.DELETE - 34)) | (1 << (ClickHouseParser.DESC - 34)) | (1 << (ClickHouseParser.DESCENDING - 34)) | (1 << (ClickHouseParser.DESCRIBE - 34)) | (1 << (ClickHouseParser.DETACH - 34)) | (1 << (ClickHouseParser.DICTIONARIES - 34)) | (1 << (ClickHouseParser.DICTIONARY - 34)) | (1 << (ClickHouseParser.DISK - 34)) | (1 << (ClickHouseParser.DISTINCT - 34)) | (1 << (ClickHouseParser.DISTRIBUTED - 34)) | (1 << (ClickHouseParser.DROP - 34)) | (1 << (ClickHouseParser.ELSE - 34)) | (1 << (ClickHouseParser.END - 34)) | (1 << (ClickHouseParser.ENGINE - 34)) | (1 << (ClickHouseParser.EVENTS - 34)) | (1 << (ClickHouseParser.EXISTS - 34)) | (1 << (ClickHouseParser.EXPLAIN - 34)) | (1 << (ClickHouseParser.EXPRESSION - 34)) | (1 << (ClickHouseParser.EXTRACT - 34)) | (1 << (ClickHouseParser.FETCHES - 34)) | (1 << (ClickHouseParser.FINAL - 34)) | (1 << (ClickHouseParser.FIRST - 34)) | (1 << (ClickHouseParser.FLUSH - 34)) | (1 << (ClickHouseParser.FOLLOWING - 34)) | (1 << (ClickHouseParser.FOR - 34)) | (1 << (ClickHouseParser.FORMAT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ClickHouseParser.LIMIT - 98)) | (1 << (ClickHouseParser.LIVE - 98)) | (1 << (ClickHouseParser.LOCAL - 98)) | (1 << (ClickHouseParser.LOGS - 98)) | (1 << (ClickHouseParser.MATERIALIZE - 98)) | (1 << (ClickHouseParser.MATERIALIZED - 98)) | (1 << (ClickHouseParser.MAX - 98)) | (1 << (ClickHouseParser.MERGES - 98)) | (1 << (ClickHouseParser.MIN - 98)) | (1 << (ClickHouseParser.MINUTE - 98)) | (1 << (ClickHouseParser.MODIFY - 98)) | (1 << (ClickHouseParser.MONTH - 98)) | (1 << (ClickHouseParser.MOVE - 98)) | (1 << (ClickHouseParser.MUTATION - 98)) | (1 << (ClickHouseParser.NO - 98)) | (1 << (ClickHouseParser.NOT - 98)) | (1 << (ClickHouseParser.NULLS - 98)) | (1 << (ClickHouseParser.OFFSET - 98)) | (1 << (ClickHouseParser.ON - 98)) | (1 << (ClickHouseParser.OPTIMIZE - 98)) | (1 << (ClickHouseParser.OR - 98)) | (1 << (ClickHouseParser.ORDER - 98)) | (1 << (ClickHouseParser.OUTER - 98)) | (1 << (ClickHouseParser.OUTFILE - 98)) | (1 << (ClickHouseParser.OVER - 98)) | (1 << (ClickHouseParser.PARTITION - 98)) | (1 << (ClickHouseParser.POPULATE - 98)) | (1 << (ClickHouseParser.PRECEDING - 98)) | (1 << (ClickHouseParser.PREWHERE - 98)) | (1 << (ClickHouseParser.PRIMARY - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (ClickHouseParser.TIES - 163)) | (1 << (ClickHouseParser.TIMEOUT - 163)) | (1 << (ClickHouseParser.TIMESTAMP - 163)) | (1 << (ClickHouseParser.TO - 163)) | (1 << (ClickHouseParser.TOP - 163)) | (1 << (ClickHouseParser.TOTALS - 163)) | (1 << (ClickHouseParser.TRAILING - 163)) | (1 << (ClickHouseParser.TRIM - 163)) | (1 << (ClickHouseParser.TRUNCATE - 163)) | (1 << (ClickHouseParser.TTL - 163)) | (1 << (ClickHouseParser.TYPE - 163)) | (1 << (ClickHouseParser.UNBOUNDED - 163)) | (1 << (ClickHouseParser.UNION - 163)) | (1 << (ClickHouseParser.UPDATE - 163)) | (1 << (ClickHouseParser.USE - 163)) | (1 << (ClickHouseParser.USING - 163)) | (1 << (ClickHouseParser.UUID - 163)) | (1 << (ClickHouseParser.VALUES - 163)) | (1 << (ClickHouseParser.VIEW - 163)) | (1 << (ClickHouseParser.VOLUME - 163)) | (1 << (ClickHouseParser.WATCH - 163)) | (1 << (ClickHouseParser.WEEK - 163)) | (1 << (ClickHouseParser.WHEN - 163)) | (1 << (ClickHouseParser.WHERE - 163)) | (1 << (ClickHouseParser.WINDOW - 163)) | (1 << (ClickHouseParser.WITH - 163)) | (1 << (ClickHouseParser.YEAR - 163)) | (1 << (ClickHouseParser.JSON_FALSE - 163)) | (1 << (ClickHouseParser.JSON_TRUE - 163)) | (1 << (ClickHouseParser.IDENTIFIER - 163)))) !== 0)) {
	                this.state = 1671;
	                this.tableIdentifier();
	                this.state = 1672;
	                this.match(ClickHouseParser.DOT);
	            }

	            this.state = 1676;
	            this.match(ClickHouseParser.ASTERISK);
	            break;

	        case 2:
	            localctx = new ColumnsExprSubqueryContext(this, localctx);
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1677;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1678;
	            this.selectUnionStmt();
	            this.state = 1679;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 3:
	            localctx = new ColumnsExprColumnContext(this, localctx);
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1681;
	            this.columnExpr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	columnExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new ColumnExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 190;
	    this.enterRecursionRule(localctx, 190, ClickHouseParser.RULE_columnExpr, _p);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1813;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new ColumnExprCaseContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1685;
	            this.match(ClickHouseParser.CASE);
	            this.state = 1687;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
	            if(la_===1) {
	                this.state = 1686;
	                this.columnExpr(0);

	            }
	            this.state = 1694; 
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            do {
	                this.state = 1689;
	                this.match(ClickHouseParser.WHEN);
	                this.state = 1690;
	                this.columnExpr(0);
	                this.state = 1691;
	                this.match(ClickHouseParser.THEN);
	                this.state = 1692;
	                this.columnExpr(0);
	                this.state = 1696; 
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            } while(_la===ClickHouseParser.WHEN);
	            this.state = 1700;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.ELSE) {
	                this.state = 1698;
	                this.match(ClickHouseParser.ELSE);
	                this.state = 1699;
	                this.columnExpr(0);
	            }

	            this.state = 1702;
	            this.match(ClickHouseParser.END);
	            break;

	        case 2:
	            localctx = new ColumnExprCastContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1704;
	            this.match(ClickHouseParser.CAST);
	            this.state = 1705;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1706;
	            this.columnExpr(0);
	            this.state = 1707;
	            this.match(ClickHouseParser.AS);
	            this.state = 1708;
	            this.columnTypeExpr();
	            this.state = 1709;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 3:
	            localctx = new ColumnExprDateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1711;
	            this.match(ClickHouseParser.DATE);
	            this.state = 1712;
	            this.match(ClickHouseParser.STRING_LITERAL);
	            break;

	        case 4:
	            localctx = new ColumnExprExtractContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1713;
	            this.match(ClickHouseParser.EXTRACT);
	            this.state = 1714;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1715;
	            this.interval();
	            this.state = 1716;
	            this.match(ClickHouseParser.FROM);
	            this.state = 1717;
	            this.columnExpr(0);
	            this.state = 1718;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 5:
	            localctx = new ColumnExprIntervalContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1720;
	            this.match(ClickHouseParser.INTERVAL);
	            this.state = 1721;
	            this.columnExpr(0);
	            this.state = 1722;
	            this.interval();
	            break;

	        case 6:
	            localctx = new ColumnExprSubstringContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1724;
	            this.match(ClickHouseParser.SUBSTRING);
	            this.state = 1725;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1726;
	            this.columnExpr(0);
	            this.state = 1727;
	            this.match(ClickHouseParser.FROM);
	            this.state = 1728;
	            this.columnExpr(0);
	            this.state = 1731;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(_la===ClickHouseParser.FOR) {
	                this.state = 1729;
	                this.match(ClickHouseParser.FOR);
	                this.state = 1730;
	                this.columnExpr(0);
	            }

	            this.state = 1733;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 7:
	            localctx = new ColumnExprTimestampContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1735;
	            this.match(ClickHouseParser.TIMESTAMP);
	            this.state = 1736;
	            this.match(ClickHouseParser.STRING_LITERAL);
	            break;

	        case 8:
	            localctx = new ColumnExprTrimContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1737;
	            this.match(ClickHouseParser.TRIM);
	            this.state = 1738;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1739;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.BOTH || _la===ClickHouseParser.LEADING || _la===ClickHouseParser.TRAILING)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            this.state = 1740;
	            this.match(ClickHouseParser.STRING_LITERAL);
	            this.state = 1741;
	            this.match(ClickHouseParser.FROM);
	            this.state = 1742;
	            this.columnExpr(0);
	            this.state = 1743;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 9:
	            localctx = new ColumnExprWinFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1745;
	            this.identifier();

	            this.state = 1746;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1748;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
	                this.state = 1747;
	                this.columnExprList();
	            }

	            this.state = 1750;
	            this.match(ClickHouseParser.RPAREN);
	            this.state = 1752;
	            this.match(ClickHouseParser.OVER);
	            this.state = 1753;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1754;
	            this.windowExpr();
	            this.state = 1755;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 10:
	            localctx = new ColumnExprWinFunctionTargetContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1757;
	            this.identifier();

	            this.state = 1758;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1760;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
	                this.state = 1759;
	                this.columnExprList();
	            }

	            this.state = 1762;
	            this.match(ClickHouseParser.RPAREN);
	            this.state = 1764;
	            this.match(ClickHouseParser.OVER);
	            this.state = 1765;
	            this.identifier();
	            break;

	        case 11:
	            localctx = new ColumnExprFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1767;
	            this.identifier();
	            this.state = 1773;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
	            if(la_===1) {
	                this.state = 1768;
	                this.match(ClickHouseParser.LPAREN);
	                this.state = 1770;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
	                    this.state = 1769;
	                    this.columnExprList();
	                }

	                this.state = 1772;
	                this.match(ClickHouseParser.RPAREN);

	            }
	            this.state = 1775;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1777;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
	            if(la_===1) {
	                this.state = 1776;
	                this.match(ClickHouseParser.DISTINCT);

	            }
	            this.state = 1780;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
	                this.state = 1779;
	                this.columnArgList();
	            }

	            this.state = 1782;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 12:
	            localctx = new ColumnExprLiteralContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1784;
	            this.literal();
	            break;

	        case 13:
	            localctx = new ColumnExprNegateContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1785;
	            this.match(ClickHouseParser.DASH);
	            this.state = 1786;
	            this.columnExpr(17);
	            break;

	        case 14:
	            localctx = new ColumnExprNotContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1787;
	            this.match(ClickHouseParser.NOT);
	            this.state = 1788;
	            this.columnExpr(12);
	            break;

	        case 15:
	            localctx = new ColumnExprAsteriskContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1792;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ClickHouseParser.DATABASES - 34)) | (1 << (ClickHouseParser.DATE - 34)) | (1 << (ClickHouseParser.DAY - 34)) | (1 << (ClickHouseParser.DEDUPLICATE - 34)) | (1 << (ClickHouseParser.DEFAULT - 34)) | (1 << (ClickHouseParser.DELAY - 34)) | (1 << (ClickHouseParser.DELETE - 34)) | (1 << (ClickHouseParser.DESC - 34)) | (1 << (ClickHouseParser.DESCENDING - 34)) | (1 << (ClickHouseParser.DESCRIBE - 34)) | (1 << (ClickHouseParser.DETACH - 34)) | (1 << (ClickHouseParser.DICTIONARIES - 34)) | (1 << (ClickHouseParser.DICTIONARY - 34)) | (1 << (ClickHouseParser.DISK - 34)) | (1 << (ClickHouseParser.DISTINCT - 34)) | (1 << (ClickHouseParser.DISTRIBUTED - 34)) | (1 << (ClickHouseParser.DROP - 34)) | (1 << (ClickHouseParser.ELSE - 34)) | (1 << (ClickHouseParser.END - 34)) | (1 << (ClickHouseParser.ENGINE - 34)) | (1 << (ClickHouseParser.EVENTS - 34)) | (1 << (ClickHouseParser.EXISTS - 34)) | (1 << (ClickHouseParser.EXPLAIN - 34)) | (1 << (ClickHouseParser.EXPRESSION - 34)) | (1 << (ClickHouseParser.EXTRACT - 34)) | (1 << (ClickHouseParser.FETCHES - 34)) | (1 << (ClickHouseParser.FINAL - 34)) | (1 << (ClickHouseParser.FIRST - 34)) | (1 << (ClickHouseParser.FLUSH - 34)) | (1 << (ClickHouseParser.FOLLOWING - 34)) | (1 << (ClickHouseParser.FOR - 34)) | (1 << (ClickHouseParser.FORMAT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ClickHouseParser.LIMIT - 98)) | (1 << (ClickHouseParser.LIVE - 98)) | (1 << (ClickHouseParser.LOCAL - 98)) | (1 << (ClickHouseParser.LOGS - 98)) | (1 << (ClickHouseParser.MATERIALIZE - 98)) | (1 << (ClickHouseParser.MATERIALIZED - 98)) | (1 << (ClickHouseParser.MAX - 98)) | (1 << (ClickHouseParser.MERGES - 98)) | (1 << (ClickHouseParser.MIN - 98)) | (1 << (ClickHouseParser.MINUTE - 98)) | (1 << (ClickHouseParser.MODIFY - 98)) | (1 << (ClickHouseParser.MONTH - 98)) | (1 << (ClickHouseParser.MOVE - 98)) | (1 << (ClickHouseParser.MUTATION - 98)) | (1 << (ClickHouseParser.NO - 98)) | (1 << (ClickHouseParser.NOT - 98)) | (1 << (ClickHouseParser.NULLS - 98)) | (1 << (ClickHouseParser.OFFSET - 98)) | (1 << (ClickHouseParser.ON - 98)) | (1 << (ClickHouseParser.OPTIMIZE - 98)) | (1 << (ClickHouseParser.OR - 98)) | (1 << (ClickHouseParser.ORDER - 98)) | (1 << (ClickHouseParser.OUTER - 98)) | (1 << (ClickHouseParser.OUTFILE - 98)) | (1 << (ClickHouseParser.OVER - 98)) | (1 << (ClickHouseParser.PARTITION - 98)) | (1 << (ClickHouseParser.POPULATE - 98)) | (1 << (ClickHouseParser.PRECEDING - 98)) | (1 << (ClickHouseParser.PREWHERE - 98)) | (1 << (ClickHouseParser.PRIMARY - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (ClickHouseParser.TIES - 163)) | (1 << (ClickHouseParser.TIMEOUT - 163)) | (1 << (ClickHouseParser.TIMESTAMP - 163)) | (1 << (ClickHouseParser.TO - 163)) | (1 << (ClickHouseParser.TOP - 163)) | (1 << (ClickHouseParser.TOTALS - 163)) | (1 << (ClickHouseParser.TRAILING - 163)) | (1 << (ClickHouseParser.TRIM - 163)) | (1 << (ClickHouseParser.TRUNCATE - 163)) | (1 << (ClickHouseParser.TTL - 163)) | (1 << (ClickHouseParser.TYPE - 163)) | (1 << (ClickHouseParser.UNBOUNDED - 163)) | (1 << (ClickHouseParser.UNION - 163)) | (1 << (ClickHouseParser.UPDATE - 163)) | (1 << (ClickHouseParser.USE - 163)) | (1 << (ClickHouseParser.USING - 163)) | (1 << (ClickHouseParser.UUID - 163)) | (1 << (ClickHouseParser.VALUES - 163)) | (1 << (ClickHouseParser.VIEW - 163)) | (1 << (ClickHouseParser.VOLUME - 163)) | (1 << (ClickHouseParser.WATCH - 163)) | (1 << (ClickHouseParser.WEEK - 163)) | (1 << (ClickHouseParser.WHEN - 163)) | (1 << (ClickHouseParser.WHERE - 163)) | (1 << (ClickHouseParser.WINDOW - 163)) | (1 << (ClickHouseParser.WITH - 163)) | (1 << (ClickHouseParser.YEAR - 163)) | (1 << (ClickHouseParser.JSON_FALSE - 163)) | (1 << (ClickHouseParser.JSON_TRUE - 163)) | (1 << (ClickHouseParser.IDENTIFIER - 163)))) !== 0)) {
	                this.state = 1789;
	                this.tableIdentifier();
	                this.state = 1790;
	                this.match(ClickHouseParser.DOT);
	            }

	            this.state = 1794;
	            this.match(ClickHouseParser.ASTERISK);
	            break;

	        case 16:
	            localctx = new ColumnExprSubqueryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1795;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1796;
	            this.selectUnionStmt();
	            this.state = 1797;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 17:
	            localctx = new ColumnExprParensContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1799;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1800;
	            this.columnExpr(0);
	            this.state = 1801;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 18:
	            localctx = new ColumnExprTupleContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1803;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1804;
	            this.columnExprList();
	            this.state = 1805;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        case 19:
	            localctx = new ColumnExprArrayContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1807;
	            this.match(ClickHouseParser.LBRACKET);
	            this.state = 1809;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
	                this.state = 1808;
	                this.columnExprList();
	            }

	            this.state = 1811;
	            this.match(ClickHouseParser.RBRACKET);
	            break;

	        case 20:
	            localctx = new ColumnExprIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1812;
	            this.columnIdentifier();
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1886;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,248,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                this.state = 1884;
	                this._errHandler.sync(this);
	                var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
	                switch(la_) {
	                case 1:
	                    localctx = new ColumnExprPrecedence1Context(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1815;
	                    if (!( this.precpred(this._ctx, 16))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
	                    }
	                    this.state = 1816;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (ClickHouseParser.ASTERISK - 199)) | (1 << (ClickHouseParser.PERCENT - 199)) | (1 << (ClickHouseParser.SLASH - 199)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1817;
	                    this.columnExpr(17);
	                    break;

	                case 2:
	                    localctx = new ColumnExprPrecedence2Context(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1818;
	                    if (!( this.precpred(this._ctx, 15))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
	                    }
	                    this.state = 1819;
	                    _la = this._input.LA(1);
	                    if(!(((((_la - 204)) & ~0x1f) == 0 && ((1 << (_la - 204)) & ((1 << (ClickHouseParser.CONCAT - 204)) | (1 << (ClickHouseParser.DASH - 204)) | (1 << (ClickHouseParser.PLUS - 204)))) !== 0))) {
	                    this._errHandler.recoverInline(this);
	                    }
	                    else {
	                    	this._errHandler.reportMatch(this);
	                        this.consume();
	                    }
	                    this.state = 1820;
	                    this.columnExpr(16);
	                    break;

	                case 3:
	                    localctx = new ColumnExprPrecedence3Context(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1821;
	                    if (!( this.precpred(this._ctx, 14))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
	                    }
	                    this.state = 1840;
	                    this._errHandler.sync(this);
	                    var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
	                    switch(la_) {
	                    case 1:
	                        this.state = 1822;
	                        this.match(ClickHouseParser.EQ_DOUBLE);
	                        break;

	                    case 2:
	                        this.state = 1823;
	                        this.match(ClickHouseParser.EQ_SINGLE);
	                        break;

	                    case 3:
	                        this.state = 1824;
	                        this.match(ClickHouseParser.NOT_EQ);
	                        break;

	                    case 4:
	                        this.state = 1825;
	                        this.match(ClickHouseParser.LE);
	                        break;

	                    case 5:
	                        this.state = 1826;
	                        this.match(ClickHouseParser.GE);
	                        break;

	                    case 6:
	                        this.state = 1827;
	                        this.match(ClickHouseParser.LT);
	                        break;

	                    case 7:
	                        this.state = 1828;
	                        this.match(ClickHouseParser.GT);
	                        break;

	                    case 8:
	                        this.state = 1830;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===ClickHouseParser.GLOBAL) {
	                            this.state = 1829;
	                            this.match(ClickHouseParser.GLOBAL);
	                        }

	                        this.state = 1833;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===ClickHouseParser.NOT) {
	                            this.state = 1832;
	                            this.match(ClickHouseParser.NOT);
	                        }

	                        this.state = 1835;
	                        this.match(ClickHouseParser.IN);
	                        break;

	                    case 9:
	                        this.state = 1837;
	                        this._errHandler.sync(this);
	                        _la = this._input.LA(1);
	                        if(_la===ClickHouseParser.NOT) {
	                            this.state = 1836;
	                            this.match(ClickHouseParser.NOT);
	                        }

	                        this.state = 1839;
	                        _la = this._input.LA(1);
	                        if(!(_la===ClickHouseParser.ILIKE || _la===ClickHouseParser.LIKE)) {
	                        this._errHandler.recoverInline(this);
	                        }
	                        else {
	                        	this._errHandler.reportMatch(this);
	                            this.consume();
	                        }
	                        break;

	                    }
	                    this.state = 1842;
	                    this.columnExpr(15);
	                    break;

	                case 4:
	                    localctx = new ColumnExprAndContext(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1843;
	                    if (!( this.precpred(this._ctx, 11))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
	                    }
	                    this.state = 1844;
	                    this.match(ClickHouseParser.AND);
	                    this.state = 1845;
	                    this.columnExpr(12);
	                    break;

	                case 5:
	                    localctx = new ColumnExprOrContext(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1846;
	                    if (!( this.precpred(this._ctx, 10))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
	                    }
	                    this.state = 1847;
	                    this.match(ClickHouseParser.OR);
	                    this.state = 1848;
	                    this.columnExpr(11);
	                    break;

	                case 6:
	                    localctx = new ColumnExprBetweenContext(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1849;
	                    if (!( this.precpred(this._ctx, 9))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
	                    }
	                    this.state = 1851;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===ClickHouseParser.NOT) {
	                        this.state = 1850;
	                        this.match(ClickHouseParser.NOT);
	                    }

	                    this.state = 1853;
	                    this.match(ClickHouseParser.BETWEEN);
	                    this.state = 1854;
	                    this.columnExpr(0);
	                    this.state = 1855;
	                    this.match(ClickHouseParser.AND);
	                    this.state = 1856;
	                    this.columnExpr(10);
	                    break;

	                case 7:
	                    localctx = new ColumnExprTernaryOpContext(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1858;
	                    if (!( this.precpred(this._ctx, 8))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
	                    }
	                    this.state = 1859;
	                    this.match(ClickHouseParser.QUERY);
	                    this.state = 1860;
	                    this.columnExpr(0);
	                    this.state = 1861;
	                    this.match(ClickHouseParser.COLON);
	                    this.state = 1862;
	                    this.columnExpr(8);
	                    break;

	                case 8:
	                    localctx = new ColumnExprArrayAccessContext(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1864;
	                    if (!( this.precpred(this._ctx, 19))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
	                    }
	                    this.state = 1865;
	                    this.match(ClickHouseParser.LBRACKET);
	                    this.state = 1866;
	                    this.columnExpr(0);
	                    this.state = 1867;
	                    this.match(ClickHouseParser.RBRACKET);
	                    break;

	                case 9:
	                    localctx = new ColumnExprTupleAccessContext(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1869;
	                    if (!( this.precpred(this._ctx, 18))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
	                    }
	                    this.state = 1870;
	                    this.match(ClickHouseParser.DOT);
	                    this.state = 1871;
	                    this.match(ClickHouseParser.DECIMAL_LITERAL);
	                    break;

	                case 10:
	                    localctx = new ColumnExprIsNullContext(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1872;
	                    if (!( this.precpred(this._ctx, 13))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
	                    }
	                    this.state = 1873;
	                    this.match(ClickHouseParser.IS);
	                    this.state = 1875;
	                    this._errHandler.sync(this);
	                    _la = this._input.LA(1);
	                    if(_la===ClickHouseParser.NOT) {
	                        this.state = 1874;
	                        this.match(ClickHouseParser.NOT);
	                    }

	                    this.state = 1877;
	                    this.match(ClickHouseParser.NULL_SQL);
	                    break;

	                case 11:
	                    localctx = new ColumnExprAliasContext(this, new ColumnExprContext(this, _parentctx, _parentState));
	                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
	                    this.state = 1878;
	                    if (!( this.precpred(this._ctx, 7))) {
	                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
	                    }
	                    this.state = 1882;
	                    this._errHandler.sync(this);
	                    switch(this._input.LA(1)) {
	                    case ClickHouseParser.DATE:
	                    case ClickHouseParser.FIRST:
	                    case ClickHouseParser.ID:
	                    case ClickHouseParser.KEY:
	                    case ClickHouseParser.IDENTIFIER:
	                        this.state = 1879;
	                        this.alias();
	                        break;
	                    case ClickHouseParser.AS:
	                        this.state = 1880;
	                        this.match(ClickHouseParser.AS);
	                        this.state = 1881;
	                        this.identifier();
	                        break;
	                    default:
	                        throw new antlr4.error.NoViableAltException(this);
	                    }
	                    break;

	                } 
	            }
	            this.state = 1888;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,248,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	columnArgList() {
	    let localctx = new ColumnArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 192, ClickHouseParser.RULE_columnArgList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1889;
	        this.columnArgExpr();
	        this.state = 1894;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ClickHouseParser.COMMA) {
	            this.state = 1890;
	            this.match(ClickHouseParser.COMMA);
	            this.state = 1891;
	            this.columnArgExpr();
	            this.state = 1896;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnArgExpr() {
	    let localctx = new ColumnArgExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 194, ClickHouseParser.RULE_columnArgExpr);
	    try {
	        this.state = 1899;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1897;
	            this.columnLambdaExpr();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1898;
	            this.columnExpr(0);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnLambdaExpr() {
	    let localctx = new ColumnLambdaExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 196, ClickHouseParser.RULE_columnLambdaExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1920;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.LPAREN:
	            this.state = 1901;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1902;
	            this.identifier();
	            this.state = 1907;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ClickHouseParser.COMMA) {
	                this.state = 1903;
	                this.match(ClickHouseParser.COMMA);
	                this.state = 1904;
	                this.identifier();
	                this.state = 1909;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            this.state = 1910;
	            this.match(ClickHouseParser.RPAREN);
	            break;
	        case ClickHouseParser.AFTER:
	        case ClickHouseParser.ALIAS:
	        case ClickHouseParser.ALL:
	        case ClickHouseParser.ALTER:
	        case ClickHouseParser.AND:
	        case ClickHouseParser.ANTI:
	        case ClickHouseParser.ANY:
	        case ClickHouseParser.ARRAY:
	        case ClickHouseParser.AS:
	        case ClickHouseParser.ASCENDING:
	        case ClickHouseParser.ASOF:
	        case ClickHouseParser.AST:
	        case ClickHouseParser.ASYNC:
	        case ClickHouseParser.ATTACH:
	        case ClickHouseParser.BETWEEN:
	        case ClickHouseParser.BOTH:
	        case ClickHouseParser.BY:
	        case ClickHouseParser.CASE:
	        case ClickHouseParser.CAST:
	        case ClickHouseParser.CHECK:
	        case ClickHouseParser.CLEAR:
	        case ClickHouseParser.CLUSTER:
	        case ClickHouseParser.CODEC:
	        case ClickHouseParser.COLLATE:
	        case ClickHouseParser.COLUMN:
	        case ClickHouseParser.COMMENT:
	        case ClickHouseParser.CONSTRAINT:
	        case ClickHouseParser.CREATE:
	        case ClickHouseParser.CROSS:
	        case ClickHouseParser.CUBE:
	        case ClickHouseParser.CURRENT:
	        case ClickHouseParser.DATABASE:
	        case ClickHouseParser.DATABASES:
	        case ClickHouseParser.DATE:
	        case ClickHouseParser.DAY:
	        case ClickHouseParser.DEDUPLICATE:
	        case ClickHouseParser.DEFAULT:
	        case ClickHouseParser.DELAY:
	        case ClickHouseParser.DELETE:
	        case ClickHouseParser.DESC:
	        case ClickHouseParser.DESCENDING:
	        case ClickHouseParser.DESCRIBE:
	        case ClickHouseParser.DETACH:
	        case ClickHouseParser.DICTIONARIES:
	        case ClickHouseParser.DICTIONARY:
	        case ClickHouseParser.DISK:
	        case ClickHouseParser.DISTINCT:
	        case ClickHouseParser.DISTRIBUTED:
	        case ClickHouseParser.DROP:
	        case ClickHouseParser.ELSE:
	        case ClickHouseParser.END:
	        case ClickHouseParser.ENGINE:
	        case ClickHouseParser.EVENTS:
	        case ClickHouseParser.EXISTS:
	        case ClickHouseParser.EXPLAIN:
	        case ClickHouseParser.EXPRESSION:
	        case ClickHouseParser.EXTRACT:
	        case ClickHouseParser.FETCHES:
	        case ClickHouseParser.FINAL:
	        case ClickHouseParser.FIRST:
	        case ClickHouseParser.FLUSH:
	        case ClickHouseParser.FOLLOWING:
	        case ClickHouseParser.FOR:
	        case ClickHouseParser.FORMAT:
	        case ClickHouseParser.FREEZE:
	        case ClickHouseParser.FROM:
	        case ClickHouseParser.FULL:
	        case ClickHouseParser.FUNCTION:
	        case ClickHouseParser.GLOBAL:
	        case ClickHouseParser.GRANULARITY:
	        case ClickHouseParser.GROUP:
	        case ClickHouseParser.HAVING:
	        case ClickHouseParser.HIERARCHICAL:
	        case ClickHouseParser.HOUR:
	        case ClickHouseParser.ID:
	        case ClickHouseParser.IF:
	        case ClickHouseParser.ILIKE:
	        case ClickHouseParser.IN:
	        case ClickHouseParser.INDEX:
	        case ClickHouseParser.INJECTIVE:
	        case ClickHouseParser.INNER:
	        case ClickHouseParser.INSERT:
	        case ClickHouseParser.INTERVAL:
	        case ClickHouseParser.INTO:
	        case ClickHouseParser.IS:
	        case ClickHouseParser.IS_OBJECT_ID:
	        case ClickHouseParser.JOIN:
	        case ClickHouseParser.KEY:
	        case ClickHouseParser.KILL:
	        case ClickHouseParser.LAST:
	        case ClickHouseParser.LAYOUT:
	        case ClickHouseParser.LEADING:
	        case ClickHouseParser.LEFT:
	        case ClickHouseParser.LIFETIME:
	        case ClickHouseParser.LIKE:
	        case ClickHouseParser.LIMIT:
	        case ClickHouseParser.LIVE:
	        case ClickHouseParser.LOCAL:
	        case ClickHouseParser.LOGS:
	        case ClickHouseParser.MATERIALIZE:
	        case ClickHouseParser.MATERIALIZED:
	        case ClickHouseParser.MAX:
	        case ClickHouseParser.MERGES:
	        case ClickHouseParser.MIN:
	        case ClickHouseParser.MINUTE:
	        case ClickHouseParser.MODIFY:
	        case ClickHouseParser.MONTH:
	        case ClickHouseParser.MOVE:
	        case ClickHouseParser.MUTATION:
	        case ClickHouseParser.NO:
	        case ClickHouseParser.NOT:
	        case ClickHouseParser.NULLS:
	        case ClickHouseParser.OFFSET:
	        case ClickHouseParser.ON:
	        case ClickHouseParser.OPTIMIZE:
	        case ClickHouseParser.OR:
	        case ClickHouseParser.ORDER:
	        case ClickHouseParser.OUTER:
	        case ClickHouseParser.OUTFILE:
	        case ClickHouseParser.OVER:
	        case ClickHouseParser.PARTITION:
	        case ClickHouseParser.POPULATE:
	        case ClickHouseParser.PRECEDING:
	        case ClickHouseParser.PREWHERE:
	        case ClickHouseParser.PRIMARY:
	        case ClickHouseParser.QUARTER:
	        case ClickHouseParser.RANGE:
	        case ClickHouseParser.RELOAD:
	        case ClickHouseParser.REMOVE:
	        case ClickHouseParser.RENAME:
	        case ClickHouseParser.REPLACE:
	        case ClickHouseParser.REPLICA:
	        case ClickHouseParser.REPLICATED:
	        case ClickHouseParser.RIGHT:
	        case ClickHouseParser.ROLLUP:
	        case ClickHouseParser.ROW:
	        case ClickHouseParser.ROWS:
	        case ClickHouseParser.SAMPLE:
	        case ClickHouseParser.SECOND:
	        case ClickHouseParser.SELECT:
	        case ClickHouseParser.SEMI:
	        case ClickHouseParser.SENDS:
	        case ClickHouseParser.SET:
	        case ClickHouseParser.SETTINGS:
	        case ClickHouseParser.SHOW:
	        case ClickHouseParser.SOURCE:
	        case ClickHouseParser.START:
	        case ClickHouseParser.STOP:
	        case ClickHouseParser.SUBSTRING:
	        case ClickHouseParser.SYNC:
	        case ClickHouseParser.SYNTAX:
	        case ClickHouseParser.SYSTEM:
	        case ClickHouseParser.TABLE:
	        case ClickHouseParser.TABLES:
	        case ClickHouseParser.TEMPORARY:
	        case ClickHouseParser.TEST:
	        case ClickHouseParser.THEN:
	        case ClickHouseParser.TIES:
	        case ClickHouseParser.TIMEOUT:
	        case ClickHouseParser.TIMESTAMP:
	        case ClickHouseParser.TO:
	        case ClickHouseParser.TOP:
	        case ClickHouseParser.TOTALS:
	        case ClickHouseParser.TRAILING:
	        case ClickHouseParser.TRIM:
	        case ClickHouseParser.TRUNCATE:
	        case ClickHouseParser.TTL:
	        case ClickHouseParser.TYPE:
	        case ClickHouseParser.UNBOUNDED:
	        case ClickHouseParser.UNION:
	        case ClickHouseParser.UPDATE:
	        case ClickHouseParser.USE:
	        case ClickHouseParser.USING:
	        case ClickHouseParser.UUID:
	        case ClickHouseParser.VALUES:
	        case ClickHouseParser.VIEW:
	        case ClickHouseParser.VOLUME:
	        case ClickHouseParser.WATCH:
	        case ClickHouseParser.WEEK:
	        case ClickHouseParser.WHEN:
	        case ClickHouseParser.WHERE:
	        case ClickHouseParser.WINDOW:
	        case ClickHouseParser.WITH:
	        case ClickHouseParser.YEAR:
	        case ClickHouseParser.JSON_FALSE:
	        case ClickHouseParser.JSON_TRUE:
	        case ClickHouseParser.IDENTIFIER:
	            this.state = 1912;
	            this.identifier();
	            this.state = 1917;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	            while(_la===ClickHouseParser.COMMA) {
	                this.state = 1913;
	                this.match(ClickHouseParser.COMMA);
	                this.state = 1914;
	                this.identifier();
	                this.state = 1919;
	                this._errHandler.sync(this);
	                _la = this._input.LA(1);
	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	        this.state = 1922;
	        this.match(ClickHouseParser.ARROW);
	        this.state = 1923;
	        this.columnExpr(0);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	columnIdentifier() {
	    let localctx = new ColumnIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 198, ClickHouseParser.RULE_columnIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1928;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
	        if(la_===1) {
	            this.state = 1925;
	            this.tableIdentifier();
	            this.state = 1926;
	            this.match(ClickHouseParser.DOT);

	        }
	        this.state = 1930;
	        this.nestedIdentifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	nestedIdentifier() {
	    let localctx = new NestedIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 200, ClickHouseParser.RULE_nestedIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1932;
	        this.identifier();
	        this.state = 1935;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
	        if(la_===1) {
	            this.state = 1933;
	            this.match(ClickHouseParser.DOT);
	            this.state = 1934;
	            this.identifier();

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


	tableExpr(_p) {
		if(_p===undefined) {
		    _p = 0;
		}
	    const _parentctx = this._ctx;
	    const _parentState = this.state;
	    let localctx = new TableExprContext(this, this._ctx, _parentState);
	    let _prevctx = localctx;
	    const _startState = 202;
	    this.enterRecursionRule(localctx, 202, ClickHouseParser.RULE_tableExpr, _p);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1944;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
	        switch(la_) {
	        case 1:
	            localctx = new TableExprIdentifierContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;

	            this.state = 1938;
	            this.tableIdentifier();
	            break;

	        case 2:
	            localctx = new TableExprFunctionContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1939;
	            this.tableFunctionExpr();
	            break;

	        case 3:
	            localctx = new TableExprSubqueryContext(this, localctx);
	            this._ctx = localctx;
	            _prevctx = localctx;
	            this.state = 1940;
	            this.match(ClickHouseParser.LPAREN);
	            this.state = 1941;
	            this.selectUnionStmt();
	            this.state = 1942;
	            this.match(ClickHouseParser.RPAREN);
	            break;

	        }
	        this._ctx.stop = this._input.LT(-1);
	        this.state = 1954;
	        this._errHandler.sync(this);
	        var _alt = this._interp.adaptivePredict(this._input,258,this._ctx)
	        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
	            if(_alt===1) {
	                if(this._parseListeners!==null) {
	                    this.triggerExitRuleEvent();
	                }
	                _prevctx = localctx;
	                localctx = new TableExprAliasContext(this, new TableExprContext(this, _parentctx, _parentState));
	                this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_tableExpr);
	                this.state = 1946;
	                if (!( this.precpred(this._ctx, 1))) {
	                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
	                }
	                this.state = 1950;
	                this._errHandler.sync(this);
	                switch(this._input.LA(1)) {
	                case ClickHouseParser.DATE:
	                case ClickHouseParser.FIRST:
	                case ClickHouseParser.ID:
	                case ClickHouseParser.KEY:
	                case ClickHouseParser.IDENTIFIER:
	                    this.state = 1947;
	                    this.alias();
	                    break;
	                case ClickHouseParser.AS:
	                    this.state = 1948;
	                    this.match(ClickHouseParser.AS);
	                    this.state = 1949;
	                    this.identifier();
	                    break;
	                default:
	                    throw new antlr4.error.NoViableAltException(this);
	                } 
	            }
	            this.state = 1956;
	            this._errHandler.sync(this);
	            _alt = this._interp.adaptivePredict(this._input,258,this._ctx);
	        }

	    } catch( error) {
	        if(error instanceof antlr4.error.RecognitionException) {
		        localctx.exception = error;
		        this._errHandler.reportError(this, error);
		        this._errHandler.recover(this, error);
		    } else {
		    	throw error;
		    }
	    } finally {
	        this.unrollRecursionContexts(_parentctx)
	    }
	    return localctx;
	}



	tableFunctionExpr() {
	    let localctx = new TableFunctionExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 204, ClickHouseParser.RULE_tableFunctionExpr);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1957;
	        this.identifier();
	        this.state = 1958;
	        this.match(ClickHouseParser.LPAREN);
	        this.state = 1960;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
	            this.state = 1959;
	            this.tableArgList();
	        }

	        this.state = 1962;
	        this.match(ClickHouseParser.RPAREN);
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableIdentifier() {
	    let localctx = new TableIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 206, ClickHouseParser.RULE_tableIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1967;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
	        if(la_===1) {
	            this.state = 1964;
	            this.databaseIdentifier();
	            this.state = 1965;
	            this.match(ClickHouseParser.DOT);

	        }
	        this.state = 1969;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableArgList() {
	    let localctx = new TableArgListContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 208, ClickHouseParser.RULE_tableArgList);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1971;
	        this.tableArgExpr();
	        this.state = 1976;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        while(_la===ClickHouseParser.COMMA) {
	            this.state = 1972;
	            this.match(ClickHouseParser.COMMA);
	            this.state = 1973;
	            this.tableArgExpr();
	            this.state = 1978;
	            this._errHandler.sync(this);
	            _la = this._input.LA(1);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	tableArgExpr() {
	    let localctx = new TableArgExprContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 210, ClickHouseParser.RULE_tableArgExpr);
	    try {
	        this.state = 1982;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
	        switch(la_) {
	        case 1:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1979;
	            this.nestedIdentifier();
	            break;

	        case 2:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1980;
	            this.tableFunctionExpr();
	            break;

	        case 3:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1981;
	            this.literal();
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	databaseIdentifier() {
	    let localctx = new DatabaseIdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 212, ClickHouseParser.RULE_databaseIdentifier);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1984;
	        this.identifier();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	floatingLiteral() {
	    let localctx = new FloatingLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 214, ClickHouseParser.RULE_floatingLiteral);
	    var _la = 0; // Token type
	    try {
	        this.state = 1994;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.FLOATING_LITERAL:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 1986;
	            this.match(ClickHouseParser.FLOATING_LITERAL);
	            break;
	        case ClickHouseParser.DOT:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 1987;
	            this.match(ClickHouseParser.DOT);
	            this.state = 1988;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.OCTAL_LITERAL || _la===ClickHouseParser.DECIMAL_LITERAL)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	            break;
	        case ClickHouseParser.DECIMAL_LITERAL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 1989;
	            this.match(ClickHouseParser.DECIMAL_LITERAL);
	            this.state = 1990;
	            this.match(ClickHouseParser.DOT);
	            this.state = 1992;
	            this._errHandler.sync(this);
	            var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
	            if(la_===1) {
	                this.state = 1991;
	                _la = this._input.LA(1);
	                if(!(_la===ClickHouseParser.OCTAL_LITERAL || _la===ClickHouseParser.DECIMAL_LITERAL)) {
	                this._errHandler.recoverInline(this);
	                }
	                else {
	                	this._errHandler.reportMatch(this);
	                    this.consume();
	                }

	            }
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	numberLiteral() {
	    let localctx = new NumberLiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 216, ClickHouseParser.RULE_numberLiteral);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 1997;
	        this._errHandler.sync(this);
	        _la = this._input.LA(1);
	        if(_la===ClickHouseParser.DASH || _la===ClickHouseParser.PLUS) {
	            this.state = 1996;
	            _la = this._input.LA(1);
	            if(!(_la===ClickHouseParser.DASH || _la===ClickHouseParser.PLUS)) {
	            this._errHandler.recoverInline(this);
	            }
	            else {
	            	this._errHandler.reportMatch(this);
	                this.consume();
	            }
	        }

	        this.state = 2005;
	        this._errHandler.sync(this);
	        var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
	        switch(la_) {
	        case 1:
	            this.state = 1999;
	            this.floatingLiteral();
	            break;

	        case 2:
	            this.state = 2000;
	            this.match(ClickHouseParser.OCTAL_LITERAL);
	            break;

	        case 3:
	            this.state = 2001;
	            this.match(ClickHouseParser.DECIMAL_LITERAL);
	            break;

	        case 4:
	            this.state = 2002;
	            this.match(ClickHouseParser.HEXADECIMAL_LITERAL);
	            break;

	        case 5:
	            this.state = 2003;
	            this.match(ClickHouseParser.INF);
	            break;

	        case 6:
	            this.state = 2004;
	            this.match(ClickHouseParser.NAN_SQL);
	            break;

	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	literal() {
	    let localctx = new LiteralContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 218, ClickHouseParser.RULE_literal);
	    try {
	        this.state = 2010;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.INF:
	        case ClickHouseParser.NAN_SQL:
	        case ClickHouseParser.FLOATING_LITERAL:
	        case ClickHouseParser.OCTAL_LITERAL:
	        case ClickHouseParser.DECIMAL_LITERAL:
	        case ClickHouseParser.HEXADECIMAL_LITERAL:
	        case ClickHouseParser.DASH:
	        case ClickHouseParser.DOT:
	        case ClickHouseParser.PLUS:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2007;
	            this.numberLiteral();
	            break;
	        case ClickHouseParser.STRING_LITERAL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2008;
	            this.match(ClickHouseParser.STRING_LITERAL);
	            break;
	        case ClickHouseParser.NULL_SQL:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2009;
	            this.match(ClickHouseParser.NULL_SQL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	interval() {
	    let localctx = new IntervalContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 220, ClickHouseParser.RULE_interval);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2012;
	        _la = this._input.LA(1);
	        if(!(_la===ClickHouseParser.DAY || _la===ClickHouseParser.HOUR || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (ClickHouseParser.MINUTE - 107)) | (1 << (ClickHouseParser.MONTH - 107)) | (1 << (ClickHouseParser.QUARTER - 107)))) !== 0) || _la===ClickHouseParser.SECOND || _la===ClickHouseParser.WEEK || _la===ClickHouseParser.YEAR)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keyword() {
	    let localctx = new KeywordContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 222, ClickHouseParser.RULE_keyword);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2014;
	        _la = this._input.LA(1);
	        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0))) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	keywordForAlias() {
	    let localctx = new KeywordForAliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 224, ClickHouseParser.RULE_keywordForAlias);
	    var _la = 0; // Token type
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2016;
	        _la = this._input.LA(1);
	        if(!(_la===ClickHouseParser.DATE || _la===ClickHouseParser.FIRST || _la===ClickHouseParser.ID || _la===ClickHouseParser.KEY)) {
	        this._errHandler.recoverInline(this);
	        }
	        else {
	        	this._errHandler.reportMatch(this);
	            this.consume();
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	alias() {
	    let localctx = new AliasContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 226, ClickHouseParser.RULE_alias);
	    try {
	        this.state = 2020;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2018;
	            this.match(ClickHouseParser.IDENTIFIER);
	            break;
	        case ClickHouseParser.DATE:
	        case ClickHouseParser.FIRST:
	        case ClickHouseParser.ID:
	        case ClickHouseParser.KEY:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2019;
	            this.keywordForAlias();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifier() {
	    let localctx = new IdentifierContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 228, ClickHouseParser.RULE_identifier);
	    try {
	        this.state = 2025;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2022;
	            this.match(ClickHouseParser.IDENTIFIER);
	            break;
	        case ClickHouseParser.DAY:
	        case ClickHouseParser.HOUR:
	        case ClickHouseParser.MINUTE:
	        case ClickHouseParser.MONTH:
	        case ClickHouseParser.QUARTER:
	        case ClickHouseParser.SECOND:
	        case ClickHouseParser.WEEK:
	        case ClickHouseParser.YEAR:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2023;
	            this.interval();
	            break;
	        case ClickHouseParser.AFTER:
	        case ClickHouseParser.ALIAS:
	        case ClickHouseParser.ALL:
	        case ClickHouseParser.ALTER:
	        case ClickHouseParser.AND:
	        case ClickHouseParser.ANTI:
	        case ClickHouseParser.ANY:
	        case ClickHouseParser.ARRAY:
	        case ClickHouseParser.AS:
	        case ClickHouseParser.ASCENDING:
	        case ClickHouseParser.ASOF:
	        case ClickHouseParser.AST:
	        case ClickHouseParser.ASYNC:
	        case ClickHouseParser.ATTACH:
	        case ClickHouseParser.BETWEEN:
	        case ClickHouseParser.BOTH:
	        case ClickHouseParser.BY:
	        case ClickHouseParser.CASE:
	        case ClickHouseParser.CAST:
	        case ClickHouseParser.CHECK:
	        case ClickHouseParser.CLEAR:
	        case ClickHouseParser.CLUSTER:
	        case ClickHouseParser.CODEC:
	        case ClickHouseParser.COLLATE:
	        case ClickHouseParser.COLUMN:
	        case ClickHouseParser.COMMENT:
	        case ClickHouseParser.CONSTRAINT:
	        case ClickHouseParser.CREATE:
	        case ClickHouseParser.CROSS:
	        case ClickHouseParser.CUBE:
	        case ClickHouseParser.CURRENT:
	        case ClickHouseParser.DATABASE:
	        case ClickHouseParser.DATABASES:
	        case ClickHouseParser.DATE:
	        case ClickHouseParser.DEDUPLICATE:
	        case ClickHouseParser.DEFAULT:
	        case ClickHouseParser.DELAY:
	        case ClickHouseParser.DELETE:
	        case ClickHouseParser.DESC:
	        case ClickHouseParser.DESCENDING:
	        case ClickHouseParser.DESCRIBE:
	        case ClickHouseParser.DETACH:
	        case ClickHouseParser.DICTIONARIES:
	        case ClickHouseParser.DICTIONARY:
	        case ClickHouseParser.DISK:
	        case ClickHouseParser.DISTINCT:
	        case ClickHouseParser.DISTRIBUTED:
	        case ClickHouseParser.DROP:
	        case ClickHouseParser.ELSE:
	        case ClickHouseParser.END:
	        case ClickHouseParser.ENGINE:
	        case ClickHouseParser.EVENTS:
	        case ClickHouseParser.EXISTS:
	        case ClickHouseParser.EXPLAIN:
	        case ClickHouseParser.EXPRESSION:
	        case ClickHouseParser.EXTRACT:
	        case ClickHouseParser.FETCHES:
	        case ClickHouseParser.FINAL:
	        case ClickHouseParser.FIRST:
	        case ClickHouseParser.FLUSH:
	        case ClickHouseParser.FOLLOWING:
	        case ClickHouseParser.FOR:
	        case ClickHouseParser.FORMAT:
	        case ClickHouseParser.FREEZE:
	        case ClickHouseParser.FROM:
	        case ClickHouseParser.FULL:
	        case ClickHouseParser.FUNCTION:
	        case ClickHouseParser.GLOBAL:
	        case ClickHouseParser.GRANULARITY:
	        case ClickHouseParser.GROUP:
	        case ClickHouseParser.HAVING:
	        case ClickHouseParser.HIERARCHICAL:
	        case ClickHouseParser.ID:
	        case ClickHouseParser.IF:
	        case ClickHouseParser.ILIKE:
	        case ClickHouseParser.IN:
	        case ClickHouseParser.INDEX:
	        case ClickHouseParser.INJECTIVE:
	        case ClickHouseParser.INNER:
	        case ClickHouseParser.INSERT:
	        case ClickHouseParser.INTERVAL:
	        case ClickHouseParser.INTO:
	        case ClickHouseParser.IS:
	        case ClickHouseParser.IS_OBJECT_ID:
	        case ClickHouseParser.JOIN:
	        case ClickHouseParser.KEY:
	        case ClickHouseParser.KILL:
	        case ClickHouseParser.LAST:
	        case ClickHouseParser.LAYOUT:
	        case ClickHouseParser.LEADING:
	        case ClickHouseParser.LEFT:
	        case ClickHouseParser.LIFETIME:
	        case ClickHouseParser.LIKE:
	        case ClickHouseParser.LIMIT:
	        case ClickHouseParser.LIVE:
	        case ClickHouseParser.LOCAL:
	        case ClickHouseParser.LOGS:
	        case ClickHouseParser.MATERIALIZE:
	        case ClickHouseParser.MATERIALIZED:
	        case ClickHouseParser.MAX:
	        case ClickHouseParser.MERGES:
	        case ClickHouseParser.MIN:
	        case ClickHouseParser.MODIFY:
	        case ClickHouseParser.MOVE:
	        case ClickHouseParser.MUTATION:
	        case ClickHouseParser.NO:
	        case ClickHouseParser.NOT:
	        case ClickHouseParser.NULLS:
	        case ClickHouseParser.OFFSET:
	        case ClickHouseParser.ON:
	        case ClickHouseParser.OPTIMIZE:
	        case ClickHouseParser.OR:
	        case ClickHouseParser.ORDER:
	        case ClickHouseParser.OUTER:
	        case ClickHouseParser.OUTFILE:
	        case ClickHouseParser.OVER:
	        case ClickHouseParser.PARTITION:
	        case ClickHouseParser.POPULATE:
	        case ClickHouseParser.PRECEDING:
	        case ClickHouseParser.PREWHERE:
	        case ClickHouseParser.PRIMARY:
	        case ClickHouseParser.RANGE:
	        case ClickHouseParser.RELOAD:
	        case ClickHouseParser.REMOVE:
	        case ClickHouseParser.RENAME:
	        case ClickHouseParser.REPLACE:
	        case ClickHouseParser.REPLICA:
	        case ClickHouseParser.REPLICATED:
	        case ClickHouseParser.RIGHT:
	        case ClickHouseParser.ROLLUP:
	        case ClickHouseParser.ROW:
	        case ClickHouseParser.ROWS:
	        case ClickHouseParser.SAMPLE:
	        case ClickHouseParser.SELECT:
	        case ClickHouseParser.SEMI:
	        case ClickHouseParser.SENDS:
	        case ClickHouseParser.SET:
	        case ClickHouseParser.SETTINGS:
	        case ClickHouseParser.SHOW:
	        case ClickHouseParser.SOURCE:
	        case ClickHouseParser.START:
	        case ClickHouseParser.STOP:
	        case ClickHouseParser.SUBSTRING:
	        case ClickHouseParser.SYNC:
	        case ClickHouseParser.SYNTAX:
	        case ClickHouseParser.SYSTEM:
	        case ClickHouseParser.TABLE:
	        case ClickHouseParser.TABLES:
	        case ClickHouseParser.TEMPORARY:
	        case ClickHouseParser.TEST:
	        case ClickHouseParser.THEN:
	        case ClickHouseParser.TIES:
	        case ClickHouseParser.TIMEOUT:
	        case ClickHouseParser.TIMESTAMP:
	        case ClickHouseParser.TO:
	        case ClickHouseParser.TOP:
	        case ClickHouseParser.TOTALS:
	        case ClickHouseParser.TRAILING:
	        case ClickHouseParser.TRIM:
	        case ClickHouseParser.TRUNCATE:
	        case ClickHouseParser.TTL:
	        case ClickHouseParser.TYPE:
	        case ClickHouseParser.UNBOUNDED:
	        case ClickHouseParser.UNION:
	        case ClickHouseParser.UPDATE:
	        case ClickHouseParser.USE:
	        case ClickHouseParser.USING:
	        case ClickHouseParser.UUID:
	        case ClickHouseParser.VALUES:
	        case ClickHouseParser.VIEW:
	        case ClickHouseParser.VOLUME:
	        case ClickHouseParser.WATCH:
	        case ClickHouseParser.WHEN:
	        case ClickHouseParser.WHERE:
	        case ClickHouseParser.WINDOW:
	        case ClickHouseParser.WITH:
	        case ClickHouseParser.JSON_FALSE:
	        case ClickHouseParser.JSON_TRUE:
	            this.enterOuterAlt(localctx, 3);
	            this.state = 2024;
	            this.keyword();
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	identifierOrNull() {
	    let localctx = new IdentifierOrNullContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 230, ClickHouseParser.RULE_identifierOrNull);
	    try {
	        this.state = 2029;
	        this._errHandler.sync(this);
	        switch(this._input.LA(1)) {
	        case ClickHouseParser.AFTER:
	        case ClickHouseParser.ALIAS:
	        case ClickHouseParser.ALL:
	        case ClickHouseParser.ALTER:
	        case ClickHouseParser.AND:
	        case ClickHouseParser.ANTI:
	        case ClickHouseParser.ANY:
	        case ClickHouseParser.ARRAY:
	        case ClickHouseParser.AS:
	        case ClickHouseParser.ASCENDING:
	        case ClickHouseParser.ASOF:
	        case ClickHouseParser.AST:
	        case ClickHouseParser.ASYNC:
	        case ClickHouseParser.ATTACH:
	        case ClickHouseParser.BETWEEN:
	        case ClickHouseParser.BOTH:
	        case ClickHouseParser.BY:
	        case ClickHouseParser.CASE:
	        case ClickHouseParser.CAST:
	        case ClickHouseParser.CHECK:
	        case ClickHouseParser.CLEAR:
	        case ClickHouseParser.CLUSTER:
	        case ClickHouseParser.CODEC:
	        case ClickHouseParser.COLLATE:
	        case ClickHouseParser.COLUMN:
	        case ClickHouseParser.COMMENT:
	        case ClickHouseParser.CONSTRAINT:
	        case ClickHouseParser.CREATE:
	        case ClickHouseParser.CROSS:
	        case ClickHouseParser.CUBE:
	        case ClickHouseParser.CURRENT:
	        case ClickHouseParser.DATABASE:
	        case ClickHouseParser.DATABASES:
	        case ClickHouseParser.DATE:
	        case ClickHouseParser.DAY:
	        case ClickHouseParser.DEDUPLICATE:
	        case ClickHouseParser.DEFAULT:
	        case ClickHouseParser.DELAY:
	        case ClickHouseParser.DELETE:
	        case ClickHouseParser.DESC:
	        case ClickHouseParser.DESCENDING:
	        case ClickHouseParser.DESCRIBE:
	        case ClickHouseParser.DETACH:
	        case ClickHouseParser.DICTIONARIES:
	        case ClickHouseParser.DICTIONARY:
	        case ClickHouseParser.DISK:
	        case ClickHouseParser.DISTINCT:
	        case ClickHouseParser.DISTRIBUTED:
	        case ClickHouseParser.DROP:
	        case ClickHouseParser.ELSE:
	        case ClickHouseParser.END:
	        case ClickHouseParser.ENGINE:
	        case ClickHouseParser.EVENTS:
	        case ClickHouseParser.EXISTS:
	        case ClickHouseParser.EXPLAIN:
	        case ClickHouseParser.EXPRESSION:
	        case ClickHouseParser.EXTRACT:
	        case ClickHouseParser.FETCHES:
	        case ClickHouseParser.FINAL:
	        case ClickHouseParser.FIRST:
	        case ClickHouseParser.FLUSH:
	        case ClickHouseParser.FOLLOWING:
	        case ClickHouseParser.FOR:
	        case ClickHouseParser.FORMAT:
	        case ClickHouseParser.FREEZE:
	        case ClickHouseParser.FROM:
	        case ClickHouseParser.FULL:
	        case ClickHouseParser.FUNCTION:
	        case ClickHouseParser.GLOBAL:
	        case ClickHouseParser.GRANULARITY:
	        case ClickHouseParser.GROUP:
	        case ClickHouseParser.HAVING:
	        case ClickHouseParser.HIERARCHICAL:
	        case ClickHouseParser.HOUR:
	        case ClickHouseParser.ID:
	        case ClickHouseParser.IF:
	        case ClickHouseParser.ILIKE:
	        case ClickHouseParser.IN:
	        case ClickHouseParser.INDEX:
	        case ClickHouseParser.INJECTIVE:
	        case ClickHouseParser.INNER:
	        case ClickHouseParser.INSERT:
	        case ClickHouseParser.INTERVAL:
	        case ClickHouseParser.INTO:
	        case ClickHouseParser.IS:
	        case ClickHouseParser.IS_OBJECT_ID:
	        case ClickHouseParser.JOIN:
	        case ClickHouseParser.KEY:
	        case ClickHouseParser.KILL:
	        case ClickHouseParser.LAST:
	        case ClickHouseParser.LAYOUT:
	        case ClickHouseParser.LEADING:
	        case ClickHouseParser.LEFT:
	        case ClickHouseParser.LIFETIME:
	        case ClickHouseParser.LIKE:
	        case ClickHouseParser.LIMIT:
	        case ClickHouseParser.LIVE:
	        case ClickHouseParser.LOCAL:
	        case ClickHouseParser.LOGS:
	        case ClickHouseParser.MATERIALIZE:
	        case ClickHouseParser.MATERIALIZED:
	        case ClickHouseParser.MAX:
	        case ClickHouseParser.MERGES:
	        case ClickHouseParser.MIN:
	        case ClickHouseParser.MINUTE:
	        case ClickHouseParser.MODIFY:
	        case ClickHouseParser.MONTH:
	        case ClickHouseParser.MOVE:
	        case ClickHouseParser.MUTATION:
	        case ClickHouseParser.NO:
	        case ClickHouseParser.NOT:
	        case ClickHouseParser.NULLS:
	        case ClickHouseParser.OFFSET:
	        case ClickHouseParser.ON:
	        case ClickHouseParser.OPTIMIZE:
	        case ClickHouseParser.OR:
	        case ClickHouseParser.ORDER:
	        case ClickHouseParser.OUTER:
	        case ClickHouseParser.OUTFILE:
	        case ClickHouseParser.OVER:
	        case ClickHouseParser.PARTITION:
	        case ClickHouseParser.POPULATE:
	        case ClickHouseParser.PRECEDING:
	        case ClickHouseParser.PREWHERE:
	        case ClickHouseParser.PRIMARY:
	        case ClickHouseParser.QUARTER:
	        case ClickHouseParser.RANGE:
	        case ClickHouseParser.RELOAD:
	        case ClickHouseParser.REMOVE:
	        case ClickHouseParser.RENAME:
	        case ClickHouseParser.REPLACE:
	        case ClickHouseParser.REPLICA:
	        case ClickHouseParser.REPLICATED:
	        case ClickHouseParser.RIGHT:
	        case ClickHouseParser.ROLLUP:
	        case ClickHouseParser.ROW:
	        case ClickHouseParser.ROWS:
	        case ClickHouseParser.SAMPLE:
	        case ClickHouseParser.SECOND:
	        case ClickHouseParser.SELECT:
	        case ClickHouseParser.SEMI:
	        case ClickHouseParser.SENDS:
	        case ClickHouseParser.SET:
	        case ClickHouseParser.SETTINGS:
	        case ClickHouseParser.SHOW:
	        case ClickHouseParser.SOURCE:
	        case ClickHouseParser.START:
	        case ClickHouseParser.STOP:
	        case ClickHouseParser.SUBSTRING:
	        case ClickHouseParser.SYNC:
	        case ClickHouseParser.SYNTAX:
	        case ClickHouseParser.SYSTEM:
	        case ClickHouseParser.TABLE:
	        case ClickHouseParser.TABLES:
	        case ClickHouseParser.TEMPORARY:
	        case ClickHouseParser.TEST:
	        case ClickHouseParser.THEN:
	        case ClickHouseParser.TIES:
	        case ClickHouseParser.TIMEOUT:
	        case ClickHouseParser.TIMESTAMP:
	        case ClickHouseParser.TO:
	        case ClickHouseParser.TOP:
	        case ClickHouseParser.TOTALS:
	        case ClickHouseParser.TRAILING:
	        case ClickHouseParser.TRIM:
	        case ClickHouseParser.TRUNCATE:
	        case ClickHouseParser.TTL:
	        case ClickHouseParser.TYPE:
	        case ClickHouseParser.UNBOUNDED:
	        case ClickHouseParser.UNION:
	        case ClickHouseParser.UPDATE:
	        case ClickHouseParser.USE:
	        case ClickHouseParser.USING:
	        case ClickHouseParser.UUID:
	        case ClickHouseParser.VALUES:
	        case ClickHouseParser.VIEW:
	        case ClickHouseParser.VOLUME:
	        case ClickHouseParser.WATCH:
	        case ClickHouseParser.WEEK:
	        case ClickHouseParser.WHEN:
	        case ClickHouseParser.WHERE:
	        case ClickHouseParser.WINDOW:
	        case ClickHouseParser.WITH:
	        case ClickHouseParser.YEAR:
	        case ClickHouseParser.JSON_FALSE:
	        case ClickHouseParser.JSON_TRUE:
	        case ClickHouseParser.IDENTIFIER:
	            this.enterOuterAlt(localctx, 1);
	            this.state = 2027;
	            this.identifier();
	            break;
	        case ClickHouseParser.NULL_SQL:
	            this.enterOuterAlt(localctx, 2);
	            this.state = 2028;
	            this.match(ClickHouseParser.NULL_SQL);
	            break;
	        default:
	            throw new antlr4.error.NoViableAltException(this);
	        }
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}



	enumValue() {
	    let localctx = new EnumValueContext(this, this._ctx, this.state);
	    this.enterRule(localctx, 232, ClickHouseParser.RULE_enumValue);
	    try {
	        this.enterOuterAlt(localctx, 1);
	        this.state = 2031;
	        this.match(ClickHouseParser.STRING_LITERAL);
	        this.state = 2032;
	        this.match(ClickHouseParser.EQ_SINGLE);
	        this.state = 2033;
	        this.numberLiteral();
	    } catch (re) {
	    	if(re instanceof antlr4.error.RecognitionException) {
		        localctx.exception = re;
		        this._errHandler.reportError(this, re);
		        this._errHandler.recover(this, re);
		    } else {
		    	throw re;
		    }
	    } finally {
	        this.exitRule();
	    }
	    return localctx;
	}


}

ClickHouseParser.EOF = antlr4.Token.EOF;
ClickHouseParser.ADD = 1;
ClickHouseParser.AFTER = 2;
ClickHouseParser.ALIAS = 3;
ClickHouseParser.ALL = 4;
ClickHouseParser.ALTER = 5;
ClickHouseParser.AND = 6;
ClickHouseParser.ANTI = 7;
ClickHouseParser.ANY = 8;
ClickHouseParser.ARRAY = 9;
ClickHouseParser.AS = 10;
ClickHouseParser.ASCENDING = 11;
ClickHouseParser.ASOF = 12;
ClickHouseParser.AST = 13;
ClickHouseParser.ASYNC = 14;
ClickHouseParser.ATTACH = 15;
ClickHouseParser.BETWEEN = 16;
ClickHouseParser.BOTH = 17;
ClickHouseParser.BY = 18;
ClickHouseParser.CASE = 19;
ClickHouseParser.CAST = 20;
ClickHouseParser.CHECK = 21;
ClickHouseParser.CLEAR = 22;
ClickHouseParser.CLUSTER = 23;
ClickHouseParser.CODEC = 24;
ClickHouseParser.COLLATE = 25;
ClickHouseParser.COLUMN = 26;
ClickHouseParser.COMMENT = 27;
ClickHouseParser.CONSTRAINT = 28;
ClickHouseParser.CREATE = 29;
ClickHouseParser.CROSS = 30;
ClickHouseParser.CUBE = 31;
ClickHouseParser.CURRENT = 32;
ClickHouseParser.DATABASE = 33;
ClickHouseParser.DATABASES = 34;
ClickHouseParser.DATE = 35;
ClickHouseParser.DAY = 36;
ClickHouseParser.DEDUPLICATE = 37;
ClickHouseParser.DEFAULT = 38;
ClickHouseParser.DELAY = 39;
ClickHouseParser.DELETE = 40;
ClickHouseParser.DESC = 41;
ClickHouseParser.DESCENDING = 42;
ClickHouseParser.DESCRIBE = 43;
ClickHouseParser.DETACH = 44;
ClickHouseParser.DICTIONARIES = 45;
ClickHouseParser.DICTIONARY = 46;
ClickHouseParser.DISK = 47;
ClickHouseParser.DISTINCT = 48;
ClickHouseParser.DISTRIBUTED = 49;
ClickHouseParser.DROP = 50;
ClickHouseParser.ELSE = 51;
ClickHouseParser.END = 52;
ClickHouseParser.ENGINE = 53;
ClickHouseParser.EVENTS = 54;
ClickHouseParser.EXISTS = 55;
ClickHouseParser.EXPLAIN = 56;
ClickHouseParser.EXPRESSION = 57;
ClickHouseParser.EXTRACT = 58;
ClickHouseParser.FETCHES = 59;
ClickHouseParser.FINAL = 60;
ClickHouseParser.FIRST = 61;
ClickHouseParser.FLUSH = 62;
ClickHouseParser.FOLLOWING = 63;
ClickHouseParser.FOR = 64;
ClickHouseParser.FORMAT = 65;
ClickHouseParser.FREEZE = 66;
ClickHouseParser.FROM = 67;
ClickHouseParser.FULL = 68;
ClickHouseParser.FUNCTION = 69;
ClickHouseParser.GLOBAL = 70;
ClickHouseParser.GRANULARITY = 71;
ClickHouseParser.GROUP = 72;
ClickHouseParser.HAVING = 73;
ClickHouseParser.HIERARCHICAL = 74;
ClickHouseParser.HOUR = 75;
ClickHouseParser.ID = 76;
ClickHouseParser.IF = 77;
ClickHouseParser.ILIKE = 78;
ClickHouseParser.IN = 79;
ClickHouseParser.INDEX = 80;
ClickHouseParser.INF = 81;
ClickHouseParser.INJECTIVE = 82;
ClickHouseParser.INNER = 83;
ClickHouseParser.INSERT = 84;
ClickHouseParser.INTERVAL = 85;
ClickHouseParser.INTO = 86;
ClickHouseParser.IS = 87;
ClickHouseParser.IS_OBJECT_ID = 88;
ClickHouseParser.JOIN = 89;
ClickHouseParser.KEY = 90;
ClickHouseParser.KILL = 91;
ClickHouseParser.LAST = 92;
ClickHouseParser.LAYOUT = 93;
ClickHouseParser.LEADING = 94;
ClickHouseParser.LEFT = 95;
ClickHouseParser.LIFETIME = 96;
ClickHouseParser.LIKE = 97;
ClickHouseParser.LIMIT = 98;
ClickHouseParser.LIVE = 99;
ClickHouseParser.LOCAL = 100;
ClickHouseParser.LOGS = 101;
ClickHouseParser.MATERIALIZE = 102;
ClickHouseParser.MATERIALIZED = 103;
ClickHouseParser.MAX = 104;
ClickHouseParser.MERGES = 105;
ClickHouseParser.MIN = 106;
ClickHouseParser.MINUTE = 107;
ClickHouseParser.MODIFY = 108;
ClickHouseParser.MONTH = 109;
ClickHouseParser.MOVE = 110;
ClickHouseParser.MUTATION = 111;
ClickHouseParser.NAN_SQL = 112;
ClickHouseParser.NO = 113;
ClickHouseParser.NOT = 114;
ClickHouseParser.NULL_SQL = 115;
ClickHouseParser.NULLS = 116;
ClickHouseParser.OFFSET = 117;
ClickHouseParser.ON = 118;
ClickHouseParser.OPTIMIZE = 119;
ClickHouseParser.OR = 120;
ClickHouseParser.ORDER = 121;
ClickHouseParser.OUTER = 122;
ClickHouseParser.OUTFILE = 123;
ClickHouseParser.OVER = 124;
ClickHouseParser.PARTITION = 125;
ClickHouseParser.POPULATE = 126;
ClickHouseParser.PRECEDING = 127;
ClickHouseParser.PREWHERE = 128;
ClickHouseParser.PRIMARY = 129;
ClickHouseParser.PROJECTION = 130;
ClickHouseParser.QUARTER = 131;
ClickHouseParser.RANGE = 132;
ClickHouseParser.RELOAD = 133;
ClickHouseParser.REMOVE = 134;
ClickHouseParser.RENAME = 135;
ClickHouseParser.REPLACE = 136;
ClickHouseParser.REPLICA = 137;
ClickHouseParser.REPLICATED = 138;
ClickHouseParser.RIGHT = 139;
ClickHouseParser.ROLLUP = 140;
ClickHouseParser.ROW = 141;
ClickHouseParser.ROWS = 142;
ClickHouseParser.SAMPLE = 143;
ClickHouseParser.SECOND = 144;
ClickHouseParser.SELECT = 145;
ClickHouseParser.SEMI = 146;
ClickHouseParser.SENDS = 147;
ClickHouseParser.SET = 148;
ClickHouseParser.SETTINGS = 149;
ClickHouseParser.SHOW = 150;
ClickHouseParser.SOURCE = 151;
ClickHouseParser.START = 152;
ClickHouseParser.STOP = 153;
ClickHouseParser.SUBSTRING = 154;
ClickHouseParser.SYNC = 155;
ClickHouseParser.SYNTAX = 156;
ClickHouseParser.SYSTEM = 157;
ClickHouseParser.TABLE = 158;
ClickHouseParser.TABLES = 159;
ClickHouseParser.TEMPORARY = 160;
ClickHouseParser.TEST = 161;
ClickHouseParser.THEN = 162;
ClickHouseParser.TIES = 163;
ClickHouseParser.TIMEOUT = 164;
ClickHouseParser.TIMESTAMP = 165;
ClickHouseParser.TO = 166;
ClickHouseParser.TOP = 167;
ClickHouseParser.TOTALS = 168;
ClickHouseParser.TRAILING = 169;
ClickHouseParser.TRIM = 170;
ClickHouseParser.TRUNCATE = 171;
ClickHouseParser.TTL = 172;
ClickHouseParser.TYPE = 173;
ClickHouseParser.UNBOUNDED = 174;
ClickHouseParser.UNION = 175;
ClickHouseParser.UPDATE = 176;
ClickHouseParser.USE = 177;
ClickHouseParser.USING = 178;
ClickHouseParser.UUID = 179;
ClickHouseParser.VALUES = 180;
ClickHouseParser.VIEW = 181;
ClickHouseParser.VOLUME = 182;
ClickHouseParser.WATCH = 183;
ClickHouseParser.WEEK = 184;
ClickHouseParser.WHEN = 185;
ClickHouseParser.WHERE = 186;
ClickHouseParser.WINDOW = 187;
ClickHouseParser.WITH = 188;
ClickHouseParser.YEAR = 189;
ClickHouseParser.JSON_FALSE = 190;
ClickHouseParser.JSON_TRUE = 191;
ClickHouseParser.IDENTIFIER = 192;
ClickHouseParser.FLOATING_LITERAL = 193;
ClickHouseParser.OCTAL_LITERAL = 194;
ClickHouseParser.DECIMAL_LITERAL = 195;
ClickHouseParser.HEXADECIMAL_LITERAL = 196;
ClickHouseParser.STRING_LITERAL = 197;
ClickHouseParser.ARROW = 198;
ClickHouseParser.ASTERISK = 199;
ClickHouseParser.BACKQUOTE = 200;
ClickHouseParser.BACKSLASH = 201;
ClickHouseParser.COLON = 202;
ClickHouseParser.COMMA = 203;
ClickHouseParser.CONCAT = 204;
ClickHouseParser.DASH = 205;
ClickHouseParser.DOT = 206;
ClickHouseParser.EQ_DOUBLE = 207;
ClickHouseParser.EQ_SINGLE = 208;
ClickHouseParser.GE = 209;
ClickHouseParser.GT = 210;
ClickHouseParser.LBRACE = 211;
ClickHouseParser.LBRACKET = 212;
ClickHouseParser.LE = 213;
ClickHouseParser.LPAREN = 214;
ClickHouseParser.LT = 215;
ClickHouseParser.NOT_EQ = 216;
ClickHouseParser.PERCENT = 217;
ClickHouseParser.PLUS = 218;
ClickHouseParser.QUERY = 219;
ClickHouseParser.QUOTE_DOUBLE = 220;
ClickHouseParser.QUOTE_SINGLE = 221;
ClickHouseParser.RBRACE = 222;
ClickHouseParser.RBRACKET = 223;
ClickHouseParser.RPAREN = 224;
ClickHouseParser.SEMICOLON = 225;
ClickHouseParser.SLASH = 226;
ClickHouseParser.UNDERSCORE = 227;
ClickHouseParser.MULTI_LINE_COMMENT = 228;
ClickHouseParser.SINGLE_LINE_COMMENT = 229;
ClickHouseParser.WHITESPACE = 230;

ClickHouseParser.RULE_sql = 0;
ClickHouseParser.RULE_queryStmt = 1;
ClickHouseParser.RULE_query = 2;
ClickHouseParser.RULE_alterStmt = 3;
ClickHouseParser.RULE_alterTableClause = 4;
ClickHouseParser.RULE_assignmentExprList = 5;
ClickHouseParser.RULE_assignmentExpr = 6;
ClickHouseParser.RULE_tableColumnPropertyType = 7;
ClickHouseParser.RULE_partitionClause = 8;
ClickHouseParser.RULE_attachStmt = 9;
ClickHouseParser.RULE_checkStmt = 10;
ClickHouseParser.RULE_createStmt = 11;
ClickHouseParser.RULE_dictionarySchemaClause = 12;
ClickHouseParser.RULE_dictionaryAttrDfnt = 13;
ClickHouseParser.RULE_dictionaryEngineClause = 14;
ClickHouseParser.RULE_dictionaryPrimaryKeyClause = 15;
ClickHouseParser.RULE_dictionaryArgExpr = 16;
ClickHouseParser.RULE_sourceClause = 17;
ClickHouseParser.RULE_lifetimeClause = 18;
ClickHouseParser.RULE_layoutClause = 19;
ClickHouseParser.RULE_rangeClause = 20;
ClickHouseParser.RULE_dictionarySettingsClause = 21;
ClickHouseParser.RULE_clusterClause = 22;
ClickHouseParser.RULE_uuidClause = 23;
ClickHouseParser.RULE_destinationClause = 24;
ClickHouseParser.RULE_subqueryClause = 25;
ClickHouseParser.RULE_tableSchemaClause = 26;
ClickHouseParser.RULE_engineClause = 27;
ClickHouseParser.RULE_partitionByClause = 28;
ClickHouseParser.RULE_primaryKeyClause = 29;
ClickHouseParser.RULE_sampleByClause = 30;
ClickHouseParser.RULE_ttlClause = 31;
ClickHouseParser.RULE_engineExpr = 32;
ClickHouseParser.RULE_tableElementExpr = 33;
ClickHouseParser.RULE_tableColumnDfnt = 34;
ClickHouseParser.RULE_tableColumnPropertyExpr = 35;
ClickHouseParser.RULE_tableIndexDfnt = 36;
ClickHouseParser.RULE_tableProjectionDfnt = 37;
ClickHouseParser.RULE_codecExpr = 38;
ClickHouseParser.RULE_codecArgExpr = 39;
ClickHouseParser.RULE_ttlExpr = 40;
ClickHouseParser.RULE_describeStmt = 41;
ClickHouseParser.RULE_dropStmt = 42;
ClickHouseParser.RULE_existsStmt = 43;
ClickHouseParser.RULE_explainStmt = 44;
ClickHouseParser.RULE_insertStmt = 45;
ClickHouseParser.RULE_columnsClause = 46;
ClickHouseParser.RULE_dataClause = 47;
ClickHouseParser.RULE_killStmt = 48;
ClickHouseParser.RULE_optimizeStmt = 49;
ClickHouseParser.RULE_renameStmt = 50;
ClickHouseParser.RULE_projectionSelectStmt = 51;
ClickHouseParser.RULE_selectUnionStmt = 52;
ClickHouseParser.RULE_selectStmtWithParens = 53;
ClickHouseParser.RULE_selectStmt = 54;
ClickHouseParser.RULE_withClause = 55;
ClickHouseParser.RULE_topClause = 56;
ClickHouseParser.RULE_fromClause = 57;
ClickHouseParser.RULE_arrayJoinClause = 58;
ClickHouseParser.RULE_windowClause = 59;
ClickHouseParser.RULE_prewhereClause = 60;
ClickHouseParser.RULE_whereClause = 61;
ClickHouseParser.RULE_groupByClause = 62;
ClickHouseParser.RULE_havingClause = 63;
ClickHouseParser.RULE_orderByClause = 64;
ClickHouseParser.RULE_projectionOrderByClause = 65;
ClickHouseParser.RULE_limitByClause = 66;
ClickHouseParser.RULE_limitClause = 67;
ClickHouseParser.RULE_settingsClause = 68;
ClickHouseParser.RULE_joinExpr = 69;
ClickHouseParser.RULE_joinOp = 70;
ClickHouseParser.RULE_joinOpCross = 71;
ClickHouseParser.RULE_joinConstraintClause = 72;
ClickHouseParser.RULE_sampleClause = 73;
ClickHouseParser.RULE_limitExpr = 74;
ClickHouseParser.RULE_orderExprList = 75;
ClickHouseParser.RULE_orderExpr = 76;
ClickHouseParser.RULE_ratioExpr = 77;
ClickHouseParser.RULE_settingExprList = 78;
ClickHouseParser.RULE_settingExpr = 79;
ClickHouseParser.RULE_windowExpr = 80;
ClickHouseParser.RULE_winPartitionByClause = 81;
ClickHouseParser.RULE_winOrderByClause = 82;
ClickHouseParser.RULE_winFrameClause = 83;
ClickHouseParser.RULE_winFrameExtend = 84;
ClickHouseParser.RULE_winFrameBound = 85;
ClickHouseParser.RULE_setStmt = 86;
ClickHouseParser.RULE_showStmt = 87;
ClickHouseParser.RULE_systemStmt = 88;
ClickHouseParser.RULE_truncateStmt = 89;
ClickHouseParser.RULE_useStmt = 90;
ClickHouseParser.RULE_watchStmt = 91;
ClickHouseParser.RULE_columnTypeExpr = 92;
ClickHouseParser.RULE_columnExprList = 93;
ClickHouseParser.RULE_columnsExpr = 94;
ClickHouseParser.RULE_columnExpr = 95;
ClickHouseParser.RULE_columnArgList = 96;
ClickHouseParser.RULE_columnArgExpr = 97;
ClickHouseParser.RULE_columnLambdaExpr = 98;
ClickHouseParser.RULE_columnIdentifier = 99;
ClickHouseParser.RULE_nestedIdentifier = 100;
ClickHouseParser.RULE_tableExpr = 101;
ClickHouseParser.RULE_tableFunctionExpr = 102;
ClickHouseParser.RULE_tableIdentifier = 103;
ClickHouseParser.RULE_tableArgList = 104;
ClickHouseParser.RULE_tableArgExpr = 105;
ClickHouseParser.RULE_databaseIdentifier = 106;
ClickHouseParser.RULE_floatingLiteral = 107;
ClickHouseParser.RULE_numberLiteral = 108;
ClickHouseParser.RULE_literal = 109;
ClickHouseParser.RULE_interval = 110;
ClickHouseParser.RULE_keyword = 111;
ClickHouseParser.RULE_keywordForAlias = 112;
ClickHouseParser.RULE_alias = 113;
ClickHouseParser.RULE_identifier = 114;
ClickHouseParser.RULE_identifierOrNull = 115;
ClickHouseParser.RULE_enumValue = 116;

class SqlContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_sql;
    }

	EOF() {
	    return this.getToken(ClickHouseParser.EOF, 0);
	};

	queryStmt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(QueryStmtContext);
	    } else {
	        return this.getTypedRuleContext(QueryStmtContext,i);
	    }
	};

	SEMICOLON = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.SEMICOLON);
	    } else {
	        return this.getToken(ClickHouseParser.SEMICOLON, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSql(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSql(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSql(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_queryStmt;
    }

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	INTO() {
	    return this.getToken(ClickHouseParser.INTO, 0);
	};

	OUTFILE() {
	    return this.getToken(ClickHouseParser.OUTFILE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	FORMAT() {
	    return this.getToken(ClickHouseParser.FORMAT, 0);
	};

	identifierOrNull() {
	    return this.getTypedRuleContext(IdentifierOrNullContext,0);
	};

	SEMICOLON() {
	    return this.getToken(ClickHouseParser.SEMICOLON, 0);
	};

	insertStmt() {
	    return this.getTypedRuleContext(InsertStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterQueryStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitQueryStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitQueryStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class QueryContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_query;
    }

	alterStmt() {
	    return this.getTypedRuleContext(AlterStmtContext,0);
	};

	attachStmt() {
	    return this.getTypedRuleContext(AttachStmtContext,0);
	};

	checkStmt() {
	    return this.getTypedRuleContext(CheckStmtContext,0);
	};

	createStmt() {
	    return this.getTypedRuleContext(CreateStmtContext,0);
	};

	describeStmt() {
	    return this.getTypedRuleContext(DescribeStmtContext,0);
	};

	dropStmt() {
	    return this.getTypedRuleContext(DropStmtContext,0);
	};

	existsStmt() {
	    return this.getTypedRuleContext(ExistsStmtContext,0);
	};

	explainStmt() {
	    return this.getTypedRuleContext(ExplainStmtContext,0);
	};

	killStmt() {
	    return this.getTypedRuleContext(KillStmtContext,0);
	};

	optimizeStmt() {
	    return this.getTypedRuleContext(OptimizeStmtContext,0);
	};

	renameStmt() {
	    return this.getTypedRuleContext(RenameStmtContext,0);
	};

	selectUnionStmt() {
	    return this.getTypedRuleContext(SelectUnionStmtContext,0);
	};

	setStmt() {
	    return this.getTypedRuleContext(SetStmtContext,0);
	};

	showStmt() {
	    return this.getTypedRuleContext(ShowStmtContext,0);
	};

	systemStmt() {
	    return this.getTypedRuleContext(SystemStmtContext,0);
	};

	truncateStmt() {
	    return this.getTypedRuleContext(TruncateStmtContext,0);
	};

	useStmt() {
	    return this.getTypedRuleContext(UseStmtContext,0);
	};

	watchStmt() {
	    return this.getTypedRuleContext(WatchStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterQuery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitQuery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitQuery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AlterStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_alterStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterTableStmtContext extends AlterStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ALTER() {
	    return this.getToken(ClickHouseParser.ALTER, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	alterTableClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AlterTableClauseContext);
	    } else {
	        return this.getTypedRuleContext(AlterTableClauseContext,i);
	    }
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableStmtContext = AlterTableStmtContext;

class AlterTableClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_alterTableClause;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AlterTableClauseReplaceContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REPLACE() {
	    return this.getToken(ClickHouseParser.REPLACE, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	FROM() {
	    return this.getToken(ClickHouseParser.FROM, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseReplace(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseReplace(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseReplace(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseReplaceContext = AlterTableClauseReplaceContext;

class AlterTableClauseModifyOrderByContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MODIFY() {
	    return this.getToken(ClickHouseParser.MODIFY, 0);
	};

	ORDER() {
	    return this.getToken(ClickHouseParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(ClickHouseParser.BY, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseModifyOrderBy(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseModifyOrderBy(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseModifyOrderBy(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseModifyOrderByContext = AlterTableClauseModifyOrderByContext;

class AlterTableClauseUpdateContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	UPDATE() {
	    return this.getToken(ClickHouseParser.UPDATE, 0);
	};

	assignmentExprList() {
	    return this.getTypedRuleContext(AssignmentExprListContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseUpdate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseUpdate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseUpdate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseUpdateContext = AlterTableClauseUpdateContext;

class AlterTableClauseClearProjectionContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CLEAR() {
	    return this.getToken(ClickHouseParser.CLEAR, 0);
	};

	PROJECTION() {
	    return this.getToken(ClickHouseParser.PROJECTION, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	IN() {
	    return this.getToken(ClickHouseParser.IN, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseClearProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseClearProjection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseClearProjection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseClearProjectionContext = AlterTableClauseClearProjectionContext;

class AlterTableClauseModifyRemoveContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MODIFY() {
	    return this.getToken(ClickHouseParser.MODIFY, 0);
	};

	COLUMN() {
	    return this.getToken(ClickHouseParser.COLUMN, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	REMOVE() {
	    return this.getToken(ClickHouseParser.REMOVE, 0);
	};

	tableColumnPropertyType() {
	    return this.getTypedRuleContext(TableColumnPropertyTypeContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseModifyRemove(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseModifyRemove(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseModifyRemove(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseModifyRemoveContext = AlterTableClauseModifyRemoveContext;

class AlterTableClauseDeleteContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DELETE() {
	    return this.getToken(ClickHouseParser.DELETE, 0);
	};

	WHERE() {
	    return this.getToken(ClickHouseParser.WHERE, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseDelete(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseDelete(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseDelete(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseDeleteContext = AlterTableClauseDeleteContext;

class AlterTableClauseCommentContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	COMMENT() {
	    return this.getToken(ClickHouseParser.COMMENT, 0);
	};

	COLUMN() {
	    return this.getToken(ClickHouseParser.COLUMN, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseCommentContext = AlterTableClauseCommentContext;

class AlterTableClauseDropColumnContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(ClickHouseParser.DROP, 0);
	};

	COLUMN() {
	    return this.getToken(ClickHouseParser.COLUMN, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseDropColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseDropColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseDropColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseDropColumnContext = AlterTableClauseDropColumnContext;

class AlterTableClauseDetachContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DETACH() {
	    return this.getToken(ClickHouseParser.DETACH, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseDetach(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseDetach(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseDetach(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseDetachContext = AlterTableClauseDetachContext;

class AlterTableClauseAddIndexContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(ClickHouseParser.ADD, 0);
	};

	INDEX() {
	    return this.getToken(ClickHouseParser.INDEX, 0);
	};

	tableIndexDfnt() {
	    return this.getTypedRuleContext(TableIndexDfntContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	AFTER() {
	    return this.getToken(ClickHouseParser.AFTER, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseAddIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseAddIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseAddIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseAddIndexContext = AlterTableClauseAddIndexContext;

class AlterTableClauseDropPartitionContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(ClickHouseParser.DROP, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseDropPartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseDropPartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseDropPartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseDropPartitionContext = AlterTableClauseDropPartitionContext;

class AlterTableClauseMaterializeIndexContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MATERIALIZE() {
	    return this.getToken(ClickHouseParser.MATERIALIZE, 0);
	};

	INDEX() {
	    return this.getToken(ClickHouseParser.INDEX, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	IN() {
	    return this.getToken(ClickHouseParser.IN, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseMaterializeIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseMaterializeIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseMaterializeIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseMaterializeIndexContext = AlterTableClauseMaterializeIndexContext;

class AlterTableClauseMaterializeProjectionContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MATERIALIZE() {
	    return this.getToken(ClickHouseParser.MATERIALIZE, 0);
	};

	PROJECTION() {
	    return this.getToken(ClickHouseParser.PROJECTION, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	IN() {
	    return this.getToken(ClickHouseParser.IN, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseMaterializeProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseMaterializeProjection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseMaterializeProjection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseMaterializeProjectionContext = AlterTableClauseMaterializeProjectionContext;

class AlterTableClauseMovePartitionContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MOVE() {
	    return this.getToken(ClickHouseParser.MOVE, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	TO() {
	    return this.getToken(ClickHouseParser.TO, 0);
	};

	DISK() {
	    return this.getToken(ClickHouseParser.DISK, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	VOLUME() {
	    return this.getToken(ClickHouseParser.VOLUME, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseMovePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseMovePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseMovePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseMovePartitionContext = AlterTableClauseMovePartitionContext;

class AlterTableClauseRenameContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	RENAME() {
	    return this.getToken(ClickHouseParser.RENAME, 0);
	};

	COLUMN() {
	    return this.getToken(ClickHouseParser.COLUMN, 0);
	};

	nestedIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NestedIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(NestedIdentifierContext,i);
	    }
	};

	TO() {
	    return this.getToken(ClickHouseParser.TO, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseRename(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseRename(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseRename(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseRenameContext = AlterTableClauseRenameContext;

class AlterTableClauseFreezePartitionContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FREEZE() {
	    return this.getToken(ClickHouseParser.FREEZE, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseFreezePartition(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseFreezePartition(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseFreezePartition(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseFreezePartitionContext = AlterTableClauseFreezePartitionContext;

class AlterTableClauseClearColumnContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CLEAR() {
	    return this.getToken(ClickHouseParser.CLEAR, 0);
	};

	COLUMN() {
	    return this.getToken(ClickHouseParser.COLUMN, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	IN() {
	    return this.getToken(ClickHouseParser.IN, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseClearColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseClearColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseClearColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseClearColumnContext = AlterTableClauseClearColumnContext;

class AlterTableClauseModifyContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MODIFY() {
	    return this.getToken(ClickHouseParser.MODIFY, 0);
	};

	COLUMN() {
	    return this.getToken(ClickHouseParser.COLUMN, 0);
	};

	tableColumnDfnt() {
	    return this.getTypedRuleContext(TableColumnDfntContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseModify(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseModify(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseModify(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseModifyContext = AlterTableClauseModifyContext;

class AlterTableClauseClearIndexContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CLEAR() {
	    return this.getToken(ClickHouseParser.CLEAR, 0);
	};

	INDEX() {
	    return this.getToken(ClickHouseParser.INDEX, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	IN() {
	    return this.getToken(ClickHouseParser.IN, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseClearIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseClearIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseClearIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseClearIndexContext = AlterTableClauseClearIndexContext;

class AlterTableClauseRemoveTTLContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	REMOVE() {
	    return this.getToken(ClickHouseParser.REMOVE, 0);
	};

	TTL() {
	    return this.getToken(ClickHouseParser.TTL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseRemoveTTL(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseRemoveTTL(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseRemoveTTL(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseRemoveTTLContext = AlterTableClauseRemoveTTLContext;

class AlterTableClauseModifyCodecContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MODIFY() {
	    return this.getToken(ClickHouseParser.MODIFY, 0);
	};

	COLUMN() {
	    return this.getToken(ClickHouseParser.COLUMN, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	codecExpr() {
	    return this.getTypedRuleContext(CodecExprContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseModifyCodec(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseModifyCodec(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseModifyCodec(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseModifyCodecContext = AlterTableClauseModifyCodecContext;

class AlterTableClauseAttachContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ATTACH() {
	    return this.getToken(ClickHouseParser.ATTACH, 0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	FROM() {
	    return this.getToken(ClickHouseParser.FROM, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseAttach(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseAttach(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseAttach(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseAttachContext = AlterTableClauseAttachContext;

class AlterTableClauseDropProjectionContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(ClickHouseParser.DROP, 0);
	};

	PROJECTION() {
	    return this.getToken(ClickHouseParser.PROJECTION, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseDropProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseDropProjection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseDropProjection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseDropProjectionContext = AlterTableClauseDropProjectionContext;

class AlterTableClauseDropIndexContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DROP() {
	    return this.getToken(ClickHouseParser.DROP, 0);
	};

	INDEX() {
	    return this.getToken(ClickHouseParser.INDEX, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseDropIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseDropIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseDropIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseDropIndexContext = AlterTableClauseDropIndexContext;

class AlterTableClauseModifyCommentContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MODIFY() {
	    return this.getToken(ClickHouseParser.MODIFY, 0);
	};

	COLUMN() {
	    return this.getToken(ClickHouseParser.COLUMN, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	COMMENT() {
	    return this.getToken(ClickHouseParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseModifyComment(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseModifyComment(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseModifyComment(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseModifyCommentContext = AlterTableClauseModifyCommentContext;

class AlterTableClauseModifyTTLContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MODIFY() {
	    return this.getToken(ClickHouseParser.MODIFY, 0);
	};

	ttlClause() {
	    return this.getTypedRuleContext(TtlClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseModifyTTL(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseModifyTTL(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseModifyTTL(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseModifyTTLContext = AlterTableClauseModifyTTLContext;

class AlterTableClauseAddProjectionContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(ClickHouseParser.ADD, 0);
	};

	PROJECTION() {
	    return this.getToken(ClickHouseParser.PROJECTION, 0);
	};

	tableProjectionDfnt() {
	    return this.getTypedRuleContext(TableProjectionDfntContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	AFTER() {
	    return this.getToken(ClickHouseParser.AFTER, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseAddProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseAddProjection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseAddProjection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseAddProjectionContext = AlterTableClauseAddProjectionContext;

class AlterTableClauseAddColumnContext extends AlterTableClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ADD() {
	    return this.getToken(ClickHouseParser.ADD, 0);
	};

	COLUMN() {
	    return this.getToken(ClickHouseParser.COLUMN, 0);
	};

	tableColumnDfnt() {
	    return this.getTypedRuleContext(TableColumnDfntContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	AFTER() {
	    return this.getToken(ClickHouseParser.AFTER, 0);
	};

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlterTableClauseAddColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlterTableClauseAddColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlterTableClauseAddColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AlterTableClauseAddColumnContext = AlterTableClauseAddColumnContext;

class AssignmentExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_assignmentExprList;
    }

	assignmentExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(AssignmentExprContext);
	    } else {
	        return this.getTypedRuleContext(AssignmentExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAssignmentExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAssignmentExprList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAssignmentExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AssignmentExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_assignmentExpr;
    }

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	EQ_SINGLE() {
	    return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAssignmentExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAssignmentExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAssignmentExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableColumnPropertyTypeContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableColumnPropertyType;
    }

	ALIAS() {
	    return this.getToken(ClickHouseParser.ALIAS, 0);
	};

	CODEC() {
	    return this.getToken(ClickHouseParser.CODEC, 0);
	};

	COMMENT() {
	    return this.getToken(ClickHouseParser.COMMENT, 0);
	};

	DEFAULT() {
	    return this.getToken(ClickHouseParser.DEFAULT, 0);
	};

	MATERIALIZED() {
	    return this.getToken(ClickHouseParser.MATERIALIZED, 0);
	};

	TTL() {
	    return this.getToken(ClickHouseParser.TTL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableColumnPropertyType(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableColumnPropertyType(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableColumnPropertyType(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_partitionClause;
    }

	PARTITION() {
	    return this.getToken(ClickHouseParser.PARTITION, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	ID() {
	    return this.getToken(ClickHouseParser.ID, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterPartitionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitPartitionClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitPartitionClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AttachStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_attachStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class AttachDictionaryStmtContext extends AttachStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ATTACH() {
	    return this.getToken(ClickHouseParser.ATTACH, 0);
	};

	DICTIONARY() {
	    return this.getToken(ClickHouseParser.DICTIONARY, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAttachDictionaryStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAttachDictionaryStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAttachDictionaryStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.AttachDictionaryStmtContext = AttachDictionaryStmtContext;

class CheckStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_checkStmt;
    }

	CHECK() {
	    return this.getToken(ClickHouseParser.CHECK, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterCheckStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitCheckStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitCheckStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CreateStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_createStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class CreateViewStmtContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VIEW() {
	    return this.getToken(ClickHouseParser.VIEW, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	subqueryClause() {
	    return this.getTypedRuleContext(SubqueryClauseContext,0);
	};

	ATTACH() {
	    return this.getToken(ClickHouseParser.ATTACH, 0);
	};

	CREATE() {
	    return this.getToken(ClickHouseParser.CREATE, 0);
	};

	OR() {
	    return this.getToken(ClickHouseParser.OR, 0);
	};

	REPLACE() {
	    return this.getToken(ClickHouseParser.REPLACE, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	uuidClause() {
	    return this.getTypedRuleContext(UuidClauseContext,0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	tableSchemaClause() {
	    return this.getTypedRuleContext(TableSchemaClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterCreateViewStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitCreateViewStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitCreateViewStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.CreateViewStmtContext = CreateViewStmtContext;

class CreateDictionaryStmtContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DICTIONARY() {
	    return this.getToken(ClickHouseParser.DICTIONARY, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	dictionarySchemaClause() {
	    return this.getTypedRuleContext(DictionarySchemaClauseContext,0);
	};

	dictionaryEngineClause() {
	    return this.getTypedRuleContext(DictionaryEngineClauseContext,0);
	};

	ATTACH() {
	    return this.getToken(ClickHouseParser.ATTACH, 0);
	};

	CREATE() {
	    return this.getToken(ClickHouseParser.CREATE, 0);
	};

	REPLACE() {
	    return this.getToken(ClickHouseParser.REPLACE, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	uuidClause() {
	    return this.getTypedRuleContext(UuidClauseContext,0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	OR() {
	    return this.getToken(ClickHouseParser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterCreateDictionaryStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitCreateDictionaryStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitCreateDictionaryStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.CreateDictionaryStmtContext = CreateDictionaryStmtContext;

class CreateDatabaseStmtContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATABASE() {
	    return this.getToken(ClickHouseParser.DATABASE, 0);
	};

	databaseIdentifier() {
	    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
	};

	ATTACH() {
	    return this.getToken(ClickHouseParser.ATTACH, 0);
	};

	CREATE() {
	    return this.getToken(ClickHouseParser.CREATE, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	engineExpr() {
	    return this.getTypedRuleContext(EngineExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterCreateDatabaseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitCreateDatabaseStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitCreateDatabaseStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.CreateDatabaseStmtContext = CreateDatabaseStmtContext;

class CreateLiveViewStmtContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LIVE() {
	    return this.getToken(ClickHouseParser.LIVE, 0);
	};

	VIEW() {
	    return this.getToken(ClickHouseParser.VIEW, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	subqueryClause() {
	    return this.getTypedRuleContext(SubqueryClauseContext,0);
	};

	ATTACH() {
	    return this.getToken(ClickHouseParser.ATTACH, 0);
	};

	CREATE() {
	    return this.getToken(ClickHouseParser.CREATE, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	uuidClause() {
	    return this.getTypedRuleContext(UuidClauseContext,0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	WITH() {
	    return this.getToken(ClickHouseParser.WITH, 0);
	};

	TIMEOUT() {
	    return this.getToken(ClickHouseParser.TIMEOUT, 0);
	};

	destinationClause() {
	    return this.getTypedRuleContext(DestinationClauseContext,0);
	};

	tableSchemaClause() {
	    return this.getTypedRuleContext(TableSchemaClauseContext,0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterCreateLiveViewStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitCreateLiveViewStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitCreateLiveViewStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.CreateLiveViewStmtContext = CreateLiveViewStmtContext;

class CreateMaterializedViewStmtContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	MATERIALIZED() {
	    return this.getToken(ClickHouseParser.MATERIALIZED, 0);
	};

	VIEW() {
	    return this.getToken(ClickHouseParser.VIEW, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	subqueryClause() {
	    return this.getTypedRuleContext(SubqueryClauseContext,0);
	};

	ATTACH() {
	    return this.getToken(ClickHouseParser.ATTACH, 0);
	};

	CREATE() {
	    return this.getToken(ClickHouseParser.CREATE, 0);
	};

	destinationClause() {
	    return this.getTypedRuleContext(DestinationClauseContext,0);
	};

	engineClause() {
	    return this.getTypedRuleContext(EngineClauseContext,0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	uuidClause() {
	    return this.getTypedRuleContext(UuidClauseContext,0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	tableSchemaClause() {
	    return this.getTypedRuleContext(TableSchemaClauseContext,0);
	};

	POPULATE() {
	    return this.getToken(ClickHouseParser.POPULATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterCreateMaterializedViewStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitCreateMaterializedViewStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitCreateMaterializedViewStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.CreateMaterializedViewStmtContext = CreateMaterializedViewStmtContext;

class CreateTableStmtContext extends CreateStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	ATTACH() {
	    return this.getToken(ClickHouseParser.ATTACH, 0);
	};

	CREATE() {
	    return this.getToken(ClickHouseParser.CREATE, 0);
	};

	REPLACE() {
	    return this.getToken(ClickHouseParser.REPLACE, 0);
	};

	TEMPORARY() {
	    return this.getToken(ClickHouseParser.TEMPORARY, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	uuidClause() {
	    return this.getTypedRuleContext(UuidClauseContext,0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	tableSchemaClause() {
	    return this.getTypedRuleContext(TableSchemaClauseContext,0);
	};

	engineClause() {
	    return this.getTypedRuleContext(EngineClauseContext,0);
	};

	subqueryClause() {
	    return this.getTypedRuleContext(SubqueryClauseContext,0);
	};

	OR() {
	    return this.getToken(ClickHouseParser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterCreateTableStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitCreateTableStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitCreateTableStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.CreateTableStmtContext = CreateTableStmtContext;

class DictionarySchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_dictionarySchemaClause;
    }

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	dictionaryAttrDfnt = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DictionaryAttrDfntContext);
	    } else {
	        return this.getTypedRuleContext(DictionaryAttrDfntContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDictionarySchemaClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDictionarySchemaClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDictionarySchemaClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DictionaryAttrDfntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_dictionaryAttrDfnt;
        this.attrs = null
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	columnTypeExpr() {
	    return this.getTypedRuleContext(ColumnTypeExprContext,0);
	};

	DEFAULT = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.DEFAULT);
	    } else {
	        return this.getToken(ClickHouseParser.DEFAULT, i);
	    }
	};


	literal = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LiteralContext);
	    } else {
	        return this.getTypedRuleContext(LiteralContext,i);
	    }
	};

	EXPRESSION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.EXPRESSION);
	    } else {
	        return this.getToken(ClickHouseParser.EXPRESSION, i);
	    }
	};


	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	HIERARCHICAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.HIERARCHICAL);
	    } else {
	        return this.getToken(ClickHouseParser.HIERARCHICAL, i);
	    }
	};


	INJECTIVE = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.INJECTIVE);
	    } else {
	        return this.getToken(ClickHouseParser.INJECTIVE, i);
	    }
	};


	IS_OBJECT_ID = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.IS_OBJECT_ID);
	    } else {
	        return this.getToken(ClickHouseParser.IS_OBJECT_ID, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDictionaryAttrDfnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDictionaryAttrDfnt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDictionaryAttrDfnt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DictionaryEngineClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_dictionaryEngineClause;
        this.clauses = null
    }

	dictionaryPrimaryKeyClause() {
	    return this.getTypedRuleContext(DictionaryPrimaryKeyClauseContext,0);
	};

	sourceClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SourceClauseContext);
	    } else {
	        return this.getTypedRuleContext(SourceClauseContext,i);
	    }
	};

	lifetimeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LifetimeClauseContext);
	    } else {
	        return this.getTypedRuleContext(LifetimeClauseContext,i);
	    }
	};

	layoutClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(LayoutClauseContext);
	    } else {
	        return this.getTypedRuleContext(LayoutClauseContext,i);
	    }
	};

	rangeClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RangeClauseContext);
	    } else {
	        return this.getTypedRuleContext(RangeClauseContext,i);
	    }
	};

	dictionarySettingsClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DictionarySettingsClauseContext);
	    } else {
	        return this.getTypedRuleContext(DictionarySettingsClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDictionaryEngineClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDictionaryEngineClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDictionaryEngineClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DictionaryPrimaryKeyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_dictionaryPrimaryKeyClause;
    }

	PRIMARY() {
	    return this.getToken(ClickHouseParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(ClickHouseParser.KEY, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDictionaryPrimaryKeyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDictionaryPrimaryKeyClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDictionaryPrimaryKeyClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DictionaryArgExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_dictionaryArgExpr;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDictionaryArgExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDictionaryArgExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDictionaryArgExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SourceClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_sourceClause;
    }

	SOURCE() {
	    return this.getToken(ClickHouseParser.SOURCE, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.LPAREN);
	    } else {
	        return this.getToken(ClickHouseParser.LPAREN, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.RPAREN);
	    } else {
	        return this.getToken(ClickHouseParser.RPAREN, i);
	    }
	};


	dictionaryArgExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DictionaryArgExprContext);
	    } else {
	        return this.getTypedRuleContext(DictionaryArgExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSourceClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSourceClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSourceClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LifetimeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_lifetimeClause;
    }

	LIFETIME() {
	    return this.getToken(ClickHouseParser.LIFETIME, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	DECIMAL_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
	    } else {
	        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
	    }
	};


	MIN() {
	    return this.getToken(ClickHouseParser.MIN, 0);
	};

	MAX() {
	    return this.getToken(ClickHouseParser.MAX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterLifetimeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitLifetimeClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitLifetimeClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LayoutClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_layoutClause;
    }

	LAYOUT() {
	    return this.getToken(ClickHouseParser.LAYOUT, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.LPAREN);
	    } else {
	        return this.getToken(ClickHouseParser.LPAREN, i);
	    }
	};


	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.RPAREN);
	    } else {
	        return this.getToken(ClickHouseParser.RPAREN, i);
	    }
	};


	dictionaryArgExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(DictionaryArgExprContext);
	    } else {
	        return this.getTypedRuleContext(DictionaryArgExprContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterLayoutClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitLayoutClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitLayoutClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RangeClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_rangeClause;
    }

	RANGE() {
	    return this.getToken(ClickHouseParser.RANGE, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	MIN() {
	    return this.getToken(ClickHouseParser.MIN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	MAX() {
	    return this.getToken(ClickHouseParser.MAX, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterRangeClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitRangeClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitRangeClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DictionarySettingsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_dictionarySettingsClause;
    }

	SETTINGS() {
	    return this.getToken(ClickHouseParser.SETTINGS, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	settingExprList() {
	    return this.getTypedRuleContext(SettingExprListContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDictionarySettingsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDictionarySettingsClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDictionarySettingsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ClusterClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_clusterClause;
    }

	ON() {
	    return this.getToken(ClickHouseParser.ON, 0);
	};

	CLUSTER() {
	    return this.getToken(ClickHouseParser.CLUSTER, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterClusterClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitClusterClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitClusterClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UuidClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_uuidClause;
    }

	UUID() {
	    return this.getToken(ClickHouseParser.UUID, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterUuidClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitUuidClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitUuidClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DestinationClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_destinationClause;
    }

	TO() {
	    return this.getToken(ClickHouseParser.TO, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDestinationClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDestinationClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDestinationClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SubqueryClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_subqueryClause;
    }

	AS() {
	    return this.getToken(ClickHouseParser.AS, 0);
	};

	selectUnionStmt() {
	    return this.getTypedRuleContext(SelectUnionStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSubqueryClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSubqueryClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSubqueryClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableSchemaClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableSchemaClause;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class SchemaAsTableClauseContext extends TableSchemaClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(ClickHouseParser.AS, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSchemaAsTableClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSchemaAsTableClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSchemaAsTableClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.SchemaAsTableClauseContext = SchemaAsTableClauseContext;

class SchemaAsFunctionClauseContext extends TableSchemaClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	AS() {
	    return this.getToken(ClickHouseParser.AS, 0);
	};

	tableFunctionExpr() {
	    return this.getTypedRuleContext(TableFunctionExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSchemaAsFunctionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSchemaAsFunctionClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSchemaAsFunctionClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.SchemaAsFunctionClauseContext = SchemaAsFunctionClauseContext;

class SchemaDescriptionClauseContext extends TableSchemaClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	tableElementExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableElementExprContext);
	    } else {
	        return this.getTypedRuleContext(TableElementExprContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSchemaDescriptionClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSchemaDescriptionClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSchemaDescriptionClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.SchemaDescriptionClauseContext = SchemaDescriptionClauseContext;

class EngineClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_engineClause;
        this.clauses = null
    }

	engineExpr() {
	    return this.getTypedRuleContext(EngineExprContext,0);
	};

	orderByClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderByClauseContext);
	    } else {
	        return this.getTypedRuleContext(OrderByClauseContext,i);
	    }
	};

	partitionByClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PartitionByClauseContext);
	    } else {
	        return this.getTypedRuleContext(PartitionByClauseContext,i);
	    }
	};

	primaryKeyClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(PrimaryKeyClauseContext);
	    } else {
	        return this.getTypedRuleContext(PrimaryKeyClauseContext,i);
	    }
	};

	sampleByClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SampleByClauseContext);
	    } else {
	        return this.getTypedRuleContext(SampleByClauseContext,i);
	    }
	};

	ttlClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TtlClauseContext);
	    } else {
	        return this.getTypedRuleContext(TtlClauseContext,i);
	    }
	};

	settingsClause = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SettingsClauseContext);
	    } else {
	        return this.getTypedRuleContext(SettingsClauseContext,i);
	    }
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterEngineClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitEngineClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitEngineClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PartitionByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_partitionByClause;
    }

	PARTITION() {
	    return this.getToken(ClickHouseParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(ClickHouseParser.BY, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterPartitionByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitPartitionByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitPartitionByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrimaryKeyClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_primaryKeyClause;
    }

	PRIMARY() {
	    return this.getToken(ClickHouseParser.PRIMARY, 0);
	};

	KEY() {
	    return this.getToken(ClickHouseParser.KEY, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterPrimaryKeyClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitPrimaryKeyClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitPrimaryKeyClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SampleByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_sampleByClause;
    }

	SAMPLE() {
	    return this.getToken(ClickHouseParser.SAMPLE, 0);
	};

	BY() {
	    return this.getToken(ClickHouseParser.BY, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSampleByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSampleByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSampleByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TtlClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_ttlClause;
    }

	TTL() {
	    return this.getToken(ClickHouseParser.TTL, 0);
	};

	ttlExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TtlExprContext);
	    } else {
	        return this.getTypedRuleContext(TtlExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTtlClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTtlClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTtlClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EngineExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_engineExpr;
    }

	ENGINE() {
	    return this.getToken(ClickHouseParser.ENGINE, 0);
	};

	identifierOrNull() {
	    return this.getTypedRuleContext(IdentifierOrNullContext,0);
	};

	EQ_SINGLE() {
	    return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterEngineExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitEngineExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitEngineExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableElementExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableElementExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableElementExprProjectionContext extends TableElementExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	PROJECTION() {
	    return this.getToken(ClickHouseParser.PROJECTION, 0);
	};

	tableProjectionDfnt() {
	    return this.getTypedRuleContext(TableProjectionDfntContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableElementExprProjection(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableElementExprProjection(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableElementExprProjection(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.TableElementExprProjectionContext = TableElementExprProjectionContext;

class TableElementExprConstraintContext extends TableElementExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CONSTRAINT() {
	    return this.getToken(ClickHouseParser.CONSTRAINT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	CHECK() {
	    return this.getToken(ClickHouseParser.CHECK, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableElementExprConstraint(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableElementExprConstraint(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableElementExprConstraint(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.TableElementExprConstraintContext = TableElementExprConstraintContext;

class TableElementExprColumnContext extends TableElementExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableColumnDfnt() {
	    return this.getTypedRuleContext(TableColumnDfntContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableElementExprColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableElementExprColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableElementExprColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.TableElementExprColumnContext = TableElementExprColumnContext;

class TableElementExprIndexContext extends TableElementExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INDEX() {
	    return this.getToken(ClickHouseParser.INDEX, 0);
	};

	tableIndexDfnt() {
	    return this.getTypedRuleContext(TableIndexDfntContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableElementExprIndex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableElementExprIndex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableElementExprIndex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.TableElementExprIndexContext = TableElementExprIndexContext;

class TableColumnDfntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableColumnDfnt;
    }

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	columnTypeExpr() {
	    return this.getTypedRuleContext(ColumnTypeExprContext,0);
	};

	tableColumnPropertyExpr() {
	    return this.getTypedRuleContext(TableColumnPropertyExprContext,0);
	};

	COMMENT() {
	    return this.getToken(ClickHouseParser.COMMENT, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	codecExpr() {
	    return this.getTypedRuleContext(CodecExprContext,0);
	};

	TTL() {
	    return this.getToken(ClickHouseParser.TTL, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableColumnDfnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableColumnDfnt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableColumnDfnt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableColumnPropertyExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableColumnPropertyExpr;
    }

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	DEFAULT() {
	    return this.getToken(ClickHouseParser.DEFAULT, 0);
	};

	MATERIALIZED() {
	    return this.getToken(ClickHouseParser.MATERIALIZED, 0);
	};

	ALIAS() {
	    return this.getToken(ClickHouseParser.ALIAS, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableColumnPropertyExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableColumnPropertyExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableColumnPropertyExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableIndexDfntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableIndexDfnt;
    }

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	TYPE() {
	    return this.getToken(ClickHouseParser.TYPE, 0);
	};

	columnTypeExpr() {
	    return this.getTypedRuleContext(ColumnTypeExprContext,0);
	};

	GRANULARITY() {
	    return this.getToken(ClickHouseParser.GRANULARITY, 0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableIndexDfnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableIndexDfnt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableIndexDfnt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableProjectionDfntContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableProjectionDfnt;
    }

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	projectionSelectStmt() {
	    return this.getTypedRuleContext(ProjectionSelectStmtContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableProjectionDfnt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableProjectionDfnt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableProjectionDfnt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CodecExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_codecExpr;
    }

	CODEC() {
	    return this.getToken(ClickHouseParser.CODEC, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	codecArgExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(CodecArgExprContext);
	    } else {
	        return this.getTypedRuleContext(CodecArgExprContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterCodecExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitCodecExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitCodecExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class CodecArgExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_codecArgExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterCodecArgExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitCodecArgExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitCodecArgExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TtlExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_ttlExpr;
    }

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	DELETE() {
	    return this.getToken(ClickHouseParser.DELETE, 0);
	};

	TO() {
	    return this.getToken(ClickHouseParser.TO, 0);
	};

	DISK() {
	    return this.getToken(ClickHouseParser.DISK, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	VOLUME() {
	    return this.getToken(ClickHouseParser.VOLUME, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTtlExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTtlExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTtlExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DescribeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_describeStmt;
    }

	tableExpr() {
	    return this.getTypedRuleContext(TableExprContext,0);
	};

	DESCRIBE() {
	    return this.getToken(ClickHouseParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(ClickHouseParser.DESC, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDescribeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDescribeStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDescribeStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DropStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_dropStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DropDatabaseStmtContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATABASE() {
	    return this.getToken(ClickHouseParser.DATABASE, 0);
	};

	databaseIdentifier() {
	    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
	};

	DETACH() {
	    return this.getToken(ClickHouseParser.DETACH, 0);
	};

	DROP() {
	    return this.getToken(ClickHouseParser.DROP, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDropDatabaseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDropDatabaseStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDropDatabaseStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.DropDatabaseStmtContext = DropDatabaseStmtContext;

class DropTableStmtContext extends DropStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	DETACH() {
	    return this.getToken(ClickHouseParser.DETACH, 0);
	};

	DROP() {
	    return this.getToken(ClickHouseParser.DROP, 0);
	};

	DICTIONARY() {
	    return this.getToken(ClickHouseParser.DICTIONARY, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(ClickHouseParser.VIEW, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	NO() {
	    return this.getToken(ClickHouseParser.NO, 0);
	};

	DELAY() {
	    return this.getToken(ClickHouseParser.DELAY, 0);
	};

	TEMPORARY() {
	    return this.getToken(ClickHouseParser.TEMPORARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDropTableStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDropTableStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDropTableStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.DropTableStmtContext = DropTableStmtContext;

class ExistsStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_existsStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExistsTableStmtContext extends ExistsStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	DICTIONARY() {
	    return this.getToken(ClickHouseParser.DICTIONARY, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	VIEW() {
	    return this.getToken(ClickHouseParser.VIEW, 0);
	};

	TEMPORARY() {
	    return this.getToken(ClickHouseParser.TEMPORARY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterExistsTableStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitExistsTableStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitExistsTableStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ExistsTableStmtContext = ExistsTableStmtContext;

class ExistsDatabaseStmtContext extends ExistsStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	DATABASE() {
	    return this.getToken(ClickHouseParser.DATABASE, 0);
	};

	databaseIdentifier() {
	    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterExistsDatabaseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitExistsDatabaseStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitExistsDatabaseStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ExistsDatabaseStmtContext = ExistsDatabaseStmtContext;

class ExplainStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_explainStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ExplainSyntaxStmtContext extends ExplainStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXPLAIN() {
	    return this.getToken(ClickHouseParser.EXPLAIN, 0);
	};

	SYNTAX() {
	    return this.getToken(ClickHouseParser.SYNTAX, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterExplainSyntaxStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitExplainSyntaxStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitExplainSyntaxStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ExplainSyntaxStmtContext = ExplainSyntaxStmtContext;

class ExplainASTStmtContext extends ExplainStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXPLAIN() {
	    return this.getToken(ClickHouseParser.EXPLAIN, 0);
	};

	AST() {
	    return this.getToken(ClickHouseParser.AST, 0);
	};

	query() {
	    return this.getTypedRuleContext(QueryContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterExplainASTStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitExplainASTStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitExplainASTStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ExplainASTStmtContext = ExplainASTStmtContext;

class InsertStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_insertStmt;
    }

	INSERT() {
	    return this.getToken(ClickHouseParser.INSERT, 0);
	};

	INTO() {
	    return this.getToken(ClickHouseParser.INTO, 0);
	};

	dataClause() {
	    return this.getTypedRuleContext(DataClauseContext,0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	FUNCTION() {
	    return this.getToken(ClickHouseParser.FUNCTION, 0);
	};

	tableFunctionExpr() {
	    return this.getTypedRuleContext(TableFunctionExprContext,0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	columnsClause() {
	    return this.getTypedRuleContext(ColumnsClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterInsertStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitInsertStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitInsertStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_columnsClause;
    }

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	nestedIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NestedIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(NestedIdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnsClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DataClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_dataClause;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class DataClauseValuesContext extends DataClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	VALUES() {
	    return this.getToken(ClickHouseParser.VALUES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDataClauseValues(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDataClauseValues(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDataClauseValues(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.DataClauseValuesContext = DataClauseValuesContext;

class DataClauseFormatContext extends DataClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FORMAT() {
	    return this.getToken(ClickHouseParser.FORMAT, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDataClauseFormat(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDataClauseFormat(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDataClauseFormat(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.DataClauseFormatContext = DataClauseFormatContext;

class DataClauseSelectContext extends DataClauseContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	selectUnionStmt() {
	    return this.getTypedRuleContext(SelectUnionStmtContext,0);
	};

	EOF() {
	    return this.getToken(ClickHouseParser.EOF, 0);
	};

	SEMICOLON() {
	    return this.getToken(ClickHouseParser.SEMICOLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDataClauseSelect(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDataClauseSelect(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDataClauseSelect(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.DataClauseSelectContext = DataClauseSelectContext;

class KillStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_killStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class KillMutationStmtContext extends KillStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	KILL() {
	    return this.getToken(ClickHouseParser.KILL, 0);
	};

	MUTATION() {
	    return this.getToken(ClickHouseParser.MUTATION, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	SYNC() {
	    return this.getToken(ClickHouseParser.SYNC, 0);
	};

	ASYNC() {
	    return this.getToken(ClickHouseParser.ASYNC, 0);
	};

	TEST() {
	    return this.getToken(ClickHouseParser.TEST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterKillMutationStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitKillMutationStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitKillMutationStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.KillMutationStmtContext = KillMutationStmtContext;

class OptimizeStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_optimizeStmt;
    }

	OPTIMIZE() {
	    return this.getToken(ClickHouseParser.OPTIMIZE, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	partitionClause() {
	    return this.getTypedRuleContext(PartitionClauseContext,0);
	};

	FINAL() {
	    return this.getToken(ClickHouseParser.FINAL, 0);
	};

	DEDUPLICATE() {
	    return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterOptimizeStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitOptimizeStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitOptimizeStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RenameStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_renameStmt;
    }

	RENAME() {
	    return this.getToken(ClickHouseParser.RENAME, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	tableIdentifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableIdentifierContext);
	    } else {
	        return this.getTypedRuleContext(TableIdentifierContext,i);
	    }
	};

	TO = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.TO);
	    } else {
	        return this.getToken(ClickHouseParser.TO, i);
	    }
	};


	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterRenameStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitRenameStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitRenameStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProjectionSelectStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_projectionSelectStmt;
    }

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	SELECT() {
	    return this.getToken(ClickHouseParser.SELECT, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	projectionOrderByClause() {
	    return this.getTypedRuleContext(ProjectionOrderByClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterProjectionSelectStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitProjectionSelectStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitProjectionSelectStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectUnionStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_selectUnionStmt;
    }

	selectStmtWithParens = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SelectStmtWithParensContext);
	    } else {
	        return this.getTypedRuleContext(SelectStmtWithParensContext,i);
	    }
	};

	UNION = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.UNION);
	    } else {
	        return this.getToken(ClickHouseParser.UNION, i);
	    }
	};


	ALL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.ALL);
	    } else {
	        return this.getToken(ClickHouseParser.ALL, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSelectUnionStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSelectUnionStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSelectUnionStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStmtWithParensContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_selectStmtWithParens;
    }

	selectStmt() {
	    return this.getTypedRuleContext(SelectStmtContext,0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	selectUnionStmt() {
	    return this.getTypedRuleContext(SelectUnionStmtContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSelectStmtWithParens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSelectStmtWithParens(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSelectStmtWithParens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SelectStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_selectStmt;
    }

	SELECT() {
	    return this.getToken(ClickHouseParser.SELECT, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	withClause() {
	    return this.getTypedRuleContext(WithClauseContext,0);
	};

	DISTINCT() {
	    return this.getToken(ClickHouseParser.DISTINCT, 0);
	};

	topClause() {
	    return this.getTypedRuleContext(TopClauseContext,0);
	};

	fromClause() {
	    return this.getTypedRuleContext(FromClauseContext,0);
	};

	arrayJoinClause() {
	    return this.getTypedRuleContext(ArrayJoinClauseContext,0);
	};

	windowClause() {
	    return this.getTypedRuleContext(WindowClauseContext,0);
	};

	prewhereClause() {
	    return this.getTypedRuleContext(PrewhereClauseContext,0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	groupByClause() {
	    return this.getTypedRuleContext(GroupByClauseContext,0);
	};

	WITH = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.WITH);
	    } else {
	        return this.getToken(ClickHouseParser.WITH, i);
	    }
	};


	TOTALS() {
	    return this.getToken(ClickHouseParser.TOTALS, 0);
	};

	havingClause() {
	    return this.getTypedRuleContext(HavingClauseContext,0);
	};

	orderByClause() {
	    return this.getTypedRuleContext(OrderByClauseContext,0);
	};

	limitByClause() {
	    return this.getTypedRuleContext(LimitByClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	settingsClause() {
	    return this.getTypedRuleContext(SettingsClauseContext,0);
	};

	CUBE() {
	    return this.getToken(ClickHouseParser.CUBE, 0);
	};

	ROLLUP() {
	    return this.getToken(ClickHouseParser.ROLLUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSelectStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSelectStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSelectStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WithClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_withClause;
    }

	WITH() {
	    return this.getToken(ClickHouseParser.WITH, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterWithClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitWithClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitWithClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TopClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_topClause;
    }

	TOP() {
	    return this.getToken(ClickHouseParser.TOP, 0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
	};

	WITH() {
	    return this.getToken(ClickHouseParser.WITH, 0);
	};

	TIES() {
	    return this.getToken(ClickHouseParser.TIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTopClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTopClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTopClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FromClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_fromClause;
    }

	FROM() {
	    return this.getToken(ClickHouseParser.FROM, 0);
	};

	joinExpr() {
	    return this.getTypedRuleContext(JoinExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterFromClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitFromClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitFromClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ArrayJoinClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_arrayJoinClause;
    }

	ARRAY() {
	    return this.getToken(ClickHouseParser.ARRAY, 0);
	};

	JOIN() {
	    return this.getToken(ClickHouseParser.JOIN, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	LEFT() {
	    return this.getToken(ClickHouseParser.LEFT, 0);
	};

	INNER() {
	    return this.getToken(ClickHouseParser.INNER, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterArrayJoinClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitArrayJoinClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitArrayJoinClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_windowClause;
    }

	WINDOW() {
	    return this.getToken(ClickHouseParser.WINDOW, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	AS() {
	    return this.getToken(ClickHouseParser.AS, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	windowExpr() {
	    return this.getTypedRuleContext(WindowExprContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterWindowClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitWindowClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitWindowClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class PrewhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_prewhereClause;
    }

	PREWHERE() {
	    return this.getToken(ClickHouseParser.PREWHERE, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterPrewhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitPrewhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitPrewhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WhereClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_whereClause;
    }

	WHERE() {
	    return this.getToken(ClickHouseParser.WHERE, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterWhereClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitWhereClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitWhereClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class GroupByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_groupByClause;
    }

	GROUP() {
	    return this.getToken(ClickHouseParser.GROUP, 0);
	};

	BY() {
	    return this.getToken(ClickHouseParser.BY, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	CUBE() {
	    return this.getToken(ClickHouseParser.CUBE, 0);
	};

	ROLLUP() {
	    return this.getToken(ClickHouseParser.ROLLUP, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterGroupByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitGroupByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitGroupByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class HavingClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_havingClause;
    }

	HAVING() {
	    return this.getToken(ClickHouseParser.HAVING, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterHavingClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitHavingClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitHavingClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_orderByClause;
    }

	ORDER() {
	    return this.getToken(ClickHouseParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(ClickHouseParser.BY, 0);
	};

	orderExprList() {
	    return this.getTypedRuleContext(OrderExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitOrderByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitOrderByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ProjectionOrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_projectionOrderByClause;
    }

	ORDER() {
	    return this.getToken(ClickHouseParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(ClickHouseParser.BY, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterProjectionOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitProjectionOrderByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitProjectionOrderByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_limitByClause;
    }

	LIMIT() {
	    return this.getToken(ClickHouseParser.LIMIT, 0);
	};

	limitExpr() {
	    return this.getTypedRuleContext(LimitExprContext,0);
	};

	BY() {
	    return this.getToken(ClickHouseParser.BY, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterLimitByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitLimitByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitLimitByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_limitClause;
    }

	LIMIT() {
	    return this.getToken(ClickHouseParser.LIMIT, 0);
	};

	limitExpr() {
	    return this.getTypedRuleContext(LimitExprContext,0);
	};

	WITH() {
	    return this.getToken(ClickHouseParser.WITH, 0);
	};

	TIES() {
	    return this.getToken(ClickHouseParser.TIES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterLimitClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitLimitClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitLimitClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SettingsClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_settingsClause;
    }

	SETTINGS() {
	    return this.getToken(ClickHouseParser.SETTINGS, 0);
	};

	settingExprList() {
	    return this.getTypedRuleContext(SettingExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSettingsClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSettingsClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSettingsClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_joinExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JoinExprOpContext extends JoinExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	joinExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinExprContext);
	    } else {
	        return this.getTypedRuleContext(JoinExprContext,i);
	    }
	};

	JOIN() {
	    return this.getToken(ClickHouseParser.JOIN, 0);
	};

	joinConstraintClause() {
	    return this.getTypedRuleContext(JoinConstraintClauseContext,0);
	};

	joinOp() {
	    return this.getTypedRuleContext(JoinOpContext,0);
	};

	GLOBAL() {
	    return this.getToken(ClickHouseParser.GLOBAL, 0);
	};

	LOCAL() {
	    return this.getToken(ClickHouseParser.LOCAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterJoinExprOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitJoinExprOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitJoinExprOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.JoinExprOpContext = JoinExprOpContext;

class JoinExprTableContext extends JoinExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableExpr() {
	    return this.getTypedRuleContext(TableExprContext,0);
	};

	FINAL() {
	    return this.getToken(ClickHouseParser.FINAL, 0);
	};

	sampleClause() {
	    return this.getTypedRuleContext(SampleClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterJoinExprTable(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitJoinExprTable(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitJoinExprTable(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.JoinExprTableContext = JoinExprTableContext;

class JoinExprParensContext extends JoinExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	joinExpr() {
	    return this.getTypedRuleContext(JoinExprContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterJoinExprParens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitJoinExprParens(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitJoinExprParens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.JoinExprParensContext = JoinExprParensContext;

class JoinExprCrossOpContext extends JoinExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	joinExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(JoinExprContext);
	    } else {
	        return this.getTypedRuleContext(JoinExprContext,i);
	    }
	};

	joinOpCross() {
	    return this.getTypedRuleContext(JoinOpCrossContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterJoinExprCrossOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitJoinExprCrossOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitJoinExprCrossOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.JoinExprCrossOpContext = JoinExprCrossOpContext;

class JoinOpContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_joinOp;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class JoinOpFullContext extends JoinOpContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	FULL() {
	    return this.getToken(ClickHouseParser.FULL, 0);
	};

	OUTER() {
	    return this.getToken(ClickHouseParser.OUTER, 0);
	};

	ALL() {
	    return this.getToken(ClickHouseParser.ALL, 0);
	};

	ANY() {
	    return this.getToken(ClickHouseParser.ANY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterJoinOpFull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitJoinOpFull(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitJoinOpFull(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.JoinOpFullContext = JoinOpFullContext;

class JoinOpInnerContext extends JoinOpContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INNER() {
	    return this.getToken(ClickHouseParser.INNER, 0);
	};

	ALL() {
	    return this.getToken(ClickHouseParser.ALL, 0);
	};

	ANY() {
	    return this.getToken(ClickHouseParser.ANY, 0);
	};

	ASOF() {
	    return this.getToken(ClickHouseParser.ASOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterJoinOpInner(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitJoinOpInner(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitJoinOpInner(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.JoinOpInnerContext = JoinOpInnerContext;

class JoinOpLeftRightContext extends JoinOpContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LEFT() {
	    return this.getToken(ClickHouseParser.LEFT, 0);
	};

	RIGHT() {
	    return this.getToken(ClickHouseParser.RIGHT, 0);
	};

	OUTER() {
	    return this.getToken(ClickHouseParser.OUTER, 0);
	};

	SEMI() {
	    return this.getToken(ClickHouseParser.SEMI, 0);
	};

	ALL() {
	    return this.getToken(ClickHouseParser.ALL, 0);
	};

	ANTI() {
	    return this.getToken(ClickHouseParser.ANTI, 0);
	};

	ANY() {
	    return this.getToken(ClickHouseParser.ANY, 0);
	};

	ASOF() {
	    return this.getToken(ClickHouseParser.ASOF, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterJoinOpLeftRight(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitJoinOpLeftRight(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitJoinOpLeftRight(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.JoinOpLeftRightContext = JoinOpLeftRightContext;

class JoinOpCrossContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_joinOpCross;
    }

	CROSS() {
	    return this.getToken(ClickHouseParser.CROSS, 0);
	};

	JOIN() {
	    return this.getToken(ClickHouseParser.JOIN, 0);
	};

	GLOBAL() {
	    return this.getToken(ClickHouseParser.GLOBAL, 0);
	};

	LOCAL() {
	    return this.getToken(ClickHouseParser.LOCAL, 0);
	};

	COMMA() {
	    return this.getToken(ClickHouseParser.COMMA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterJoinOpCross(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitJoinOpCross(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitJoinOpCross(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class JoinConstraintClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_joinConstraintClause;
    }

	ON() {
	    return this.getToken(ClickHouseParser.ON, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	USING() {
	    return this.getToken(ClickHouseParser.USING, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterJoinConstraintClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitJoinConstraintClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitJoinConstraintClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SampleClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_sampleClause;
    }

	SAMPLE() {
	    return this.getToken(ClickHouseParser.SAMPLE, 0);
	};

	ratioExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(RatioExprContext);
	    } else {
	        return this.getTypedRuleContext(RatioExprContext,i);
	    }
	};

	OFFSET() {
	    return this.getToken(ClickHouseParser.OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSampleClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSampleClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSampleClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LimitExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_limitExpr;
    }

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	COMMA() {
	    return this.getToken(ClickHouseParser.COMMA, 0);
	};

	OFFSET() {
	    return this.getToken(ClickHouseParser.OFFSET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterLimitExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitLimitExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitLimitExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_orderExprList;
    }

	orderExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(OrderExprContext);
	    } else {
	        return this.getTypedRuleContext(OrderExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterOrderExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitOrderExprList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitOrderExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class OrderExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_orderExpr;
    }

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	NULLS() {
	    return this.getToken(ClickHouseParser.NULLS, 0);
	};

	COLLATE() {
	    return this.getToken(ClickHouseParser.COLLATE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	ASCENDING() {
	    return this.getToken(ClickHouseParser.ASCENDING, 0);
	};

	DESCENDING() {
	    return this.getToken(ClickHouseParser.DESCENDING, 0);
	};

	DESC() {
	    return this.getToken(ClickHouseParser.DESC, 0);
	};

	FIRST() {
	    return this.getToken(ClickHouseParser.FIRST, 0);
	};

	LAST() {
	    return this.getToken(ClickHouseParser.LAST, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterOrderExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitOrderExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitOrderExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class RatioExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_ratioExpr;
    }

	numberLiteral = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(NumberLiteralContext);
	    } else {
	        return this.getTypedRuleContext(NumberLiteralContext,i);
	    }
	};

	SLASH() {
	    return this.getToken(ClickHouseParser.SLASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterRatioExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitRatioExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitRatioExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SettingExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_settingExprList;
    }

	settingExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(SettingExprContext);
	    } else {
	        return this.getTypedRuleContext(SettingExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSettingExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSettingExprList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSettingExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SettingExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_settingExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	EQ_SINGLE() {
	    return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSettingExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSettingExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSettingExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WindowExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_windowExpr;
    }

	winPartitionByClause() {
	    return this.getTypedRuleContext(WinPartitionByClauseContext,0);
	};

	winOrderByClause() {
	    return this.getTypedRuleContext(WinOrderByClauseContext,0);
	};

	winFrameClause() {
	    return this.getTypedRuleContext(WinFrameClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterWindowExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitWindowExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitWindowExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WinPartitionByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_winPartitionByClause;
    }

	PARTITION() {
	    return this.getToken(ClickHouseParser.PARTITION, 0);
	};

	BY() {
	    return this.getToken(ClickHouseParser.BY, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterWinPartitionByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitWinPartitionByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitWinPartitionByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WinOrderByClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_winOrderByClause;
    }

	ORDER() {
	    return this.getToken(ClickHouseParser.ORDER, 0);
	};

	BY() {
	    return this.getToken(ClickHouseParser.BY, 0);
	};

	orderExprList() {
	    return this.getTypedRuleContext(OrderExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterWinOrderByClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitWinOrderByClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitWinOrderByClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WinFrameClauseContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_winFrameClause;
    }

	winFrameExtend() {
	    return this.getTypedRuleContext(WinFrameExtendContext,0);
	};

	ROWS() {
	    return this.getToken(ClickHouseParser.ROWS, 0);
	};

	RANGE() {
	    return this.getToken(ClickHouseParser.RANGE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterWinFrameClause(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitWinFrameClause(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitWinFrameClause(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WinFrameExtendContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_winFrameExtend;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class FrameStartContext extends WinFrameExtendContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	winFrameBound() {
	    return this.getTypedRuleContext(WinFrameBoundContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterFrameStart(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitFrameStart(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitFrameStart(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.FrameStartContext = FrameStartContext;

class FrameBetweenContext extends WinFrameExtendContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	BETWEEN() {
	    return this.getToken(ClickHouseParser.BETWEEN, 0);
	};

	winFrameBound = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(WinFrameBoundContext);
	    } else {
	        return this.getTypedRuleContext(WinFrameBoundContext,i);
	    }
	};

	AND() {
	    return this.getToken(ClickHouseParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterFrameBetween(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitFrameBetween(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitFrameBetween(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.FrameBetweenContext = FrameBetweenContext;

class WinFrameBoundContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_winFrameBound;
    }

	CURRENT() {
	    return this.getToken(ClickHouseParser.CURRENT, 0);
	};

	ROW() {
	    return this.getToken(ClickHouseParser.ROW, 0);
	};

	UNBOUNDED() {
	    return this.getToken(ClickHouseParser.UNBOUNDED, 0);
	};

	PRECEDING() {
	    return this.getToken(ClickHouseParser.PRECEDING, 0);
	};

	FOLLOWING() {
	    return this.getToken(ClickHouseParser.FOLLOWING, 0);
	};

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterWinFrameBound(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitWinFrameBound(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitWinFrameBound(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class SetStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_setStmt;
    }

	SET() {
	    return this.getToken(ClickHouseParser.SET, 0);
	};

	settingExprList() {
	    return this.getTypedRuleContext(SettingExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSetStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSetStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSetStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ShowStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_showStmt;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ShowCreateDatabaseStmtContext extends ShowStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(ClickHouseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(ClickHouseParser.CREATE, 0);
	};

	DATABASE() {
	    return this.getToken(ClickHouseParser.DATABASE, 0);
	};

	databaseIdentifier() {
	    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterShowCreateDatabaseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitShowCreateDatabaseStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitShowCreateDatabaseStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ShowCreateDatabaseStmtContext = ShowCreateDatabaseStmtContext;

class ShowDatabasesStmtContext extends ShowStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(ClickHouseParser.SHOW, 0);
	};

	DATABASES() {
	    return this.getToken(ClickHouseParser.DATABASES, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterShowDatabasesStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitShowDatabasesStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitShowDatabasesStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ShowDatabasesStmtContext = ShowDatabasesStmtContext;

class ShowCreateTableStmtContext extends ShowStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(ClickHouseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(ClickHouseParser.CREATE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	TEMPORARY() {
	    return this.getToken(ClickHouseParser.TEMPORARY, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterShowCreateTableStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitShowCreateTableStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitShowCreateTableStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ShowCreateTableStmtContext = ShowCreateTableStmtContext;

class ShowTablesStmtContext extends ShowStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(ClickHouseParser.SHOW, 0);
	};

	TABLES() {
	    return this.getToken(ClickHouseParser.TABLES, 0);
	};

	TEMPORARY() {
	    return this.getToken(ClickHouseParser.TEMPORARY, 0);
	};

	databaseIdentifier() {
	    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
	};

	LIKE() {
	    return this.getToken(ClickHouseParser.LIKE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	whereClause() {
	    return this.getTypedRuleContext(WhereClauseContext,0);
	};

	limitClause() {
	    return this.getTypedRuleContext(LimitClauseContext,0);
	};

	FROM() {
	    return this.getToken(ClickHouseParser.FROM, 0);
	};

	IN() {
	    return this.getToken(ClickHouseParser.IN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterShowTablesStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitShowTablesStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitShowTablesStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ShowTablesStmtContext = ShowTablesStmtContext;

class ShowDictionariesStmtContext extends ShowStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(ClickHouseParser.SHOW, 0);
	};

	DICTIONARIES() {
	    return this.getToken(ClickHouseParser.DICTIONARIES, 0);
	};

	FROM() {
	    return this.getToken(ClickHouseParser.FROM, 0);
	};

	databaseIdentifier() {
	    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterShowDictionariesStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitShowDictionariesStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitShowDictionariesStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ShowDictionariesStmtContext = ShowDictionariesStmtContext;

class ShowCreateDictionaryStmtContext extends ShowStmtContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SHOW() {
	    return this.getToken(ClickHouseParser.SHOW, 0);
	};

	CREATE() {
	    return this.getToken(ClickHouseParser.CREATE, 0);
	};

	DICTIONARY() {
	    return this.getToken(ClickHouseParser.DICTIONARY, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterShowCreateDictionaryStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitShowCreateDictionaryStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitShowCreateDictionaryStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ShowCreateDictionaryStmtContext = ShowCreateDictionaryStmtContext;

class SystemStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_systemStmt;
    }

	SYSTEM() {
	    return this.getToken(ClickHouseParser.SYSTEM, 0);
	};

	FLUSH() {
	    return this.getToken(ClickHouseParser.FLUSH, 0);
	};

	DISTRIBUTED() {
	    return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	LOGS() {
	    return this.getToken(ClickHouseParser.LOGS, 0);
	};

	RELOAD() {
	    return this.getToken(ClickHouseParser.RELOAD, 0);
	};

	DICTIONARIES() {
	    return this.getToken(ClickHouseParser.DICTIONARIES, 0);
	};

	DICTIONARY() {
	    return this.getToken(ClickHouseParser.DICTIONARY, 0);
	};

	START() {
	    return this.getToken(ClickHouseParser.START, 0);
	};

	STOP() {
	    return this.getToken(ClickHouseParser.STOP, 0);
	};

	SENDS() {
	    return this.getToken(ClickHouseParser.SENDS, 0);
	};

	FETCHES() {
	    return this.getToken(ClickHouseParser.FETCHES, 0);
	};

	MERGES() {
	    return this.getToken(ClickHouseParser.MERGES, 0);
	};

	TTL() {
	    return this.getToken(ClickHouseParser.TTL, 0);
	};

	REPLICATED() {
	    return this.getToken(ClickHouseParser.REPLICATED, 0);
	};

	SYNC() {
	    return this.getToken(ClickHouseParser.SYNC, 0);
	};

	REPLICA() {
	    return this.getToken(ClickHouseParser.REPLICA, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterSystemStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitSystemStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitSystemStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TruncateStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_truncateStmt;
    }

	TRUNCATE() {
	    return this.getToken(ClickHouseParser.TRUNCATE, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	TEMPORARY() {
	    return this.getToken(ClickHouseParser.TEMPORARY, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	clusterClause() {
	    return this.getTypedRuleContext(ClusterClauseContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTruncateStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTruncateStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTruncateStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class UseStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_useStmt;
    }

	USE() {
	    return this.getToken(ClickHouseParser.USE, 0);
	};

	databaseIdentifier() {
	    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterUseStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitUseStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitUseStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class WatchStmtContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_watchStmt;
    }

	WATCH() {
	    return this.getToken(ClickHouseParser.WATCH, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	EVENTS() {
	    return this.getToken(ClickHouseParser.EVENTS, 0);
	};

	LIMIT() {
	    return this.getToken(ClickHouseParser.LIMIT, 0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterWatchStmt(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitWatchStmt(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitWatchStmt(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnTypeExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_columnTypeExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ColumnTypeExprNestedContext extends ColumnTypeExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	columnTypeExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnTypeExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnTypeExprContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnTypeExprNested(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnTypeExprNested(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnTypeExprNested(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnTypeExprNestedContext = ColumnTypeExprNestedContext;

class ColumnTypeExprParamContext extends ColumnTypeExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnTypeExprParam(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnTypeExprParam(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnTypeExprParam(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnTypeExprParamContext = ColumnTypeExprParamContext;

class ColumnTypeExprSimpleContext extends ColumnTypeExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnTypeExprSimple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnTypeExprSimple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnTypeExprSimple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnTypeExprSimpleContext = ColumnTypeExprSimpleContext;

class ColumnTypeExprComplexContext extends ColumnTypeExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	columnTypeExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnTypeExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnTypeExprContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnTypeExprComplex(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnTypeExprComplex(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnTypeExprComplex(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnTypeExprComplexContext = ColumnTypeExprComplexContext;

class ColumnTypeExprEnumContext extends ColumnTypeExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	enumValue = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(EnumValueContext);
	    } else {
	        return this.getTypedRuleContext(EnumValueContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnTypeExprEnum(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnTypeExprEnum(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnTypeExprEnum(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnTypeExprEnumContext = ColumnTypeExprEnumContext;

class ColumnExprListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_columnExprList;
    }

	columnsExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnsExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnsExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnsExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_columnsExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ColumnsExprColumnContext extends ColumnsExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnsExprColumn(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnsExprColumn(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnsExprColumn(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnsExprColumnContext = ColumnsExprColumnContext;

class ColumnsExprAsteriskContext extends ColumnsExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASTERISK() {
	    return this.getToken(ClickHouseParser.ASTERISK, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	DOT() {
	    return this.getToken(ClickHouseParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnsExprAsterisk(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnsExprAsterisk(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnsExprAsterisk(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnsExprAsteriskContext = ColumnsExprAsteriskContext;

class ColumnsExprSubqueryContext extends ColumnsExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	selectUnionStmt() {
	    return this.getTypedRuleContext(SelectUnionStmtContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnsExprSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnsExprSubquery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnsExprSubquery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnsExprSubqueryContext = ColumnsExprSubqueryContext;

class ColumnExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_columnExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class ColumnExprTernaryOpContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	QUERY() {
	    return this.getToken(ClickHouseParser.QUERY, 0);
	};

	COLON() {
	    return this.getToken(ClickHouseParser.COLON, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprTernaryOp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprTernaryOp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprTernaryOp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprTernaryOpContext = ColumnExprTernaryOpContext;

class ColumnExprAliasContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	AS() {
	    return this.getToken(ClickHouseParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprAliasContext = ColumnExprAliasContext;

class ColumnExprExtractContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	EXTRACT() {
	    return this.getToken(ClickHouseParser.EXTRACT, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	FROM() {
	    return this.getToken(ClickHouseParser.FROM, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprExtract(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprExtract(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprExtract(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprExtractContext = ColumnExprExtractContext;

class ColumnExprNegateContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DASH() {
	    return this.getToken(ClickHouseParser.DASH, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprNegate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprNegate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprNegate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprNegateContext = ColumnExprNegateContext;

class ColumnExprSubqueryContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	selectUnionStmt() {
	    return this.getTypedRuleContext(SelectUnionStmtContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprSubquery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprSubquery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprSubqueryContext = ColumnExprSubqueryContext;

class ColumnExprLiteralContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprLiteralContext = ColumnExprLiteralContext;

class ColumnExprArrayContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LBRACKET() {
	    return this.getToken(ClickHouseParser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(ClickHouseParser.RBRACKET, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprArray(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprArray(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprArray(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprArrayContext = ColumnExprArrayContext;

class ColumnExprSubstringContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	SUBSTRING() {
	    return this.getToken(ClickHouseParser.SUBSTRING, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	FROM() {
	    return this.getToken(ClickHouseParser.FROM, 0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	FOR() {
	    return this.getToken(ClickHouseParser.FOR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprSubstring(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprSubstring(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprSubstring(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprSubstringContext = ColumnExprSubstringContext;

class ColumnExprCastContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CAST() {
	    return this.getToken(ClickHouseParser.CAST, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	AS() {
	    return this.getToken(ClickHouseParser.AS, 0);
	};

	columnTypeExpr() {
	    return this.getTypedRuleContext(ColumnTypeExprContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprCast(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprCast(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprCast(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprCastContext = ColumnExprCastContext;

class ColumnExprOrContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	OR() {
	    return this.getToken(ClickHouseParser.OR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprOr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprOr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprOr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprOrContext = ColumnExprOrContext;

class ColumnExprPrecedence1Context extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	ASTERISK() {
	    return this.getToken(ClickHouseParser.ASTERISK, 0);
	};

	SLASH() {
	    return this.getToken(ClickHouseParser.SLASH, 0);
	};

	PERCENT() {
	    return this.getToken(ClickHouseParser.PERCENT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprPrecedence1(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprPrecedence1(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprPrecedence1(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprPrecedence1Context = ColumnExprPrecedence1Context;

class ColumnExprPrecedence2Context extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	PLUS() {
	    return this.getToken(ClickHouseParser.PLUS, 0);
	};

	DASH() {
	    return this.getToken(ClickHouseParser.DASH, 0);
	};

	CONCAT() {
	    return this.getToken(ClickHouseParser.CONCAT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprPrecedence2(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprPrecedence2(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprPrecedence2(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprPrecedence2Context = ColumnExprPrecedence2Context;

class ColumnExprPrecedence3Context extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	EQ_DOUBLE() {
	    return this.getToken(ClickHouseParser.EQ_DOUBLE, 0);
	};

	EQ_SINGLE() {
	    return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
	};

	NOT_EQ() {
	    return this.getToken(ClickHouseParser.NOT_EQ, 0);
	};

	LE() {
	    return this.getToken(ClickHouseParser.LE, 0);
	};

	GE() {
	    return this.getToken(ClickHouseParser.GE, 0);
	};

	LT() {
	    return this.getToken(ClickHouseParser.LT, 0);
	};

	GT() {
	    return this.getToken(ClickHouseParser.GT, 0);
	};

	IN() {
	    return this.getToken(ClickHouseParser.IN, 0);
	};

	LIKE() {
	    return this.getToken(ClickHouseParser.LIKE, 0);
	};

	ILIKE() {
	    return this.getToken(ClickHouseParser.ILIKE, 0);
	};

	GLOBAL() {
	    return this.getToken(ClickHouseParser.GLOBAL, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprPrecedence3(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprPrecedence3(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprPrecedence3(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprPrecedence3Context = ColumnExprPrecedence3Context;

class ColumnExprIntervalContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	INTERVAL() {
	    return this.getToken(ClickHouseParser.INTERVAL, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprIntervalContext = ColumnExprIntervalContext;

class ColumnExprIsNullContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	IS() {
	    return this.getToken(ClickHouseParser.IS, 0);
	};

	NULL_SQL() {
	    return this.getToken(ClickHouseParser.NULL_SQL, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprIsNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprIsNull(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprIsNull(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprIsNullContext = ColumnExprIsNullContext;

class ColumnExprWinFunctionTargetContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	OVER() {
	    return this.getToken(ClickHouseParser.OVER, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprWinFunctionTarget(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprWinFunctionTarget(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprWinFunctionTarget(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprWinFunctionTargetContext = ColumnExprWinFunctionTargetContext;

class ColumnExprTrimContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TRIM() {
	    return this.getToken(ClickHouseParser.TRIM, 0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	FROM() {
	    return this.getToken(ClickHouseParser.FROM, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	BOTH() {
	    return this.getToken(ClickHouseParser.BOTH, 0);
	};

	LEADING() {
	    return this.getToken(ClickHouseParser.LEADING, 0);
	};

	TRAILING() {
	    return this.getToken(ClickHouseParser.TRAILING, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprTrim(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprTrim(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprTrim(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprTrimContext = ColumnExprTrimContext;

class ColumnExprTupleContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprTuple(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprTuple(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprTuple(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprTupleContext = ColumnExprTupleContext;

class ColumnExprArrayAccessContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	LBRACKET() {
	    return this.getToken(ClickHouseParser.LBRACKET, 0);
	};

	RBRACKET() {
	    return this.getToken(ClickHouseParser.RBRACKET, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprArrayAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprArrayAccess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprArrayAccess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprArrayAccessContext = ColumnExprArrayAccessContext;

class ColumnExprBetweenContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	BETWEEN() {
	    return this.getToken(ClickHouseParser.BETWEEN, 0);
	};

	AND() {
	    return this.getToken(ClickHouseParser.AND, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprBetween(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprBetween(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprBetween(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprBetweenContext = ColumnExprBetweenContext;

class ColumnExprParensContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprParens(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprParens(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprParens(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprParensContext = ColumnExprParensContext;

class ColumnExprTimestampContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	TIMESTAMP() {
	    return this.getToken(ClickHouseParser.TIMESTAMP, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprTimestamp(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprTimestamp(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprTimestamp(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprTimestampContext = ColumnExprTimestampContext;

class ColumnExprAndContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	AND() {
	    return this.getToken(ClickHouseParser.AND, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprAnd(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprAnd(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprAnd(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprAndContext = ColumnExprAndContext;

class ColumnExprTupleAccessContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	DOT() {
	    return this.getToken(ClickHouseParser.DOT, 0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprTupleAccess(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprTupleAccess(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprTupleAccess(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprTupleAccessContext = ColumnExprTupleAccessContext;

class ColumnExprCaseContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	CASE() {
	    return this.getToken(ClickHouseParser.CASE, 0);
	};

	END() {
	    return this.getToken(ClickHouseParser.END, 0);
	};

	columnExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnExprContext,i);
	    }
	};

	WHEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.WHEN);
	    } else {
	        return this.getToken(ClickHouseParser.WHEN, i);
	    }
	};


	THEN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.THEN);
	    } else {
	        return this.getToken(ClickHouseParser.THEN, i);
	    }
	};


	ELSE() {
	    return this.getToken(ClickHouseParser.ELSE, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprCase(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprCase(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprCase(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprCaseContext = ColumnExprCaseContext;

class ColumnExprDateContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	DATE() {
	    return this.getToken(ClickHouseParser.DATE, 0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprDate(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprDate(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprDate(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprDateContext = ColumnExprDateContext;

class ColumnExprNotContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprNot(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprNot(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprNot(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprNotContext = ColumnExprNotContext;

class ColumnExprWinFunctionContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	OVER() {
	    return this.getToken(ClickHouseParser.OVER, 0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.LPAREN);
	    } else {
	        return this.getToken(ClickHouseParser.LPAREN, i);
	    }
	};


	windowExpr() {
	    return this.getTypedRuleContext(WindowExprContext,0);
	};

	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.RPAREN);
	    } else {
	        return this.getToken(ClickHouseParser.RPAREN, i);
	    }
	};


	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprWinFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprWinFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprWinFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprWinFunctionContext = ColumnExprWinFunctionContext;

class ColumnExprIdentifierContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	columnIdentifier() {
	    return this.getTypedRuleContext(ColumnIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprIdentifierContext = ColumnExprIdentifierContext;

class ColumnExprFunctionContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.LPAREN);
	    } else {
	        return this.getToken(ClickHouseParser.LPAREN, i);
	    }
	};


	RPAREN = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.RPAREN);
	    } else {
	        return this.getToken(ClickHouseParser.RPAREN, i);
	    }
	};


	DISTINCT() {
	    return this.getToken(ClickHouseParser.DISTINCT, 0);
	};

	columnArgList() {
	    return this.getTypedRuleContext(ColumnArgListContext,0);
	};

	columnExprList() {
	    return this.getTypedRuleContext(ColumnExprListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprFunctionContext = ColumnExprFunctionContext;

class ColumnExprAsteriskContext extends ColumnExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	ASTERISK() {
	    return this.getToken(ClickHouseParser.ASTERISK, 0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	DOT() {
	    return this.getToken(ClickHouseParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnExprAsterisk(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnExprAsterisk(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnExprAsterisk(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.ColumnExprAsteriskContext = ColumnExprAsteriskContext;

class ColumnArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_columnArgList;
    }

	columnArgExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(ColumnArgExprContext);
	    } else {
	        return this.getTypedRuleContext(ColumnArgExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnArgList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnArgList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnArgExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_columnArgExpr;
    }

	columnLambdaExpr() {
	    return this.getTypedRuleContext(ColumnLambdaExprContext,0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnArgExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnArgExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnArgExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnLambdaExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_columnLambdaExpr;
    }

	ARROW() {
	    return this.getToken(ClickHouseParser.ARROW, 0);
	};

	columnExpr() {
	    return this.getTypedRuleContext(ColumnExprContext,0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnLambdaExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnLambdaExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnLambdaExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class ColumnIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_columnIdentifier;
    }

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	DOT() {
	    return this.getToken(ClickHouseParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterColumnIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitColumnIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitColumnIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NestedIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_nestedIdentifier;
    }

	identifier = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(IdentifierContext);
	    } else {
	        return this.getTypedRuleContext(IdentifierContext,i);
	    }
	};

	DOT() {
	    return this.getToken(ClickHouseParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterNestedIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitNestedIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitNestedIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableExpr;
    }


	 
		copyFrom(ctx) {
			super.copyFrom(ctx);
		}

}


class TableExprIdentifierContext extends TableExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableIdentifier() {
	    return this.getTypedRuleContext(TableIdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableExprIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableExprIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableExprIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.TableExprIdentifierContext = TableExprIdentifierContext;

class TableExprSubqueryContext extends TableExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	selectUnionStmt() {
	    return this.getTypedRuleContext(SelectUnionStmtContext,0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableExprSubquery(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableExprSubquery(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableExprSubquery(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.TableExprSubqueryContext = TableExprSubqueryContext;

class TableExprAliasContext extends TableExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableExpr() {
	    return this.getTypedRuleContext(TableExprContext,0);
	};

	alias() {
	    return this.getTypedRuleContext(AliasContext,0);
	};

	AS() {
	    return this.getToken(ClickHouseParser.AS, 0);
	};

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableExprAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableExprAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableExprAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.TableExprAliasContext = TableExprAliasContext;

class TableExprFunctionContext extends TableExprContext {

    constructor(parser, ctx) {
        super(parser);
        super.copyFrom(ctx);
    }

	tableFunctionExpr() {
	    return this.getTypedRuleContext(TableFunctionExprContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableExprFunction(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableExprFunction(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableExprFunction(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}

ClickHouseParser.TableExprFunctionContext = TableExprFunctionContext;

class TableFunctionExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableFunctionExpr;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	LPAREN() {
	    return this.getToken(ClickHouseParser.LPAREN, 0);
	};

	RPAREN() {
	    return this.getToken(ClickHouseParser.RPAREN, 0);
	};

	tableArgList() {
	    return this.getTypedRuleContext(TableArgListContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableFunctionExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableFunctionExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableFunctionExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	databaseIdentifier() {
	    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
	};

	DOT() {
	    return this.getToken(ClickHouseParser.DOT, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableArgListContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableArgList;
    }

	tableArgExpr = function(i) {
	    if(i===undefined) {
	        i = null;
	    }
	    if(i===null) {
	        return this.getTypedRuleContexts(TableArgExprContext);
	    } else {
	        return this.getTypedRuleContext(TableArgExprContext,i);
	    }
	};

	COMMA = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.COMMA);
	    } else {
	        return this.getToken(ClickHouseParser.COMMA, i);
	    }
	};


	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableArgList(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableArgList(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableArgList(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class TableArgExprContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_tableArgExpr;
    }

	nestedIdentifier() {
	    return this.getTypedRuleContext(NestedIdentifierContext,0);
	};

	tableFunctionExpr() {
	    return this.getTypedRuleContext(TableFunctionExprContext,0);
	};

	literal() {
	    return this.getTypedRuleContext(LiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterTableArgExpr(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitTableArgExpr(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitTableArgExpr(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class DatabaseIdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_databaseIdentifier;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterDatabaseIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitDatabaseIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitDatabaseIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class FloatingLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_floatingLiteral;
    }

	FLOATING_LITERAL() {
	    return this.getToken(ClickHouseParser.FLOATING_LITERAL, 0);
	};

	DOT() {
	    return this.getToken(ClickHouseParser.DOT, 0);
	};

	DECIMAL_LITERAL = function(i) {
		if(i===undefined) {
			i = null;
		}
	    if(i===null) {
	        return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
	    } else {
	        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
	    }
	};


	OCTAL_LITERAL() {
	    return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterFloatingLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitFloatingLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitFloatingLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class NumberLiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_numberLiteral;
    }

	floatingLiteral() {
	    return this.getTypedRuleContext(FloatingLiteralContext,0);
	};

	OCTAL_LITERAL() {
	    return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
	};

	DECIMAL_LITERAL() {
	    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
	};

	HEXADECIMAL_LITERAL() {
	    return this.getToken(ClickHouseParser.HEXADECIMAL_LITERAL, 0);
	};

	INF() {
	    return this.getToken(ClickHouseParser.INF, 0);
	};

	NAN_SQL() {
	    return this.getToken(ClickHouseParser.NAN_SQL, 0);
	};

	PLUS() {
	    return this.getToken(ClickHouseParser.PLUS, 0);
	};

	DASH() {
	    return this.getToken(ClickHouseParser.DASH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterNumberLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitNumberLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitNumberLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class LiteralContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_literal;
    }

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	NULL_SQL() {
	    return this.getToken(ClickHouseParser.NULL_SQL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterLiteral(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitLiteral(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitLiteral(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IntervalContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_interval;
    }

	SECOND() {
	    return this.getToken(ClickHouseParser.SECOND, 0);
	};

	MINUTE() {
	    return this.getToken(ClickHouseParser.MINUTE, 0);
	};

	HOUR() {
	    return this.getToken(ClickHouseParser.HOUR, 0);
	};

	DAY() {
	    return this.getToken(ClickHouseParser.DAY, 0);
	};

	WEEK() {
	    return this.getToken(ClickHouseParser.WEEK, 0);
	};

	MONTH() {
	    return this.getToken(ClickHouseParser.MONTH, 0);
	};

	QUARTER() {
	    return this.getToken(ClickHouseParser.QUARTER, 0);
	};

	YEAR() {
	    return this.getToken(ClickHouseParser.YEAR, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterInterval(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitInterval(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitInterval(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_keyword;
    }

	AFTER() {
	    return this.getToken(ClickHouseParser.AFTER, 0);
	};

	ALIAS() {
	    return this.getToken(ClickHouseParser.ALIAS, 0);
	};

	ALL() {
	    return this.getToken(ClickHouseParser.ALL, 0);
	};

	ALTER() {
	    return this.getToken(ClickHouseParser.ALTER, 0);
	};

	AND() {
	    return this.getToken(ClickHouseParser.AND, 0);
	};

	ANTI() {
	    return this.getToken(ClickHouseParser.ANTI, 0);
	};

	ANY() {
	    return this.getToken(ClickHouseParser.ANY, 0);
	};

	ARRAY() {
	    return this.getToken(ClickHouseParser.ARRAY, 0);
	};

	AS() {
	    return this.getToken(ClickHouseParser.AS, 0);
	};

	ASCENDING() {
	    return this.getToken(ClickHouseParser.ASCENDING, 0);
	};

	ASOF() {
	    return this.getToken(ClickHouseParser.ASOF, 0);
	};

	AST() {
	    return this.getToken(ClickHouseParser.AST, 0);
	};

	ASYNC() {
	    return this.getToken(ClickHouseParser.ASYNC, 0);
	};

	ATTACH() {
	    return this.getToken(ClickHouseParser.ATTACH, 0);
	};

	BETWEEN() {
	    return this.getToken(ClickHouseParser.BETWEEN, 0);
	};

	BOTH() {
	    return this.getToken(ClickHouseParser.BOTH, 0);
	};

	BY() {
	    return this.getToken(ClickHouseParser.BY, 0);
	};

	CASE() {
	    return this.getToken(ClickHouseParser.CASE, 0);
	};

	CAST() {
	    return this.getToken(ClickHouseParser.CAST, 0);
	};

	CHECK() {
	    return this.getToken(ClickHouseParser.CHECK, 0);
	};

	CLEAR() {
	    return this.getToken(ClickHouseParser.CLEAR, 0);
	};

	CLUSTER() {
	    return this.getToken(ClickHouseParser.CLUSTER, 0);
	};

	CODEC() {
	    return this.getToken(ClickHouseParser.CODEC, 0);
	};

	COLLATE() {
	    return this.getToken(ClickHouseParser.COLLATE, 0);
	};

	COLUMN() {
	    return this.getToken(ClickHouseParser.COLUMN, 0);
	};

	COMMENT() {
	    return this.getToken(ClickHouseParser.COMMENT, 0);
	};

	CONSTRAINT() {
	    return this.getToken(ClickHouseParser.CONSTRAINT, 0);
	};

	CREATE() {
	    return this.getToken(ClickHouseParser.CREATE, 0);
	};

	CROSS() {
	    return this.getToken(ClickHouseParser.CROSS, 0);
	};

	CUBE() {
	    return this.getToken(ClickHouseParser.CUBE, 0);
	};

	CURRENT() {
	    return this.getToken(ClickHouseParser.CURRENT, 0);
	};

	DATABASE() {
	    return this.getToken(ClickHouseParser.DATABASE, 0);
	};

	DATABASES() {
	    return this.getToken(ClickHouseParser.DATABASES, 0);
	};

	DATE() {
	    return this.getToken(ClickHouseParser.DATE, 0);
	};

	DEDUPLICATE() {
	    return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
	};

	DEFAULT() {
	    return this.getToken(ClickHouseParser.DEFAULT, 0);
	};

	DELAY() {
	    return this.getToken(ClickHouseParser.DELAY, 0);
	};

	DELETE() {
	    return this.getToken(ClickHouseParser.DELETE, 0);
	};

	DESCRIBE() {
	    return this.getToken(ClickHouseParser.DESCRIBE, 0);
	};

	DESC() {
	    return this.getToken(ClickHouseParser.DESC, 0);
	};

	DESCENDING() {
	    return this.getToken(ClickHouseParser.DESCENDING, 0);
	};

	DETACH() {
	    return this.getToken(ClickHouseParser.DETACH, 0);
	};

	DICTIONARIES() {
	    return this.getToken(ClickHouseParser.DICTIONARIES, 0);
	};

	DICTIONARY() {
	    return this.getToken(ClickHouseParser.DICTIONARY, 0);
	};

	DISK() {
	    return this.getToken(ClickHouseParser.DISK, 0);
	};

	DISTINCT() {
	    return this.getToken(ClickHouseParser.DISTINCT, 0);
	};

	DISTRIBUTED() {
	    return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
	};

	DROP() {
	    return this.getToken(ClickHouseParser.DROP, 0);
	};

	ELSE() {
	    return this.getToken(ClickHouseParser.ELSE, 0);
	};

	END() {
	    return this.getToken(ClickHouseParser.END, 0);
	};

	ENGINE() {
	    return this.getToken(ClickHouseParser.ENGINE, 0);
	};

	EVENTS() {
	    return this.getToken(ClickHouseParser.EVENTS, 0);
	};

	EXISTS() {
	    return this.getToken(ClickHouseParser.EXISTS, 0);
	};

	EXPLAIN() {
	    return this.getToken(ClickHouseParser.EXPLAIN, 0);
	};

	EXPRESSION() {
	    return this.getToken(ClickHouseParser.EXPRESSION, 0);
	};

	EXTRACT() {
	    return this.getToken(ClickHouseParser.EXTRACT, 0);
	};

	FETCHES() {
	    return this.getToken(ClickHouseParser.FETCHES, 0);
	};

	FINAL() {
	    return this.getToken(ClickHouseParser.FINAL, 0);
	};

	FIRST() {
	    return this.getToken(ClickHouseParser.FIRST, 0);
	};

	FLUSH() {
	    return this.getToken(ClickHouseParser.FLUSH, 0);
	};

	FOR() {
	    return this.getToken(ClickHouseParser.FOR, 0);
	};

	FOLLOWING() {
	    return this.getToken(ClickHouseParser.FOLLOWING, 0);
	};

	FORMAT() {
	    return this.getToken(ClickHouseParser.FORMAT, 0);
	};

	FREEZE() {
	    return this.getToken(ClickHouseParser.FREEZE, 0);
	};

	FROM() {
	    return this.getToken(ClickHouseParser.FROM, 0);
	};

	FULL() {
	    return this.getToken(ClickHouseParser.FULL, 0);
	};

	FUNCTION() {
	    return this.getToken(ClickHouseParser.FUNCTION, 0);
	};

	GLOBAL() {
	    return this.getToken(ClickHouseParser.GLOBAL, 0);
	};

	GRANULARITY() {
	    return this.getToken(ClickHouseParser.GRANULARITY, 0);
	};

	GROUP() {
	    return this.getToken(ClickHouseParser.GROUP, 0);
	};

	HAVING() {
	    return this.getToken(ClickHouseParser.HAVING, 0);
	};

	HIERARCHICAL() {
	    return this.getToken(ClickHouseParser.HIERARCHICAL, 0);
	};

	ID() {
	    return this.getToken(ClickHouseParser.ID, 0);
	};

	IF() {
	    return this.getToken(ClickHouseParser.IF, 0);
	};

	ILIKE() {
	    return this.getToken(ClickHouseParser.ILIKE, 0);
	};

	IN() {
	    return this.getToken(ClickHouseParser.IN, 0);
	};

	INDEX() {
	    return this.getToken(ClickHouseParser.INDEX, 0);
	};

	INJECTIVE() {
	    return this.getToken(ClickHouseParser.INJECTIVE, 0);
	};

	INNER() {
	    return this.getToken(ClickHouseParser.INNER, 0);
	};

	INSERT() {
	    return this.getToken(ClickHouseParser.INSERT, 0);
	};

	INTERVAL() {
	    return this.getToken(ClickHouseParser.INTERVAL, 0);
	};

	INTO() {
	    return this.getToken(ClickHouseParser.INTO, 0);
	};

	IS() {
	    return this.getToken(ClickHouseParser.IS, 0);
	};

	IS_OBJECT_ID() {
	    return this.getToken(ClickHouseParser.IS_OBJECT_ID, 0);
	};

	JOIN() {
	    return this.getToken(ClickHouseParser.JOIN, 0);
	};

	JSON_FALSE() {
	    return this.getToken(ClickHouseParser.JSON_FALSE, 0);
	};

	JSON_TRUE() {
	    return this.getToken(ClickHouseParser.JSON_TRUE, 0);
	};

	KEY() {
	    return this.getToken(ClickHouseParser.KEY, 0);
	};

	KILL() {
	    return this.getToken(ClickHouseParser.KILL, 0);
	};

	LAST() {
	    return this.getToken(ClickHouseParser.LAST, 0);
	};

	LAYOUT() {
	    return this.getToken(ClickHouseParser.LAYOUT, 0);
	};

	LEADING() {
	    return this.getToken(ClickHouseParser.LEADING, 0);
	};

	LEFT() {
	    return this.getToken(ClickHouseParser.LEFT, 0);
	};

	LIFETIME() {
	    return this.getToken(ClickHouseParser.LIFETIME, 0);
	};

	LIKE() {
	    return this.getToken(ClickHouseParser.LIKE, 0);
	};

	LIMIT() {
	    return this.getToken(ClickHouseParser.LIMIT, 0);
	};

	LIVE() {
	    return this.getToken(ClickHouseParser.LIVE, 0);
	};

	LOCAL() {
	    return this.getToken(ClickHouseParser.LOCAL, 0);
	};

	LOGS() {
	    return this.getToken(ClickHouseParser.LOGS, 0);
	};

	MATERIALIZE() {
	    return this.getToken(ClickHouseParser.MATERIALIZE, 0);
	};

	MATERIALIZED() {
	    return this.getToken(ClickHouseParser.MATERIALIZED, 0);
	};

	MAX() {
	    return this.getToken(ClickHouseParser.MAX, 0);
	};

	MERGES() {
	    return this.getToken(ClickHouseParser.MERGES, 0);
	};

	MIN() {
	    return this.getToken(ClickHouseParser.MIN, 0);
	};

	MODIFY() {
	    return this.getToken(ClickHouseParser.MODIFY, 0);
	};

	MOVE() {
	    return this.getToken(ClickHouseParser.MOVE, 0);
	};

	MUTATION() {
	    return this.getToken(ClickHouseParser.MUTATION, 0);
	};

	NO() {
	    return this.getToken(ClickHouseParser.NO, 0);
	};

	NOT() {
	    return this.getToken(ClickHouseParser.NOT, 0);
	};

	NULLS() {
	    return this.getToken(ClickHouseParser.NULLS, 0);
	};

	OFFSET() {
	    return this.getToken(ClickHouseParser.OFFSET, 0);
	};

	ON() {
	    return this.getToken(ClickHouseParser.ON, 0);
	};

	OPTIMIZE() {
	    return this.getToken(ClickHouseParser.OPTIMIZE, 0);
	};

	OR() {
	    return this.getToken(ClickHouseParser.OR, 0);
	};

	ORDER() {
	    return this.getToken(ClickHouseParser.ORDER, 0);
	};

	OUTER() {
	    return this.getToken(ClickHouseParser.OUTER, 0);
	};

	OUTFILE() {
	    return this.getToken(ClickHouseParser.OUTFILE, 0);
	};

	OVER() {
	    return this.getToken(ClickHouseParser.OVER, 0);
	};

	PARTITION() {
	    return this.getToken(ClickHouseParser.PARTITION, 0);
	};

	POPULATE() {
	    return this.getToken(ClickHouseParser.POPULATE, 0);
	};

	PRECEDING() {
	    return this.getToken(ClickHouseParser.PRECEDING, 0);
	};

	PREWHERE() {
	    return this.getToken(ClickHouseParser.PREWHERE, 0);
	};

	PRIMARY() {
	    return this.getToken(ClickHouseParser.PRIMARY, 0);
	};

	RANGE() {
	    return this.getToken(ClickHouseParser.RANGE, 0);
	};

	RELOAD() {
	    return this.getToken(ClickHouseParser.RELOAD, 0);
	};

	REMOVE() {
	    return this.getToken(ClickHouseParser.REMOVE, 0);
	};

	RENAME() {
	    return this.getToken(ClickHouseParser.RENAME, 0);
	};

	REPLACE() {
	    return this.getToken(ClickHouseParser.REPLACE, 0);
	};

	REPLICA() {
	    return this.getToken(ClickHouseParser.REPLICA, 0);
	};

	REPLICATED() {
	    return this.getToken(ClickHouseParser.REPLICATED, 0);
	};

	RIGHT() {
	    return this.getToken(ClickHouseParser.RIGHT, 0);
	};

	ROLLUP() {
	    return this.getToken(ClickHouseParser.ROLLUP, 0);
	};

	ROW() {
	    return this.getToken(ClickHouseParser.ROW, 0);
	};

	ROWS() {
	    return this.getToken(ClickHouseParser.ROWS, 0);
	};

	SAMPLE() {
	    return this.getToken(ClickHouseParser.SAMPLE, 0);
	};

	SELECT() {
	    return this.getToken(ClickHouseParser.SELECT, 0);
	};

	SEMI() {
	    return this.getToken(ClickHouseParser.SEMI, 0);
	};

	SENDS() {
	    return this.getToken(ClickHouseParser.SENDS, 0);
	};

	SET() {
	    return this.getToken(ClickHouseParser.SET, 0);
	};

	SETTINGS() {
	    return this.getToken(ClickHouseParser.SETTINGS, 0);
	};

	SHOW() {
	    return this.getToken(ClickHouseParser.SHOW, 0);
	};

	SOURCE() {
	    return this.getToken(ClickHouseParser.SOURCE, 0);
	};

	START() {
	    return this.getToken(ClickHouseParser.START, 0);
	};

	STOP() {
	    return this.getToken(ClickHouseParser.STOP, 0);
	};

	SUBSTRING() {
	    return this.getToken(ClickHouseParser.SUBSTRING, 0);
	};

	SYNC() {
	    return this.getToken(ClickHouseParser.SYNC, 0);
	};

	SYNTAX() {
	    return this.getToken(ClickHouseParser.SYNTAX, 0);
	};

	SYSTEM() {
	    return this.getToken(ClickHouseParser.SYSTEM, 0);
	};

	TABLE() {
	    return this.getToken(ClickHouseParser.TABLE, 0);
	};

	TABLES() {
	    return this.getToken(ClickHouseParser.TABLES, 0);
	};

	TEMPORARY() {
	    return this.getToken(ClickHouseParser.TEMPORARY, 0);
	};

	TEST() {
	    return this.getToken(ClickHouseParser.TEST, 0);
	};

	THEN() {
	    return this.getToken(ClickHouseParser.THEN, 0);
	};

	TIES() {
	    return this.getToken(ClickHouseParser.TIES, 0);
	};

	TIMEOUT() {
	    return this.getToken(ClickHouseParser.TIMEOUT, 0);
	};

	TIMESTAMP() {
	    return this.getToken(ClickHouseParser.TIMESTAMP, 0);
	};

	TOTALS() {
	    return this.getToken(ClickHouseParser.TOTALS, 0);
	};

	TRAILING() {
	    return this.getToken(ClickHouseParser.TRAILING, 0);
	};

	TRIM() {
	    return this.getToken(ClickHouseParser.TRIM, 0);
	};

	TRUNCATE() {
	    return this.getToken(ClickHouseParser.TRUNCATE, 0);
	};

	TO() {
	    return this.getToken(ClickHouseParser.TO, 0);
	};

	TOP() {
	    return this.getToken(ClickHouseParser.TOP, 0);
	};

	TTL() {
	    return this.getToken(ClickHouseParser.TTL, 0);
	};

	TYPE() {
	    return this.getToken(ClickHouseParser.TYPE, 0);
	};

	UNBOUNDED() {
	    return this.getToken(ClickHouseParser.UNBOUNDED, 0);
	};

	UNION() {
	    return this.getToken(ClickHouseParser.UNION, 0);
	};

	UPDATE() {
	    return this.getToken(ClickHouseParser.UPDATE, 0);
	};

	USE() {
	    return this.getToken(ClickHouseParser.USE, 0);
	};

	USING() {
	    return this.getToken(ClickHouseParser.USING, 0);
	};

	UUID() {
	    return this.getToken(ClickHouseParser.UUID, 0);
	};

	VALUES() {
	    return this.getToken(ClickHouseParser.VALUES, 0);
	};

	VIEW() {
	    return this.getToken(ClickHouseParser.VIEW, 0);
	};

	VOLUME() {
	    return this.getToken(ClickHouseParser.VOLUME, 0);
	};

	WATCH() {
	    return this.getToken(ClickHouseParser.WATCH, 0);
	};

	WHEN() {
	    return this.getToken(ClickHouseParser.WHEN, 0);
	};

	WHERE() {
	    return this.getToken(ClickHouseParser.WHERE, 0);
	};

	WINDOW() {
	    return this.getToken(ClickHouseParser.WINDOW, 0);
	};

	WITH() {
	    return this.getToken(ClickHouseParser.WITH, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterKeyword(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitKeyword(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitKeyword(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class KeywordForAliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_keywordForAlias;
    }

	DATE() {
	    return this.getToken(ClickHouseParser.DATE, 0);
	};

	FIRST() {
	    return this.getToken(ClickHouseParser.FIRST, 0);
	};

	ID() {
	    return this.getToken(ClickHouseParser.ID, 0);
	};

	KEY() {
	    return this.getToken(ClickHouseParser.KEY, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterKeywordForAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitKeywordForAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitKeywordForAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class AliasContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_alias;
    }

	IDENTIFIER() {
	    return this.getToken(ClickHouseParser.IDENTIFIER, 0);
	};

	keywordForAlias() {
	    return this.getTypedRuleContext(KeywordForAliasContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterAlias(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitAlias(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitAlias(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_identifier;
    }

	IDENTIFIER() {
	    return this.getToken(ClickHouseParser.IDENTIFIER, 0);
	};

	interval() {
	    return this.getTypedRuleContext(IntervalContext,0);
	};

	keyword() {
	    return this.getTypedRuleContext(KeywordContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterIdentifier(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitIdentifier(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitIdentifier(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class IdentifierOrNullContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_identifierOrNull;
    }

	identifier() {
	    return this.getTypedRuleContext(IdentifierContext,0);
	};

	NULL_SQL() {
	    return this.getToken(ClickHouseParser.NULL_SQL, 0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterIdentifierOrNull(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitIdentifierOrNull(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitIdentifierOrNull(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}



class EnumValueContext extends antlr4.ParserRuleContext {

    constructor(parser, parent, invokingState) {
        if(parent===undefined) {
            parent = null;
        }
        if(invokingState===undefined || invokingState===null) {
            invokingState = -1;
        }
        super(parent, invokingState);
        this.parser = parser;
        this.ruleIndex = ClickHouseParser.RULE_enumValue;
    }

	STRING_LITERAL() {
	    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
	};

	EQ_SINGLE() {
	    return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
	};

	numberLiteral() {
	    return this.getTypedRuleContext(NumberLiteralContext,0);
	};

	enterRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.enterEnumValue(this);
		}
	}

	exitRule(listener) {
	    if(listener instanceof ClickHouseParserListener ) {
	        listener.exitEnumValue(this);
		}
	}

	accept(visitor) {
	    if ( visitor instanceof ClickHouseParserVisitor ) {
	        return visitor.visitEnumValue(this);
	    } else {
	        return visitor.visitChildren(this);
	    }
	}


}




ClickHouseParser.SqlContext = SqlContext; 
ClickHouseParser.QueryStmtContext = QueryStmtContext; 
ClickHouseParser.QueryContext = QueryContext; 
ClickHouseParser.AlterStmtContext = AlterStmtContext; 
ClickHouseParser.AlterTableClauseContext = AlterTableClauseContext; 
ClickHouseParser.AssignmentExprListContext = AssignmentExprListContext; 
ClickHouseParser.AssignmentExprContext = AssignmentExprContext; 
ClickHouseParser.TableColumnPropertyTypeContext = TableColumnPropertyTypeContext; 
ClickHouseParser.PartitionClauseContext = PartitionClauseContext; 
ClickHouseParser.AttachStmtContext = AttachStmtContext; 
ClickHouseParser.CheckStmtContext = CheckStmtContext; 
ClickHouseParser.CreateStmtContext = CreateStmtContext; 
ClickHouseParser.DictionarySchemaClauseContext = DictionarySchemaClauseContext; 
ClickHouseParser.DictionaryAttrDfntContext = DictionaryAttrDfntContext; 
ClickHouseParser.DictionaryEngineClauseContext = DictionaryEngineClauseContext; 
ClickHouseParser.DictionaryPrimaryKeyClauseContext = DictionaryPrimaryKeyClauseContext; 
ClickHouseParser.DictionaryArgExprContext = DictionaryArgExprContext; 
ClickHouseParser.SourceClauseContext = SourceClauseContext; 
ClickHouseParser.LifetimeClauseContext = LifetimeClauseContext; 
ClickHouseParser.LayoutClauseContext = LayoutClauseContext; 
ClickHouseParser.RangeClauseContext = RangeClauseContext; 
ClickHouseParser.DictionarySettingsClauseContext = DictionarySettingsClauseContext; 
ClickHouseParser.ClusterClauseContext = ClusterClauseContext; 
ClickHouseParser.UuidClauseContext = UuidClauseContext; 
ClickHouseParser.DestinationClauseContext = DestinationClauseContext; 
ClickHouseParser.SubqueryClauseContext = SubqueryClauseContext; 
ClickHouseParser.TableSchemaClauseContext = TableSchemaClauseContext; 
ClickHouseParser.EngineClauseContext = EngineClauseContext; 
ClickHouseParser.PartitionByClauseContext = PartitionByClauseContext; 
ClickHouseParser.PrimaryKeyClauseContext = PrimaryKeyClauseContext; 
ClickHouseParser.SampleByClauseContext = SampleByClauseContext; 
ClickHouseParser.TtlClauseContext = TtlClauseContext; 
ClickHouseParser.EngineExprContext = EngineExprContext; 
ClickHouseParser.TableElementExprContext = TableElementExprContext; 
ClickHouseParser.TableColumnDfntContext = TableColumnDfntContext; 
ClickHouseParser.TableColumnPropertyExprContext = TableColumnPropertyExprContext; 
ClickHouseParser.TableIndexDfntContext = TableIndexDfntContext; 
ClickHouseParser.TableProjectionDfntContext = TableProjectionDfntContext; 
ClickHouseParser.CodecExprContext = CodecExprContext; 
ClickHouseParser.CodecArgExprContext = CodecArgExprContext; 
ClickHouseParser.TtlExprContext = TtlExprContext; 
ClickHouseParser.DescribeStmtContext = DescribeStmtContext; 
ClickHouseParser.DropStmtContext = DropStmtContext; 
ClickHouseParser.ExistsStmtContext = ExistsStmtContext; 
ClickHouseParser.ExplainStmtContext = ExplainStmtContext; 
ClickHouseParser.InsertStmtContext = InsertStmtContext; 
ClickHouseParser.ColumnsClauseContext = ColumnsClauseContext; 
ClickHouseParser.DataClauseContext = DataClauseContext; 
ClickHouseParser.KillStmtContext = KillStmtContext; 
ClickHouseParser.OptimizeStmtContext = OptimizeStmtContext; 
ClickHouseParser.RenameStmtContext = RenameStmtContext; 
ClickHouseParser.ProjectionSelectStmtContext = ProjectionSelectStmtContext; 
ClickHouseParser.SelectUnionStmtContext = SelectUnionStmtContext; 
ClickHouseParser.SelectStmtWithParensContext = SelectStmtWithParensContext; 
ClickHouseParser.SelectStmtContext = SelectStmtContext; 
ClickHouseParser.WithClauseContext = WithClauseContext; 
ClickHouseParser.TopClauseContext = TopClauseContext; 
ClickHouseParser.FromClauseContext = FromClauseContext; 
ClickHouseParser.ArrayJoinClauseContext = ArrayJoinClauseContext; 
ClickHouseParser.WindowClauseContext = WindowClauseContext; 
ClickHouseParser.PrewhereClauseContext = PrewhereClauseContext; 
ClickHouseParser.WhereClauseContext = WhereClauseContext; 
ClickHouseParser.GroupByClauseContext = GroupByClauseContext; 
ClickHouseParser.HavingClauseContext = HavingClauseContext; 
ClickHouseParser.OrderByClauseContext = OrderByClauseContext; 
ClickHouseParser.ProjectionOrderByClauseContext = ProjectionOrderByClauseContext; 
ClickHouseParser.LimitByClauseContext = LimitByClauseContext; 
ClickHouseParser.LimitClauseContext = LimitClauseContext; 
ClickHouseParser.SettingsClauseContext = SettingsClauseContext; 
ClickHouseParser.JoinExprContext = JoinExprContext; 
ClickHouseParser.JoinOpContext = JoinOpContext; 
ClickHouseParser.JoinOpCrossContext = JoinOpCrossContext; 
ClickHouseParser.JoinConstraintClauseContext = JoinConstraintClauseContext; 
ClickHouseParser.SampleClauseContext = SampleClauseContext; 
ClickHouseParser.LimitExprContext = LimitExprContext; 
ClickHouseParser.OrderExprListContext = OrderExprListContext; 
ClickHouseParser.OrderExprContext = OrderExprContext; 
ClickHouseParser.RatioExprContext = RatioExprContext; 
ClickHouseParser.SettingExprListContext = SettingExprListContext; 
ClickHouseParser.SettingExprContext = SettingExprContext; 
ClickHouseParser.WindowExprContext = WindowExprContext; 
ClickHouseParser.WinPartitionByClauseContext = WinPartitionByClauseContext; 
ClickHouseParser.WinOrderByClauseContext = WinOrderByClauseContext; 
ClickHouseParser.WinFrameClauseContext = WinFrameClauseContext; 
ClickHouseParser.WinFrameExtendContext = WinFrameExtendContext; 
ClickHouseParser.WinFrameBoundContext = WinFrameBoundContext; 
ClickHouseParser.SetStmtContext = SetStmtContext; 
ClickHouseParser.ShowStmtContext = ShowStmtContext; 
ClickHouseParser.SystemStmtContext = SystemStmtContext; 
ClickHouseParser.TruncateStmtContext = TruncateStmtContext; 
ClickHouseParser.UseStmtContext = UseStmtContext; 
ClickHouseParser.WatchStmtContext = WatchStmtContext; 
ClickHouseParser.ColumnTypeExprContext = ColumnTypeExprContext; 
ClickHouseParser.ColumnExprListContext = ColumnExprListContext; 
ClickHouseParser.ColumnsExprContext = ColumnsExprContext; 
ClickHouseParser.ColumnExprContext = ColumnExprContext; 
ClickHouseParser.ColumnArgListContext = ColumnArgListContext; 
ClickHouseParser.ColumnArgExprContext = ColumnArgExprContext; 
ClickHouseParser.ColumnLambdaExprContext = ColumnLambdaExprContext; 
ClickHouseParser.ColumnIdentifierContext = ColumnIdentifierContext; 
ClickHouseParser.NestedIdentifierContext = NestedIdentifierContext; 
ClickHouseParser.TableExprContext = TableExprContext; 
ClickHouseParser.TableFunctionExprContext = TableFunctionExprContext; 
ClickHouseParser.TableIdentifierContext = TableIdentifierContext; 
ClickHouseParser.TableArgListContext = TableArgListContext; 
ClickHouseParser.TableArgExprContext = TableArgExprContext; 
ClickHouseParser.DatabaseIdentifierContext = DatabaseIdentifierContext; 
ClickHouseParser.FloatingLiteralContext = FloatingLiteralContext; 
ClickHouseParser.NumberLiteralContext = NumberLiteralContext; 
ClickHouseParser.LiteralContext = LiteralContext; 
ClickHouseParser.IntervalContext = IntervalContext; 
ClickHouseParser.KeywordContext = KeywordContext; 
ClickHouseParser.KeywordForAliasContext = KeywordForAliasContext; 
ClickHouseParser.AliasContext = AliasContext; 
ClickHouseParser.IdentifierContext = IdentifierContext; 
ClickHouseParser.IdentifierOrNullContext = IdentifierOrNullContext; 
ClickHouseParser.EnumValueContext = EnumValueContext; 
