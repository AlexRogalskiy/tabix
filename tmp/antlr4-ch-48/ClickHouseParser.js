// Generated from /Users/igor/sites/tabix.ts21/grammar/clickhouse/ClickHouseParser.g4 by ANTLR 4.8
// jshint ignore: start
var antlr4 = require('antlr4/index');
var ClickHouseParserListener = require('./ClickHouseParserListener').ClickHouseParserListener;
var ClickHouseParserVisitor = require('./ClickHouseParserVisitor').ClickHouseParserVisitor;

var grammarFileName = "ClickHouseParser.g4";


var serializedATN = ["\u0003\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964",
    "\u0003\u00e8\u07f6\u0004\u0002\t\u0002\u0004\u0003\t\u0003\u0004\u0004",
    "\t\u0004\u0004\u0005\t\u0005\u0004\u0006\t\u0006\u0004\u0007\t\u0007",
    "\u0004\b\t\b\u0004\t\t\t\u0004\n\t\n\u0004\u000b\t\u000b\u0004\f\t\f",
    "\u0004\r\t\r\u0004\u000e\t\u000e\u0004\u000f\t\u000f\u0004\u0010\t\u0010",
    "\u0004\u0011\t\u0011\u0004\u0012\t\u0012\u0004\u0013\t\u0013\u0004\u0014",
    "\t\u0014\u0004\u0015\t\u0015\u0004\u0016\t\u0016\u0004\u0017\t\u0017",
    "\u0004\u0018\t\u0018\u0004\u0019\t\u0019\u0004\u001a\t\u001a\u0004\u001b",
    "\t\u001b\u0004\u001c\t\u001c\u0004\u001d\t\u001d\u0004\u001e\t\u001e",
    "\u0004\u001f\t\u001f\u0004 \t \u0004!\t!\u0004\"\t\"\u0004#\t#\u0004",
    "$\t$\u0004%\t%\u0004&\t&\u0004\'\t\'\u0004(\t(\u0004)\t)\u0004*\t*\u0004",
    "+\t+\u0004,\t,\u0004-\t-\u0004.\t.\u0004/\t/\u00040\t0\u00041\t1\u0004",
    "2\t2\u00043\t3\u00044\t4\u00045\t5\u00046\t6\u00047\t7\u00048\t8\u0004",
    "9\t9\u0004:\t:\u0004;\t;\u0004<\t<\u0004=\t=\u0004>\t>\u0004?\t?\u0004",
    "@\t@\u0004A\tA\u0004B\tB\u0004C\tC\u0004D\tD\u0004E\tE\u0004F\tF\u0004",
    "G\tG\u0004H\tH\u0004I\tI\u0004J\tJ\u0004K\tK\u0004L\tL\u0004M\tM\u0004",
    "N\tN\u0004O\tO\u0004P\tP\u0004Q\tQ\u0004R\tR\u0004S\tS\u0004T\tT\u0004",
    "U\tU\u0004V\tV\u0004W\tW\u0004X\tX\u0004Y\tY\u0004Z\tZ\u0004[\t[\u0004",
    "\\\t\\\u0004]\t]\u0004^\t^\u0004_\t_\u0004`\t`\u0004a\ta\u0004b\tb\u0004",
    "c\tc\u0004d\td\u0004e\te\u0004f\tf\u0004g\tg\u0004h\th\u0004i\ti\u0004",
    "j\tj\u0004k\tk\u0004l\tl\u0004m\tm\u0004n\tn\u0004o\to\u0004p\tp\u0004",
    "q\tq\u0004r\tr\u0004s\ts\u0004t\tt\u0004u\tu\u0004v\tv\u0003\u0002\u0003",
    "\u0002\u0007\u0002\u00ef\n\u0002\f\u0002\u000e\u0002\u00f2\u000b\u0002",
    "\u0007\u0002\u00f4\n\u0002\f\u0002\u000e\u0002\u00f7\u000b\u0002\u0003",
    "\u0002\u0003\u0002\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0003\u0005",
    "\u0003\u00ff\n\u0003\u0003\u0003\u0003\u0003\u0005\u0003\u0103\n\u0003",
    "\u0003\u0003\u0005\u0003\u0106\n\u0003\u0003\u0003\u0005\u0003\u0109",
    "\n\u0003\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004\u0003\u0004",
    "\u0003\u0004\u0005\u0004\u011d\n\u0004\u0003\u0005\u0003\u0005\u0003",
    "\u0005\u0003\u0005\u0005\u0005\u0123\n\u0005\u0003\u0005\u0003\u0005",
    "\u0003\u0005\u0007\u0005\u0128\n\u0005\f\u0005\u000e\u0005\u012b\u000b",
    "\u0005\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u0132\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006",
    "\u0137\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0005\u0006\u013e\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u0143\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u014a\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u014f\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0155\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u015b\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0160\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u0166\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u016b\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u0171\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0176\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0005\u0006\u017c\n\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u018a",
    "\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0005\u0006\u0191\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0005\u0006\u0198\n\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u019f\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01a5\n\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01aa\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01b0\n\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01b5\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01bb\n\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0005\u0006\u01c4\n\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005",
    "\u0006\u01ce\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01d8\n",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0005\u0006\u01ec\n\u0006\u0003\u0006\u0003\u0006\u0003\u0006",
    "\u0003\u0006\u0003\u0006\u0003\u0006\u0005\u0006\u01f4\n\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003\u0006\u0003",
    "\u0006\u0005\u0006\u0203\n\u0006\u0003\u0007\u0003\u0007\u0003\u0007",
    "\u0007\u0007\u0208\n\u0007\f\u0007\u000e\u0007\u020b\u000b\u0007\u0003",
    "\b\u0003\b\u0003\b\u0003\b\u0003\t\u0003\t\u0003\n\u0003\n\u0003\n\u0003",
    "\n\u0003\n\u0005\n\u0218\n\n\u0003\u000b\u0003\u000b\u0003\u000b\u0003",
    "\u000b\u0005\u000b\u021e\n\u000b\u0003\f\u0003\f\u0003\f\u0003\f\u0005",
    "\f\u0224\n\f\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u022b\n",
    "\r\u0003\r\u0003\r\u0005\r\u022f\n\r\u0003\r\u0005\r\u0232\n\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0005\r\u0238\n\r\u0003\r\u0005\r\u023b\n",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0241\n\r\u0003\r\u0003\r",
    "\u0005\r\u0245\n\r\u0003\r\u0005\r\u0248\n\r\u0003\r\u0003\r\u0003\r",
    "\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u0253\n\r\u0003",
    "\r\u0003\r\u0005\r\u0257\n\r\u0003\r\u0005\r\u025a\n\r\u0003\r\u0003",
    "\r\u0003\r\u0005\r\u025f\n\r\u0005\r\u0261\n\r\u0003\r\u0005\r\u0264",
    "\n\r\u0003\r\u0005\r\u0267\n\r\u0003\r\u0003\r\u0003\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0005\r\u0271\n\r\u0003\r\u0003\r\u0005\r",
    "\u0275\n\r\u0003\r\u0005\r\u0278\n\r\u0003\r\u0005\r\u027b\n\r\u0003",
    "\r\u0003\r\u0003\r\u0005\r\u0280\n\r\u0005\r\u0282\n\r\u0003\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0003\r\u0005\r\u028a\n\r\u0003\r\u0005\r",
    "\u028d\n\r\u0003\r\u0005\r\u0290\n\r\u0003\r\u0003\r\u0003\r\u0003\r",
    "\u0005\r\u0296\n\r\u0003\r\u0003\r\u0005\r\u029a\n\r\u0003\r\u0005\r",
    "\u029d\n\r\u0003\r\u0005\r\u02a0\n\r\u0003\r\u0005\r\u02a3\n\r\u0003",
    "\r\u0005\r\u02a6\n\r\u0003\r\u0003\r\u0003\r\u0005\r\u02ab\n\r\u0003",
    "\r\u0003\r\u0003\r\u0003\r\u0005\r\u02b1\n\r\u0003\r\u0003\r\u0005\r",
    "\u02b5\n\r\u0003\r\u0005\r\u02b8\n\r\u0003\r\u0005\r\u02bb\n\r\u0003",
    "\r\u0003\r\u0005\r\u02bf\n\r\u0003\u000e\u0003\u000e\u0003\u000e\u0003",
    "\u000e\u0007\u000e\u02c5\n\u000e\f\u000e\u000e\u000e\u02c8\u000b\u000e",
    "\u0003\u000e\u0003\u000e\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f",
    "\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0003\u000f\u0007\u000f",
    "\u02e1\n\u000f\f\u000f\u000e\u000f\u02e4\u000b\u000f\u0003\u0010\u0005",
    "\u0010\u02e7\n\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010",
    "\u0003\u0010\u0003\u0010\u0003\u0010\u0003\u0010\u0007\u0010\u02fd\n",
    "\u0010\f\u0010\u000e\u0010\u0300\u000b\u0010\u0003\u0011\u0003\u0011",
    "\u0003\u0011\u0003\u0011\u0003\u0012\u0003\u0012\u0003\u0012\u0003\u0012",
    "\u0005\u0012\u030a\n\u0012\u0003\u0012\u0005\u0012\u030d\n\u0012\u0003",
    "\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0003\u0013\u0007\u0013\u0314",
    "\n\u0013\f\u0013\u000e\u0013\u0317\u000b\u0013\u0003\u0013\u0003\u0013",
    "\u0003\u0013\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014\u0003\u0014",
    "\u0005\u0014\u0327\n\u0014\u0003\u0014\u0003\u0014\u0003\u0015\u0003",
    "\u0015\u0003\u0015\u0003\u0015\u0003\u0015\u0007\u0015\u0330\n\u0015",
    "\f\u0015\u000e\u0015\u0333\u000b\u0015\u0003\u0015\u0003\u0015\u0003",
    "\u0015\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003\u0016\u0003",
    "\u0016\u0005\u0016\u0344\n\u0016\u0003\u0016\u0003\u0016\u0003\u0017",
    "\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0017\u0003\u0018\u0003\u0018",
    "\u0003\u0018\u0003\u0018\u0005\u0018\u0351\n\u0018\u0003\u0019\u0003",
    "\u0019\u0003\u0019\u0003\u001a\u0003\u001a\u0003\u001a\u0003\u001b\u0003",
    "\u001b\u0003\u001b\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0007",
    "\u001c\u0360\n\u001c\f\u001c\u000e\u001c\u0363\u000b\u001c\u0003\u001c",
    "\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0003\u001c\u0005\u001c",
    "\u036b\n\u001c\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003\u001d\u0003",
    "\u001d\u0003\u001d\u0003\u001d\u0007\u001d\u0386\n\u001d\f\u001d\u000e",
    "\u001d\u0389\u000b\u001d\u0003\u001e\u0003\u001e\u0003\u001e\u0003\u001e",
    "\u0003\u001f\u0003\u001f\u0003\u001f\u0003\u001f\u0003 \u0003 \u0003",
    " \u0003 \u0003!\u0003!\u0003!\u0003!\u0007!\u039b\n!\f!\u000e!\u039e",
    "\u000b!\u0003\"\u0003\"\u0005\"\u03a2\n\"\u0003\"\u0003\"\u0003\"\u0005",
    "\"\u03a7\n\"\u0003\"\u0005\"\u03aa\n\"\u0003#\u0003#\u0003#\u0003#\u0003",
    "#\u0003#\u0003#\u0003#\u0003#\u0003#\u0005#\u03b6\n#\u0003$\u0003$\u0003",
    "$\u0005$\u03bb\n$\u0003$\u0003$\u0005$\u03bf\n$\u0003$\u0005$\u03c2",
    "\n$\u0003$\u0003$\u0005$\u03c6\n$\u0003$\u0003$\u0005$\u03ca\n$\u0003",
    "$\u0003$\u0003$\u0005$\u03cf\n$\u0003$\u0005$\u03d2\n$\u0003$\u0003",
    "$\u0005$\u03d6\n$\u0005$\u03d8\n$\u0003%\u0003%\u0003%\u0003&\u0003",
    "&\u0003&\u0003&\u0003&\u0003&\u0003&\u0003\'\u0003\'\u0003\'\u0003(",
    "\u0003(\u0003(\u0003(\u0003(\u0007(\u03ec\n(\f(\u000e(\u03ef\u000b(",
    "\u0003(\u0003(\u0003)\u0003)\u0003)\u0005)\u03f6\n)\u0003)\u0005)\u03f9",
    "\n)\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0003*\u0005*\u0403",
    "\n*\u0003+\u0003+\u0005+\u0407\n+\u0003+\u0003+\u0003,\u0003,\u0003",
    ",\u0003,\u0005,\u040f\n,\u0003,\u0003,\u0005,\u0413\n,\u0003,\u0003",
    ",\u0003,\u0005,\u0418\n,\u0003,\u0003,\u0005,\u041c\n,\u0003,\u0003",
    ",\u0005,\u0420\n,\u0003,\u0003,\u0005,\u0424\n,\u0003,\u0003,\u0005",
    ",\u0428\n,\u0005,\u042a\n,\u0003-\u0003-\u0003-\u0003-\u0003-\u0003",
    "-\u0005-\u0432\n-\u0003-\u0003-\u0005-\u0436\n-\u0003-\u0005-\u0439",
    "\n-\u0003.\u0003.\u0003.\u0003.\u0003.\u0003.\u0005.\u0441\n.\u0003",
    "/\u0003/\u0003/\u0005/\u0446\n/\u0003/\u0003/\u0003/\u0005/\u044b\n",
    "/\u0003/\u0005/\u044e\n/\u0003/\u0003/\u00030\u00030\u00030\u00030\u0007",
    "0\u0456\n0\f0\u000e0\u0459\u000b0\u00030\u00030\u00031\u00031\u0003",
    "1\u00031\u00031\u00051\u0462\n1\u00031\u00031\u00051\u0466\n1\u0003",
    "2\u00032\u00032\u00052\u046b\n2\u00032\u00032\u00052\u046f\n2\u0003",
    "3\u00033\u00033\u00033\u00053\u0475\n3\u00033\u00053\u0478\n3\u0003",
    "3\u00053\u047b\n3\u00033\u00053\u047e\n3\u00034\u00034\u00034\u0003",
    "4\u00034\u00034\u00034\u00034\u00034\u00034\u00074\u048a\n4\f4\u000e",
    "4\u048d\u000b4\u00034\u00054\u0490\n4\u00035\u00035\u00055\u0494\n5",
    "\u00035\u00035\u00035\u00055\u0499\n5\u00035\u00055\u049c\n5\u00035",
    "\u00035\u00036\u00036\u00036\u00036\u00076\u04a4\n6\f6\u000e6\u04a7",
    "\u000b6\u00037\u00037\u00037\u00037\u00037\u00057\u04ae\n7\u00038\u0005",
    "8\u04b1\n8\u00038\u00038\u00058\u04b5\n8\u00038\u00058\u04b8\n8\u0003",
    "8\u00038\u00058\u04bc\n8\u00038\u00058\u04bf\n8\u00038\u00058\u04c2",
    "\n8\u00038\u00058\u04c5\n8\u00038\u00058\u04c8\n8\u00038\u00058\u04cb",
    "\n8\u00038\u00038\u00058\u04cf\n8\u00038\u00038\u00058\u04d3\n8\u0003",
    "8\u00058\u04d6\n8\u00038\u00058\u04d9\n8\u00038\u00058\u04dc\n8\u0003",
    "8\u00058\u04df\n8\u00038\u00058\u04e2\n8\u00039\u00039\u00039\u0003",
    ":\u0003:\u0003:\u0003:\u0005:\u04eb\n:\u0003;\u0003;\u0003;\u0003<\u0005",
    "<\u04f1\n<\u0003<\u0003<\u0003<\u0003<\u0003=\u0003=\u0003=\u0003=\u0003",
    "=\u0003=\u0003=\u0003>\u0003>\u0003>\u0003?\u0003?\u0003?\u0003@\u0003",
    "@\u0003@\u0003@\u0003@\u0003@\u0003@\u0003@\u0005@\u050c\n@\u0003A\u0003",
    "A\u0003A\u0003B\u0003B\u0003B\u0003B\u0003C\u0003C\u0003C\u0003C\u0003",
    "D\u0003D\u0003D\u0003D\u0003D\u0003E\u0003E\u0003E\u0003E\u0005E\u0522",
    "\nE\u0003F\u0003F\u0003F\u0003G\u0003G\u0003G\u0005G\u052a\nG\u0003",
    "G\u0005G\u052d\nG\u0003G\u0003G\u0003G\u0003G\u0005G\u0533\nG\u0003",
    "G\u0003G\u0003G\u0003G\u0003G\u0003G\u0005G\u053b\nG\u0003G\u0005G\u053e",
    "\nG\u0003G\u0003G\u0003G\u0003G\u0007G\u0544\nG\fG\u000eG\u0547\u000b",
    "G\u0003H\u0005H\u054a\nH\u0003H\u0003H\u0003H\u0005H\u054f\nH\u0003",
    "H\u0005H\u0552\nH\u0003H\u0005H\u0555\nH\u0003H\u0003H\u0005H\u0559",
    "\nH\u0003H\u0003H\u0005H\u055d\nH\u0003H\u0005H\u0560\nH\u0005H\u0562",
    "\nH\u0003H\u0005H\u0565\nH\u0003H\u0003H\u0005H\u0569\nH\u0003H\u0003",
    "H\u0005H\u056d\nH\u0003H\u0005H\u0570\nH\u0005H\u0572\nH\u0005H\u0574",
    "\nH\u0003I\u0005I\u0577\nI\u0003I\u0003I\u0003I\u0005I\u057c\nI\u0003",
    "J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0003J\u0005J\u0587",
    "\nJ\u0003K\u0003K\u0003K\u0003K\u0005K\u058d\nK\u0003L\u0003L\u0003",
    "L\u0005L\u0592\nL\u0003M\u0003M\u0003M\u0007M\u0597\nM\fM\u000eM\u059a",
    "\u000bM\u0003N\u0003N\u0005N\u059e\nN\u0003N\u0003N\u0005N\u05a2\nN",
    "\u0003N\u0003N\u0005N\u05a6\nN\u0003O\u0003O\u0003O\u0005O\u05ab\nO",
    "\u0003P\u0003P\u0003P\u0007P\u05b0\nP\fP\u000eP\u05b3\u000bP\u0003Q",
    "\u0003Q\u0003Q\u0003Q\u0003R\u0005R\u05ba\nR\u0003R\u0005R\u05bd\nR",
    "\u0003R\u0005R\u05c0\nR\u0003S\u0003S\u0003S\u0003S\u0003T\u0003T\u0003",
    "T\u0003T\u0003U\u0003U\u0003U\u0003V\u0003V\u0003V\u0003V\u0003V\u0003",
    "V\u0005V\u05d3\nV\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003W\u0003",
    "W\u0003W\u0003W\u0003W\u0003W\u0005W\u05e1\nW\u0003X\u0003X\u0003X\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0005Y\u05f1\nY\u0003Y\u0005Y\u05f4\nY\u0003Y\u0003Y\u0003Y\u0003",
    "Y\u0003Y\u0003Y\u0003Y\u0005Y\u05fd\nY\u0003Y\u0003Y\u0005Y\u0601\n",
    "Y\u0003Y\u0003Y\u0003Y\u0005Y\u0606\nY\u0003Y\u0003Y\u0003Y\u0005Y\u060b",
    "\nY\u0003Y\u0005Y\u060e\nY\u0005Y\u0610\nY\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0005Z\u0626\nZ\u0003Z\u0005",
    "Z\u0629\nZ\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003Z\u0003",
    "Z\u0005Z\u0634\nZ\u0003[\u0003[\u0005[\u0638\n[\u0003[\u0005[\u063b",
    "\n[\u0003[\u0003[\u0005[\u063f\n[\u0003[\u0003[\u0005[\u0643\n[\u0003",
    "\\\u0003\\\u0003\\\u0003]\u0003]\u0003]\u0005]\u064b\n]\u0003]\u0003",
    "]\u0005]\u064f\n]\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003",
    "^\u0003^\u0007^\u065a\n^\f^\u000e^\u065d\u000b^\u0003^\u0003^\u0003",
    "^\u0003^\u0003^\u0003^\u0003^\u0007^\u0666\n^\f^\u000e^\u0669\u000b",
    "^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0003^\u0007^\u0672\n^\f",
    "^\u000e^\u0675\u000b^\u0003^\u0003^\u0003^\u0003^\u0003^\u0005^\u067c",
    "\n^\u0003^\u0003^\u0005^\u0680\n^\u0003_\u0003_\u0003_\u0007_\u0685",
    "\n_\f_\u000e_\u0688\u000b_\u0003`\u0003`\u0003`\u0005`\u068d\n`\u0003",
    "`\u0003`\u0003`\u0003`\u0003`\u0003`\u0005`\u0695\n`\u0003a\u0003a\u0003",
    "a\u0005a\u069a\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0006a\u06a1\n",
    "a\ra\u000ea\u06a2\u0003a\u0003a\u0005a\u06a7\na\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u06c6\na\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0005a\u06d7\na\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u06e3\na\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u06ed\na\u0003a\u0005a\u06f0",
    "\na\u0003a\u0003a\u0005a\u06f4\na\u0003a\u0005a\u06f7\na\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u0703",
    "\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u0714\na\u0003a\u0003a\u0005",
    "a\u0718\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u0729\na\u0003a\u0005",
    "a\u072c\na\u0003a\u0003a\u0005a\u0730\na\u0003a\u0005a\u0733\na\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0005a\u073e",
    "\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003a\u0003",
    "a\u0003a\u0003a\u0005a\u0756\na\u0003a\u0003a\u0003a\u0003a\u0003a\u0005",
    "a\u075d\na\u0007a\u075f\na\fa\u000ea\u0762\u000ba\u0003b\u0003b\u0003",
    "b\u0007b\u0767\nb\fb\u000eb\u076a\u000bb\u0003c\u0003c\u0005c\u076e",
    "\nc\u0003d\u0003d\u0003d\u0003d\u0007d\u0774\nd\fd\u000ed\u0777\u000b",
    "d\u0003d\u0003d\u0003d\u0003d\u0003d\u0007d\u077e\nd\fd\u000ed\u0781",
    "\u000bd\u0005d\u0783\nd\u0003d\u0003d\u0003d\u0003e\u0003e\u0003e\u0005",
    "e\u078b\ne\u0003e\u0003e\u0003f\u0003f\u0003f\u0005f\u0792\nf\u0003",
    "g\u0003g\u0003g\u0003g\u0003g\u0003g\u0003g\u0005g\u079b\ng\u0003g\u0003",
    "g\u0003g\u0003g\u0005g\u07a1\ng\u0007g\u07a3\ng\fg\u000eg\u07a6\u000b",
    "g\u0003h\u0003h\u0003h\u0005h\u07ab\nh\u0003h\u0003h\u0003i\u0003i\u0003",
    "i\u0005i\u07b2\ni\u0003i\u0003i\u0003j\u0003j\u0003j\u0007j\u07b9\n",
    "j\fj\u000ej\u07bc\u000bj\u0003k\u0003k\u0003k\u0005k\u07c1\nk\u0003",
    "l\u0003l\u0003m\u0003m\u0003m\u0003m\u0003m\u0003m\u0005m\u07cb\nm\u0005",
    "m\u07cd\nm\u0003n\u0005n\u07d0\nn\u0003n\u0003n\u0003n\u0003n\u0003",
    "n\u0003n\u0005n\u07d8\nn\u0003o\u0003o\u0003o\u0005o\u07dd\no\u0003",
    "p\u0003p\u0003q\u0003q\u0003r\u0003r\u0003s\u0003s\u0005s\u07e7\ns\u0003",
    "t\u0003t\u0003t\u0005t\u07ec\nt\u0003u\u0003u\u0005u\u07f0\nu\u0003",
    "v\u0003v\u0003v\u0003v\u0003v\u0002\u0005\u008c\u00c0\u00ccw\u0002\u0004",
    "\u0006\b\n\f\u000e\u0010\u0012\u0014\u0016\u0018\u001a\u001c\u001e ",
    "\"$&(*,.02468:<>@BDFHJLNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084",
    "\u0086\u0088\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\u009a\u009c",
    "\u009e\u00a0\u00a2\u00a4\u00a6\u00a8\u00aa\u00ac\u00ae\u00b0\u00b2\u00b4",
    "\u00b6\u00b8\u00ba\u00bc\u00be\u00c0\u00c2\u00c4\u00c6\u00c8\u00ca\u00cc",
    "\u00ce\u00d0\u00d2\u00d4\u00d6\u00d8\u00da\u00dc\u00de\u00e0\u00e2\u00e4",
    "\u00e6\u00e8\u00ea\u0002\u001e\b\u0002\u0005\u0005\u001a\u001a\u001d",
    "\u001d((ii\u00ae\u00ae\u0004\u0002\u0011\u0011\u001f\u001f\u0005\u0002",
    "\u0005\u0005((ii\u0004\u0002++--\u0004\u0002..44\u0005\u0002\u0010\u0010",
    "\u009d\u009d\u00a3\u00a3\u0004\u0002!!\u008e\u008e\u0004\u0002UUaa\u0004",
    "\u0002HHff\u0005\u0002\u0006\u0006\n\n\u000e\u000e\u0006\u0002\u0006",
    "\u0006\t\n\u000e\u000e\u0094\u0094\u0004\u0002aa\u008d\u008d\u0004\u0002",
    "\u0006\u0006\n\n\u0004\u0002ww\u00cd\u00cd\u0004\u0002\r\r+,\u0004\u0002",
    "??^^\u0004\u0002\u0086\u0086\u0090\u0090\u0004\u0002EEQQ\u0003\u0002",
    "\u009a\u009b\u0005\u0002\u0013\u0013``\u00ab\u00ab\u0005\u0002\u00c9",
    "\u00c9\u00db\u00db\u00e4\u00e4\u0004\u0002\u00ce\u00cf\u00dc\u00dc\u0004",
    "\u0002PPcc\u0003\u0002\u00c4\u00c5\u0004\u0002\u00cf\u00cf\u00dc\u00dc",
    "\n\u0002&&MMmmoo\u0085\u0085\u0092\u0092\u00ba\u00ba\u00bf\u00bf\u000e",
    "\u0002\u0004%\'LNRTlnnpqstv\u0083\u0086\u0091\u0093\u00b9\u00bb\u00be",
    "\u00c0\u00c1\u0006\u0002%%??NN\\\\\u0002\u0914\u0002\u00f5\u0003\u0002",
    "\u0002\u0002\u0004\u0108\u0003\u0002\u0002\u0002\u0006\u011c\u0003\u0002",
    "\u0002\u0002\b\u011e\u0003\u0002\u0002\u0002\n\u0202\u0003\u0002\u0002",
    "\u0002\f\u0204\u0003\u0002\u0002\u0002\u000e\u020c\u0003\u0002\u0002",
    "\u0002\u0010\u0210\u0003\u0002\u0002\u0002\u0012\u0217\u0003\u0002\u0002",
    "\u0002\u0014\u0219\u0003\u0002\u0002\u0002\u0016\u021f\u0003\u0002\u0002",
    "\u0002\u0018\u02be\u0003\u0002\u0002\u0002\u001a\u02c0\u0003\u0002\u0002",
    "\u0002\u001c\u02cb\u0003\u0002\u0002\u0002\u001e\u02e6\u0003\u0002\u0002",
    "\u0002 \u0301\u0003\u0002\u0002\u0002\"\u0305\u0003\u0002\u0002\u0002",
    "$\u030e\u0003\u0002\u0002\u0002&\u031b\u0003\u0002\u0002\u0002(\u032a",
    "\u0003\u0002\u0002\u0002*\u0337\u0003\u0002\u0002\u0002,\u0347\u0003",
    "\u0002\u0002\u0002.\u034c\u0003\u0002\u0002\u00020\u0352\u0003\u0002",
    "\u0002\u00022\u0355\u0003\u0002\u0002\u00024\u0358\u0003\u0002\u0002",
    "\u00026\u036a\u0003\u0002\u0002\u00028\u036c\u0003\u0002\u0002\u0002",
    ":\u038a\u0003\u0002\u0002\u0002<\u038e\u0003\u0002\u0002\u0002>\u0392",
    "\u0003\u0002\u0002\u0002@\u0396\u0003\u0002\u0002\u0002B\u039f\u0003",
    "\u0002\u0002\u0002D\u03b5\u0003\u0002\u0002\u0002F\u03d7\u0003\u0002",
    "\u0002\u0002H\u03d9\u0003\u0002\u0002\u0002J\u03dc\u0003\u0002\u0002",
    "\u0002L\u03e3\u0003\u0002\u0002\u0002N\u03e6\u0003\u0002\u0002\u0002",
    "P\u03f2\u0003\u0002\u0002\u0002R\u03fa\u0003\u0002\u0002\u0002T\u0404",
    "\u0003\u0002\u0002\u0002V\u0429\u0003\u0002\u0002\u0002X\u0438\u0003",
    "\u0002\u0002\u0002Z\u0440\u0003\u0002\u0002\u0002\\\u0442\u0003\u0002",
    "\u0002\u0002^\u0451\u0003\u0002\u0002\u0002`\u0465\u0003\u0002\u0002",
    "\u0002b\u0467\u0003\u0002\u0002\u0002d\u0470\u0003\u0002\u0002\u0002",
    "f\u047f\u0003\u0002\u0002\u0002h\u0491\u0003\u0002\u0002\u0002j\u049f",
    "\u0003\u0002\u0002\u0002l\u04ad\u0003\u0002\u0002\u0002n\u04b0\u0003",
    "\u0002\u0002\u0002p\u04e3\u0003\u0002\u0002\u0002r\u04e6\u0003\u0002",
    "\u0002\u0002t\u04ec\u0003\u0002\u0002\u0002v\u04f0\u0003\u0002\u0002",
    "\u0002x\u04f6\u0003\u0002\u0002\u0002z\u04fd\u0003\u0002\u0002\u0002",
    "|\u0500\u0003\u0002\u0002\u0002~\u0503\u0003\u0002\u0002\u0002\u0080",
    "\u050d\u0003\u0002\u0002\u0002\u0082\u0510\u0003\u0002\u0002\u0002\u0084",
    "\u0514\u0003\u0002\u0002\u0002\u0086\u0518\u0003\u0002\u0002\u0002\u0088",
    "\u051d\u0003\u0002\u0002\u0002\u008a\u0523\u0003\u0002\u0002\u0002\u008c",
    "\u0532\u0003\u0002\u0002\u0002\u008e\u0573\u0003\u0002\u0002\u0002\u0090",
    "\u057b\u0003\u0002\u0002\u0002\u0092\u0586\u0003\u0002\u0002\u0002\u0094",
    "\u0588\u0003\u0002\u0002\u0002\u0096\u058e\u0003\u0002\u0002\u0002\u0098",
    "\u0593\u0003\u0002\u0002\u0002\u009a\u059b\u0003\u0002\u0002\u0002\u009c",
    "\u05a7\u0003\u0002\u0002\u0002\u009e\u05ac\u0003\u0002\u0002\u0002\u00a0",
    "\u05b4\u0003\u0002\u0002\u0002\u00a2\u05b9\u0003\u0002\u0002\u0002\u00a4",
    "\u05c1\u0003\u0002\u0002\u0002\u00a6\u05c5\u0003\u0002\u0002\u0002\u00a8",
    "\u05c9\u0003\u0002\u0002\u0002\u00aa\u05d2\u0003\u0002\u0002\u0002\u00ac",
    "\u05e0\u0003\u0002\u0002\u0002\u00ae\u05e2\u0003\u0002\u0002\u0002\u00b0",
    "\u060f\u0003\u0002\u0002\u0002\u00b2\u0633\u0003\u0002\u0002\u0002\u00b4",
    "\u0635\u0003\u0002\u0002\u0002\u00b6\u0644\u0003\u0002\u0002\u0002\u00b8",
    "\u0647\u0003\u0002\u0002\u0002\u00ba\u067f\u0003\u0002\u0002\u0002\u00bc",
    "\u0681\u0003\u0002\u0002\u0002\u00be\u0694\u0003\u0002\u0002\u0002\u00c0",
    "\u0717\u0003\u0002\u0002\u0002\u00c2\u0763\u0003\u0002\u0002\u0002\u00c4",
    "\u076d\u0003\u0002\u0002\u0002\u00c6\u0782\u0003\u0002\u0002\u0002\u00c8",
    "\u078a\u0003\u0002\u0002\u0002\u00ca\u078e\u0003\u0002\u0002\u0002\u00cc",
    "\u079a\u0003\u0002\u0002\u0002\u00ce\u07a7\u0003\u0002\u0002\u0002\u00d0",
    "\u07b1\u0003\u0002\u0002\u0002\u00d2\u07b5\u0003\u0002\u0002\u0002\u00d4",
    "\u07c0\u0003\u0002\u0002\u0002\u00d6\u07c2\u0003\u0002\u0002\u0002\u00d8",
    "\u07cc\u0003\u0002\u0002\u0002\u00da\u07cf\u0003\u0002\u0002\u0002\u00dc",
    "\u07dc\u0003\u0002\u0002\u0002\u00de\u07de\u0003\u0002\u0002\u0002\u00e0",
    "\u07e0\u0003\u0002\u0002\u0002\u00e2\u07e2\u0003\u0002\u0002\u0002\u00e4",
    "\u07e6\u0003\u0002\u0002\u0002\u00e6\u07eb\u0003\u0002\u0002\u0002\u00e8",
    "\u07ef\u0003\u0002\u0002\u0002\u00ea\u07f1\u0003\u0002\u0002\u0002\u00ec",
    "\u00f0\u0005\u0004\u0003\u0002\u00ed\u00ef\u0007\u00e3\u0002\u0002\u00ee",
    "\u00ed\u0003\u0002\u0002\u0002\u00ef\u00f2\u0003\u0002\u0002\u0002\u00f0",
    "\u00ee\u0003\u0002\u0002\u0002\u00f0\u00f1\u0003\u0002\u0002\u0002\u00f1",
    "\u00f4\u0003\u0002\u0002\u0002\u00f2\u00f0\u0003\u0002\u0002\u0002\u00f3",
    "\u00ec\u0003\u0002\u0002\u0002\u00f4\u00f7\u0003\u0002\u0002\u0002\u00f5",
    "\u00f3\u0003\u0002\u0002\u0002\u00f5\u00f6\u0003\u0002\u0002\u0002\u00f6",
    "\u00f8\u0003\u0002\u0002\u0002\u00f7\u00f5\u0003\u0002\u0002\u0002\u00f8",
    "\u00f9\u0007\u0002\u0002\u0003\u00f9\u0003\u0003\u0002\u0002\u0002\u00fa",
    "\u00fe\u0005\u0006\u0004\u0002\u00fb\u00fc\u0007X\u0002\u0002\u00fc",
    "\u00fd\u0007}\u0002\u0002\u00fd\u00ff\u0007\u00c7\u0002\u0002\u00fe",
    "\u00fb\u0003\u0002\u0002\u0002\u00fe\u00ff\u0003\u0002\u0002\u0002\u00ff",
    "\u0102\u0003\u0002\u0002\u0002\u0100\u0101\u0007C\u0002\u0002\u0101",
    "\u0103\u0005\u00e8u\u0002\u0102\u0100\u0003\u0002\u0002\u0002\u0102",
    "\u0103\u0003\u0002\u0002\u0002\u0103\u0105\u0003\u0002\u0002\u0002\u0104",
    "\u0106\u0007\u00e3\u0002\u0002\u0105\u0104\u0003\u0002\u0002\u0002\u0105",
    "\u0106\u0003\u0002\u0002\u0002\u0106\u0109\u0003\u0002\u0002\u0002\u0107",
    "\u0109\u0005\\/\u0002\u0108\u00fa\u0003\u0002\u0002\u0002\u0108\u0107",
    "\u0003\u0002\u0002\u0002\u0109\u0005\u0003\u0002\u0002\u0002\u010a\u011d",
    "\u0005\b\u0005\u0002\u010b\u011d\u0005\u0014\u000b\u0002\u010c\u011d",
    "\u0005\u0016\f\u0002\u010d\u011d\u0005\u0018\r\u0002\u010e\u011d\u0005",
    "T+\u0002\u010f\u011d\u0005V,\u0002\u0110\u011d\u0005X-\u0002\u0111\u011d",
    "\u0005Z.\u0002\u0112\u011d\u0005b2\u0002\u0113\u011d\u0005d3\u0002\u0114",
    "\u011d\u0005f4\u0002\u0115\u011d\u0005j6\u0002\u0116\u011d\u0005\u00ae",
    "X\u0002\u0117\u011d\u0005\u00b0Y\u0002\u0118\u011d\u0005\u00b2Z\u0002",
    "\u0119\u011d\u0005\u00b4[\u0002\u011a\u011d\u0005\u00b6\\\u0002\u011b",
    "\u011d\u0005\u00b8]\u0002\u011c\u010a\u0003\u0002\u0002\u0002\u011c",
    "\u010b\u0003\u0002\u0002\u0002\u011c\u010c\u0003\u0002\u0002\u0002\u011c",
    "\u010d\u0003\u0002\u0002\u0002\u011c\u010e\u0003\u0002\u0002\u0002\u011c",
    "\u010f\u0003\u0002\u0002\u0002\u011c\u0110\u0003\u0002\u0002\u0002\u011c",
    "\u0111\u0003\u0002\u0002\u0002\u011c\u0112\u0003\u0002\u0002\u0002\u011c",
    "\u0113\u0003\u0002\u0002\u0002\u011c\u0114\u0003\u0002\u0002\u0002\u011c",
    "\u0115\u0003\u0002\u0002\u0002\u011c\u0116\u0003\u0002\u0002\u0002\u011c",
    "\u0117\u0003\u0002\u0002\u0002\u011c\u0118\u0003\u0002\u0002\u0002\u011c",
    "\u0119\u0003\u0002\u0002\u0002\u011c\u011a\u0003\u0002\u0002\u0002\u011c",
    "\u011b\u0003\u0002\u0002\u0002\u011d\u0007\u0003\u0002\u0002\u0002\u011e",
    "\u011f\u0007\u0007\u0002\u0002\u011f\u0120\u0007\u00a0\u0002\u0002\u0120",
    "\u0122\u0005\u00d0i\u0002\u0121\u0123\u0005.\u0018\u0002\u0122\u0121",
    "\u0003\u0002\u0002\u0002\u0122\u0123\u0003\u0002\u0002\u0002\u0123\u0124",
    "\u0003\u0002\u0002\u0002\u0124\u0129\u0005\n\u0006\u0002\u0125\u0126",
    "\u0007\u00cd\u0002\u0002\u0126\u0128\u0005\n\u0006\u0002\u0127\u0125",
    "\u0003\u0002\u0002\u0002\u0128\u012b\u0003\u0002\u0002\u0002\u0129\u0127",
    "\u0003\u0002\u0002\u0002\u0129\u012a\u0003\u0002\u0002\u0002\u012a\t",
    "\u0003\u0002\u0002\u0002\u012b\u0129\u0003\u0002\u0002\u0002\u012c\u012d",
    "\u0007\u0003\u0002\u0002\u012d\u0131\u0007\u001c\u0002\u0002\u012e\u012f",
    "\u0007O\u0002\u0002\u012f\u0130\u0007t\u0002\u0002\u0130\u0132\u0007",
    "9\u0002\u0002\u0131\u012e\u0003\u0002\u0002\u0002\u0131\u0132\u0003",
    "\u0002\u0002\u0002\u0132\u0133\u0003\u0002\u0002\u0002\u0133\u0136\u0005",
    "F$\u0002\u0134\u0135\u0007\u0004\u0002\u0002\u0135\u0137\u0005\u00ca",
    "f\u0002\u0136\u0134\u0003\u0002\u0002\u0002\u0136\u0137\u0003\u0002",
    "\u0002\u0002\u0137\u0203\u0003\u0002\u0002\u0002\u0138\u0139\u0007\u0003",
    "\u0002\u0002\u0139\u013d\u0007R\u0002\u0002\u013a\u013b\u0007O\u0002",
    "\u0002\u013b\u013c\u0007t\u0002\u0002\u013c\u013e\u00079\u0002\u0002",
    "\u013d\u013a\u0003\u0002\u0002\u0002\u013d\u013e\u0003\u0002\u0002\u0002",
    "\u013e\u013f\u0003\u0002\u0002\u0002\u013f\u0142\u0005J&\u0002\u0140",
    "\u0141\u0007\u0004\u0002\u0002\u0141\u0143\u0005\u00caf\u0002\u0142",
    "\u0140\u0003\u0002\u0002\u0002\u0142\u0143\u0003\u0002\u0002\u0002\u0143",
    "\u0203\u0003\u0002\u0002\u0002\u0144\u0145\u0007\u0003\u0002\u0002\u0145",
    "\u0149\u0007\u0084\u0002\u0002\u0146\u0147\u0007O\u0002\u0002\u0147",
    "\u0148\u0007t\u0002\u0002\u0148\u014a\u00079\u0002\u0002\u0149\u0146",
    "\u0003\u0002\u0002\u0002\u0149\u014a\u0003\u0002\u0002\u0002\u014a\u014b",
    "\u0003\u0002\u0002\u0002\u014b\u014e\u0005L\'\u0002\u014c\u014d\u0007",
    "\u0004\u0002\u0002\u014d\u014f\u0005\u00caf\u0002\u014e\u014c\u0003",
    "\u0002\u0002\u0002\u014e\u014f\u0003\u0002\u0002\u0002\u014f\u0203\u0003",
    "\u0002\u0002\u0002\u0150\u0151\u0007\u0011\u0002\u0002\u0151\u0154\u0005",
    "\u0012\n\u0002\u0152\u0153\u0007E\u0002\u0002\u0153\u0155\u0005\u00d0",
    "i\u0002\u0154\u0152\u0003\u0002\u0002\u0002\u0154\u0155\u0003\u0002",
    "\u0002\u0002\u0155\u0203\u0003\u0002\u0002\u0002\u0156\u0157\u0007\u0018",
    "\u0002\u0002\u0157\u015a\u0007\u001c\u0002\u0002\u0158\u0159\u0007O",
    "\u0002\u0002\u0159\u015b\u00079\u0002\u0002\u015a\u0158\u0003\u0002",
    "\u0002\u0002\u015a\u015b\u0003\u0002\u0002\u0002\u015b\u015c\u0003\u0002",
    "\u0002\u0002\u015c\u015f\u0005\u00caf\u0002\u015d\u015e\u0007Q\u0002",
    "\u0002\u015e\u0160\u0005\u0012\n\u0002\u015f\u015d\u0003\u0002\u0002",
    "\u0002\u015f\u0160\u0003\u0002\u0002\u0002\u0160\u0203\u0003\u0002\u0002",
    "\u0002\u0161\u0162\u0007\u0018\u0002\u0002\u0162\u0165\u0007R\u0002",
    "\u0002\u0163\u0164\u0007O\u0002\u0002\u0164\u0166\u00079\u0002\u0002",
    "\u0165\u0163\u0003\u0002\u0002\u0002\u0165\u0166\u0003\u0002\u0002\u0002",
    "\u0166\u0167\u0003\u0002\u0002\u0002\u0167\u016a\u0005\u00caf\u0002",
    "\u0168\u0169\u0007Q\u0002\u0002\u0169\u016b\u0005\u0012\n\u0002\u016a",
    "\u0168\u0003\u0002\u0002\u0002\u016a\u016b\u0003\u0002\u0002\u0002\u016b",
    "\u0203\u0003\u0002\u0002\u0002\u016c\u016d\u0007\u0018\u0002\u0002\u016d",
    "\u0170\u0007\u0084\u0002\u0002\u016e\u016f\u0007O\u0002\u0002\u016f",
    "\u0171\u00079\u0002\u0002\u0170\u016e\u0003\u0002\u0002\u0002\u0170",
    "\u0171\u0003\u0002\u0002\u0002\u0171\u0172\u0003\u0002\u0002\u0002\u0172",
    "\u0175\u0005\u00caf\u0002\u0173\u0174\u0007Q\u0002\u0002\u0174\u0176",
    "\u0005\u0012\n\u0002\u0175\u0173\u0003\u0002\u0002\u0002\u0175\u0176",
    "\u0003\u0002\u0002\u0002\u0176\u0203\u0003\u0002\u0002\u0002\u0177\u0178",
    "\u0007\u001d\u0002\u0002\u0178\u017b\u0007\u001c\u0002\u0002\u0179\u017a",
    "\u0007O\u0002\u0002\u017a\u017c\u00079\u0002\u0002\u017b\u0179\u0003",
    "\u0002\u0002\u0002\u017b\u017c\u0003\u0002\u0002\u0002\u017c\u017d\u0003",
    "\u0002\u0002\u0002\u017d\u017e\u0005\u00caf\u0002\u017e\u017f\u0007",
    "\u00c7\u0002\u0002\u017f\u0203\u0003\u0002\u0002\u0002\u0180\u0181\u0007",
    "*\u0002\u0002\u0181\u0182\u0007\u00bc\u0002\u0002\u0182\u0203\u0005",
    "\u00c0a\u0002\u0183\u0184\u0007.\u0002\u0002\u0184\u0203\u0005\u0012",
    "\n\u0002\u0185\u0186\u00074\u0002\u0002\u0186\u0189\u0007\u001c\u0002",
    "\u0002\u0187\u0188\u0007O\u0002\u0002\u0188\u018a\u00079\u0002\u0002",
    "\u0189\u0187\u0003\u0002\u0002\u0002\u0189\u018a\u0003\u0002\u0002\u0002",
    "\u018a\u018b\u0003\u0002\u0002\u0002\u018b\u0203\u0005\u00caf\u0002",
    "\u018c\u018d\u00074\u0002\u0002\u018d\u0190\u0007R\u0002\u0002\u018e",
    "\u018f\u0007O\u0002\u0002\u018f\u0191\u00079\u0002\u0002\u0190\u018e",
    "\u0003\u0002\u0002\u0002\u0190\u0191\u0003\u0002\u0002\u0002\u0191\u0192",
    "\u0003\u0002\u0002\u0002\u0192\u0203\u0005\u00caf\u0002\u0193\u0194",
    "\u00074\u0002\u0002\u0194\u0197\u0007\u0084\u0002\u0002\u0195\u0196",
    "\u0007O\u0002\u0002\u0196\u0198\u00079\u0002\u0002\u0197\u0195\u0003",
    "\u0002\u0002\u0002\u0197\u0198\u0003\u0002\u0002\u0002\u0198\u0199\u0003",
    "\u0002\u0002\u0002\u0199\u0203\u0005\u00caf\u0002\u019a\u019b\u0007",
    "4\u0002\u0002\u019b\u0203\u0005\u0012\n\u0002\u019c\u019e\u0007D\u0002",
    "\u0002\u019d\u019f\u0005\u0012\n\u0002\u019e\u019d\u0003\u0002\u0002",
    "\u0002\u019e\u019f\u0003\u0002\u0002\u0002\u019f\u0203\u0003\u0002\u0002",
    "\u0002\u01a0\u01a1\u0007h\u0002\u0002\u01a1\u01a4\u0007R\u0002\u0002",
    "\u01a2\u01a3\u0007O\u0002\u0002\u01a3\u01a5\u00079\u0002\u0002\u01a4",
    "\u01a2\u0003\u0002\u0002\u0002\u01a4\u01a5\u0003\u0002\u0002\u0002\u01a5",
    "\u01a6\u0003\u0002\u0002\u0002\u01a6\u01a9\u0005\u00caf\u0002\u01a7",
    "\u01a8\u0007Q\u0002\u0002\u01a8\u01aa\u0005\u0012\n\u0002\u01a9\u01a7",
    "\u0003\u0002\u0002\u0002\u01a9\u01aa\u0003\u0002\u0002\u0002\u01aa\u0203",
    "\u0003\u0002\u0002\u0002\u01ab\u01ac\u0007h\u0002\u0002\u01ac\u01af",
    "\u0007\u0084\u0002\u0002\u01ad\u01ae\u0007O\u0002\u0002\u01ae\u01b0",
    "\u00079\u0002\u0002\u01af\u01ad\u0003\u0002\u0002\u0002\u01af\u01b0",
    "\u0003\u0002\u0002\u0002\u01b0\u01b1\u0003\u0002\u0002\u0002\u01b1\u01b4",
    "\u0005\u00caf\u0002\u01b2\u01b3\u0007Q\u0002\u0002\u01b3\u01b5\u0005",
    "\u0012\n\u0002\u01b4\u01b2\u0003\u0002\u0002\u0002\u01b4\u01b5\u0003",
    "\u0002\u0002\u0002\u01b5\u0203\u0003\u0002\u0002\u0002\u01b6\u01b7\u0007",
    "n\u0002\u0002\u01b7\u01ba\u0007\u001c\u0002\u0002\u01b8\u01b9\u0007",
    "O\u0002\u0002\u01b9\u01bb\u00079\u0002\u0002\u01ba\u01b8\u0003\u0002",
    "\u0002\u0002\u01ba\u01bb\u0003\u0002\u0002\u0002\u01bb\u01bc\u0003\u0002",
    "\u0002\u0002\u01bc\u01bd\u0005\u00caf\u0002\u01bd\u01be\u0005N(\u0002",
    "\u01be\u0203\u0003\u0002\u0002\u0002\u01bf\u01c0\u0007n\u0002\u0002",
    "\u01c0\u01c3\u0007\u001c\u0002\u0002\u01c1\u01c2\u0007O\u0002\u0002",
    "\u01c2\u01c4\u00079\u0002\u0002\u01c3\u01c1\u0003\u0002\u0002\u0002",
    "\u01c3\u01c4\u0003\u0002\u0002\u0002\u01c4\u01c5\u0003\u0002\u0002\u0002",
    "\u01c5\u01c6\u0005\u00caf\u0002\u01c6\u01c7\u0007\u001d\u0002\u0002",
    "\u01c7\u01c8\u0007\u00c7\u0002\u0002\u01c8\u0203\u0003\u0002\u0002\u0002",
    "\u01c9\u01ca\u0007n\u0002\u0002\u01ca\u01cd\u0007\u001c\u0002\u0002",
    "\u01cb\u01cc\u0007O\u0002\u0002\u01cc\u01ce\u00079\u0002\u0002\u01cd",
    "\u01cb\u0003\u0002\u0002\u0002\u01cd\u01ce\u0003\u0002\u0002\u0002\u01ce",
    "\u01cf\u0003\u0002\u0002\u0002\u01cf\u01d0\u0005\u00caf\u0002\u01d0",
    "\u01d1\u0007\u0088\u0002\u0002\u01d1\u01d2\u0005\u0010\t\u0002\u01d2",
    "\u0203\u0003\u0002\u0002\u0002\u01d3\u01d4\u0007n\u0002\u0002\u01d4",
    "\u01d7\u0007\u001c\u0002\u0002\u01d5\u01d6\u0007O\u0002\u0002\u01d6",
    "\u01d8\u00079\u0002\u0002\u01d7\u01d5\u0003\u0002\u0002\u0002\u01d7",
    "\u01d8\u0003\u0002\u0002\u0002\u01d8\u01d9\u0003\u0002\u0002\u0002\u01d9",
    "\u0203\u0005F$\u0002\u01da\u01db\u0007n\u0002\u0002\u01db\u01dc\u0007",
    "{\u0002\u0002\u01dc\u01dd\u0007\u0014\u0002\u0002\u01dd\u0203\u0005",
    "\u00c0a\u0002\u01de\u01df\u0007n\u0002\u0002\u01df\u0203\u0005@!\u0002",
    "\u01e0\u01e1\u0007p\u0002\u0002\u01e1\u01eb\u0005\u0012\n\u0002\u01e2",
    "\u01e3\u0007\u00a8\u0002\u0002\u01e3\u01e4\u00071\u0002\u0002\u01e4",
    "\u01ec\u0007\u00c7\u0002\u0002\u01e5\u01e6\u0007\u00a8\u0002\u0002\u01e6",
    "\u01e7\u0007\u00b8\u0002\u0002\u01e7\u01ec\u0007\u00c7\u0002\u0002\u01e8",
    "\u01e9\u0007\u00a8\u0002\u0002\u01e9\u01ea\u0007\u00a0\u0002\u0002\u01ea",
    "\u01ec\u0005\u00d0i\u0002\u01eb\u01e2\u0003\u0002\u0002\u0002\u01eb",
    "\u01e5\u0003\u0002\u0002\u0002\u01eb\u01e8\u0003\u0002\u0002\u0002\u01ec",
    "\u0203\u0003\u0002\u0002\u0002\u01ed\u01ee\u0007\u0088\u0002\u0002\u01ee",
    "\u0203\u0007\u00ae\u0002\u0002\u01ef\u01f0\u0007\u0089\u0002\u0002\u01f0",
    "\u01f3\u0007\u001c\u0002\u0002\u01f1\u01f2\u0007O\u0002\u0002\u01f2",
    "\u01f4\u00079\u0002\u0002\u01f3\u01f1\u0003\u0002\u0002\u0002\u01f3",
    "\u01f4\u0003\u0002\u0002\u0002\u01f4\u01f5\u0003\u0002\u0002\u0002\u01f5",
    "\u01f6\u0005\u00caf\u0002\u01f6\u01f7\u0007\u00a8\u0002\u0002\u01f7",
    "\u01f8\u0005\u00caf\u0002\u01f8\u0203\u0003\u0002\u0002\u0002\u01f9",
    "\u01fa\u0007\u008a\u0002\u0002\u01fa\u01fb\u0005\u0012\n\u0002\u01fb",
    "\u01fc\u0007E\u0002\u0002\u01fc\u01fd\u0005\u00d0i\u0002\u01fd\u0203",
    "\u0003\u0002\u0002\u0002\u01fe\u01ff\u0007\u00b2\u0002\u0002\u01ff\u0200",
    "\u0005\f\u0007\u0002\u0200\u0201\u0005|?\u0002\u0201\u0203\u0003\u0002",
    "\u0002\u0002\u0202\u012c\u0003\u0002\u0002\u0002\u0202\u0138\u0003\u0002",
    "\u0002\u0002\u0202\u0144\u0003\u0002\u0002\u0002\u0202\u0150\u0003\u0002",
    "\u0002\u0002\u0202\u0156\u0003\u0002\u0002\u0002\u0202\u0161\u0003\u0002",
    "\u0002\u0002\u0202\u016c\u0003\u0002\u0002\u0002\u0202\u0177\u0003\u0002",
    "\u0002\u0002\u0202\u0180\u0003\u0002\u0002\u0002\u0202\u0183\u0003\u0002",
    "\u0002\u0002\u0202\u0185\u0003\u0002\u0002\u0002\u0202\u018c\u0003\u0002",
    "\u0002\u0002\u0202\u0193\u0003\u0002\u0002\u0002\u0202\u019a\u0003\u0002",
    "\u0002\u0002\u0202\u019c\u0003\u0002\u0002\u0002\u0202\u01a0\u0003\u0002",
    "\u0002\u0002\u0202\u01ab\u0003\u0002\u0002\u0002\u0202\u01b6\u0003\u0002",
    "\u0002\u0002\u0202\u01bf\u0003\u0002\u0002\u0002\u0202\u01c9\u0003\u0002",
    "\u0002\u0002\u0202\u01d3\u0003\u0002\u0002\u0002\u0202\u01da\u0003\u0002",
    "\u0002\u0002\u0202\u01de\u0003\u0002\u0002\u0002\u0202\u01e0\u0003\u0002",
    "\u0002\u0002\u0202\u01ed\u0003\u0002\u0002\u0002\u0202\u01ef\u0003\u0002",
    "\u0002\u0002\u0202\u01f9\u0003\u0002\u0002\u0002\u0202\u01fe\u0003\u0002",
    "\u0002\u0002\u0203\u000b\u0003\u0002\u0002\u0002\u0204\u0209\u0005\u000e",
    "\b\u0002\u0205\u0206\u0007\u00cd\u0002\u0002\u0206\u0208\u0005\u000e",
    "\b\u0002\u0207\u0205\u0003\u0002\u0002\u0002\u0208\u020b\u0003\u0002",
    "\u0002\u0002\u0209\u0207\u0003\u0002\u0002\u0002\u0209\u020a\u0003\u0002",
    "\u0002\u0002\u020a\r\u0003\u0002\u0002\u0002\u020b\u0209\u0003\u0002",
    "\u0002\u0002\u020c\u020d\u0005\u00caf\u0002\u020d\u020e\u0007\u00d2",
    "\u0002\u0002\u020e\u020f\u0005\u00c0a\u0002\u020f\u000f\u0003\u0002",
    "\u0002\u0002\u0210\u0211\t\u0002\u0002\u0002\u0211\u0011\u0003\u0002",
    "\u0002\u0002\u0212\u0213\u0007\u007f\u0002\u0002\u0213\u0218\u0005\u00c0",
    "a\u0002\u0214\u0215\u0007\u007f\u0002\u0002\u0215\u0216\u0007N\u0002",
    "\u0002\u0216\u0218\u0007\u00c7\u0002\u0002\u0217\u0212\u0003\u0002\u0002",
    "\u0002\u0217\u0214\u0003\u0002\u0002\u0002\u0218\u0013\u0003\u0002\u0002",
    "\u0002\u0219\u021a\u0007\u0011\u0002\u0002\u021a\u021b\u00070\u0002",
    "\u0002\u021b\u021d\u0005\u00d0i\u0002\u021c\u021e\u0005.\u0018\u0002",
    "\u021d\u021c\u0003\u0002\u0002\u0002\u021d\u021e\u0003\u0002\u0002\u0002",
    "\u021e\u0015\u0003\u0002\u0002\u0002\u021f\u0220\u0007\u0017\u0002\u0002",
    "\u0220\u0221\u0007\u00a0\u0002\u0002\u0221\u0223\u0005\u00d0i\u0002",
    "\u0222\u0224\u0005\u0012\n\u0002\u0223\u0222\u0003\u0002\u0002\u0002",
    "\u0223\u0224\u0003\u0002\u0002\u0002\u0224\u0017\u0003\u0002\u0002\u0002",
    "\u0225\u0226\t\u0003\u0002\u0002\u0226\u022a\u0007#\u0002\u0002\u0227",
    "\u0228\u0007O\u0002\u0002\u0228\u0229\u0007t\u0002\u0002\u0229\u022b",
    "\u00079\u0002\u0002\u022a\u0227\u0003\u0002\u0002\u0002\u022a\u022b",
    "\u0003\u0002\u0002\u0002\u022b\u022c\u0003\u0002\u0002\u0002\u022c\u022e",
    "\u0005\u00d6l\u0002\u022d\u022f\u0005.\u0018\u0002\u022e\u022d\u0003",
    "\u0002\u0002\u0002\u022e\u022f\u0003\u0002\u0002\u0002\u022f\u0231\u0003",
    "\u0002\u0002\u0002\u0230\u0232\u0005B\"\u0002\u0231\u0230\u0003\u0002",
    "\u0002\u0002\u0231\u0232\u0003\u0002\u0002\u0002\u0232\u02bf\u0003\u0002",
    "\u0002\u0002\u0233\u023b\u0007\u0011\u0002\u0002\u0234\u0237\u0007\u001f",
    "\u0002\u0002\u0235\u0236\u0007z\u0002\u0002\u0236\u0238\u0007\u008a",
    "\u0002\u0002\u0237\u0235\u0003\u0002\u0002\u0002\u0237\u0238\u0003\u0002",
    "\u0002\u0002\u0238\u023b\u0003\u0002\u0002\u0002\u0239\u023b\u0007\u008a",
    "\u0002\u0002\u023a\u0233\u0003\u0002\u0002\u0002\u023a\u0234\u0003\u0002",
    "\u0002\u0002\u023a\u0239\u0003\u0002\u0002\u0002\u023b\u023c\u0003\u0002",
    "\u0002\u0002\u023c\u0240\u00070\u0002\u0002\u023d\u023e\u0007O\u0002",
    "\u0002\u023e\u023f\u0007t\u0002\u0002\u023f\u0241\u00079\u0002\u0002",
    "\u0240\u023d\u0003\u0002\u0002\u0002\u0240\u0241\u0003\u0002\u0002\u0002",
    "\u0241\u0242\u0003\u0002\u0002\u0002\u0242\u0244\u0005\u00d0i\u0002",
    "\u0243\u0245\u00050\u0019\u0002\u0244\u0243\u0003\u0002\u0002\u0002",
    "\u0244\u0245\u0003\u0002\u0002\u0002\u0245\u0247\u0003\u0002\u0002\u0002",
    "\u0246\u0248\u0005.\u0018\u0002\u0247\u0246\u0003\u0002\u0002\u0002",
    "\u0247\u0248\u0003\u0002\u0002\u0002\u0248\u0249\u0003\u0002\u0002\u0002",
    "\u0249\u024a\u0005\u001a\u000e\u0002\u024a\u024b\u0005\u001e\u0010\u0002",
    "\u024b\u02bf\u0003\u0002\u0002\u0002\u024c\u024d\t\u0003\u0002\u0002",
    "\u024d\u024e\u0007e\u0002\u0002\u024e\u0252\u0007\u00b7\u0002\u0002",
    "\u024f\u0250\u0007O\u0002\u0002\u0250\u0251\u0007t\u0002\u0002\u0251",
    "\u0253\u00079\u0002\u0002\u0252\u024f\u0003\u0002\u0002\u0002\u0252",
    "\u0253\u0003\u0002\u0002\u0002\u0253\u0254\u0003\u0002\u0002\u0002\u0254",
    "\u0256\u0005\u00d0i\u0002\u0255\u0257\u00050\u0019\u0002\u0256\u0255",
    "\u0003\u0002\u0002\u0002\u0256\u0257\u0003\u0002\u0002\u0002\u0257\u0259",
    "\u0003\u0002\u0002\u0002\u0258\u025a\u0005.\u0018\u0002\u0259\u0258",
    "\u0003\u0002\u0002\u0002\u0259\u025a\u0003\u0002\u0002\u0002\u025a\u0260",
    "\u0003\u0002\u0002\u0002\u025b\u025c\u0007\u00be\u0002\u0002\u025c\u025e",
    "\u0007\u00a6\u0002\u0002\u025d\u025f\u0007\u00c5\u0002\u0002\u025e\u025d",
    "\u0003\u0002\u0002\u0002\u025e\u025f\u0003\u0002\u0002\u0002\u025f\u0261",
    "\u0003\u0002\u0002\u0002\u0260\u025b\u0003\u0002\u0002\u0002\u0260\u0261",
    "\u0003\u0002\u0002\u0002\u0261\u0263\u0003\u0002\u0002\u0002\u0262\u0264",
    "\u00052\u001a\u0002\u0263\u0262\u0003\u0002\u0002\u0002\u0263\u0264",
    "\u0003\u0002\u0002\u0002\u0264\u0266\u0003\u0002\u0002\u0002\u0265\u0267",
    "\u00056\u001c\u0002\u0266\u0265\u0003\u0002\u0002\u0002\u0266\u0267",
    "\u0003\u0002\u0002\u0002\u0267\u0268\u0003\u0002\u0002\u0002\u0268\u0269",
    "\u00054\u001b\u0002\u0269\u02bf\u0003\u0002\u0002\u0002\u026a\u026b",
    "\t\u0003\u0002\u0002\u026b\u026c\u0007i\u0002\u0002\u026c\u0270\u0007",
    "\u00b7\u0002\u0002\u026d\u026e\u0007O\u0002\u0002\u026e\u026f\u0007",
    "t\u0002\u0002\u026f\u0271\u00079\u0002\u0002\u0270\u026d\u0003\u0002",
    "\u0002\u0002\u0270\u0271\u0003\u0002\u0002\u0002\u0271\u0272\u0003\u0002",
    "\u0002\u0002\u0272\u0274\u0005\u00d0i\u0002\u0273\u0275\u00050\u0019",
    "\u0002\u0274\u0273\u0003\u0002\u0002\u0002\u0274\u0275\u0003\u0002\u0002",
    "\u0002\u0275\u0277\u0003\u0002\u0002\u0002\u0276\u0278\u0005.\u0018",
    "\u0002\u0277\u0276\u0003\u0002\u0002\u0002\u0277\u0278\u0003\u0002\u0002",
    "\u0002\u0278\u027a\u0003\u0002\u0002\u0002\u0279\u027b\u00056\u001c",
    "\u0002\u027a\u0279\u0003\u0002\u0002\u0002\u027a\u027b\u0003\u0002\u0002",
    "\u0002\u027b\u0281\u0003\u0002\u0002\u0002\u027c\u0282\u00052\u001a",
    "\u0002\u027d\u027f\u00058\u001d\u0002\u027e\u0280\u0007\u0080\u0002",
    "\u0002\u027f\u027e\u0003\u0002\u0002\u0002\u027f\u0280\u0003\u0002\u0002",
    "\u0002\u0280\u0282\u0003\u0002\u0002\u0002\u0281\u027c\u0003\u0002\u0002",
    "\u0002\u0281\u027d\u0003\u0002\u0002\u0002\u0282\u0283\u0003\u0002\u0002",
    "\u0002\u0283\u0284\u00054\u001b\u0002\u0284\u02bf\u0003\u0002\u0002",
    "\u0002\u0285\u028d\u0007\u0011\u0002\u0002\u0286\u0289\u0007\u001f\u0002",
    "\u0002\u0287\u0288\u0007z\u0002\u0002\u0288\u028a\u0007\u008a\u0002",
    "\u0002\u0289\u0287\u0003\u0002\u0002\u0002\u0289\u028a\u0003\u0002\u0002",
    "\u0002\u028a\u028d\u0003\u0002\u0002\u0002\u028b\u028d\u0007\u008a\u0002",
    "\u0002\u028c\u0285\u0003\u0002\u0002\u0002\u028c\u0286\u0003\u0002\u0002",
    "\u0002\u028c\u028b\u0003\u0002\u0002\u0002\u028d\u028f\u0003\u0002\u0002",
    "\u0002\u028e\u0290\u0007\u00a2\u0002\u0002\u028f\u028e\u0003\u0002\u0002",
    "\u0002\u028f\u0290\u0003\u0002\u0002\u0002\u0290\u0291\u0003\u0002\u0002",
    "\u0002\u0291\u0295\u0007\u00a0\u0002\u0002\u0292\u0293\u0007O\u0002",
    "\u0002\u0293\u0294\u0007t\u0002\u0002\u0294\u0296\u00079\u0002\u0002",
    "\u0295\u0292\u0003\u0002\u0002\u0002\u0295\u0296\u0003\u0002\u0002\u0002",
    "\u0296\u0297\u0003\u0002\u0002\u0002\u0297\u0299\u0005\u00d0i\u0002",
    "\u0298\u029a\u00050\u0019\u0002\u0299\u0298\u0003\u0002\u0002\u0002",
    "\u0299\u029a\u0003\u0002\u0002\u0002\u029a\u029c\u0003\u0002\u0002\u0002",
    "\u029b\u029d\u0005.\u0018\u0002\u029c\u029b\u0003\u0002\u0002\u0002",
    "\u029c\u029d\u0003\u0002\u0002\u0002\u029d\u029f\u0003\u0002\u0002\u0002",
    "\u029e\u02a0\u00056\u001c\u0002\u029f\u029e\u0003\u0002\u0002\u0002",
    "\u029f\u02a0\u0003\u0002\u0002\u0002\u02a0\u02a2\u0003\u0002\u0002\u0002",
    "\u02a1\u02a3\u00058\u001d\u0002\u02a2\u02a1\u0003\u0002\u0002\u0002",
    "\u02a2\u02a3\u0003\u0002\u0002\u0002\u02a3\u02a5\u0003\u0002\u0002\u0002",
    "\u02a4\u02a6\u00054\u001b\u0002\u02a5\u02a4\u0003\u0002\u0002\u0002",
    "\u02a5\u02a6\u0003\u0002\u0002\u0002\u02a6\u02bf\u0003\u0002\u0002\u0002",
    "\u02a7\u02aa\t\u0003\u0002\u0002\u02a8\u02a9\u0007z\u0002\u0002\u02a9",
    "\u02ab\u0007\u008a\u0002\u0002\u02aa\u02a8\u0003\u0002\u0002\u0002\u02aa",
    "\u02ab\u0003\u0002\u0002\u0002\u02ab\u02ac\u0003\u0002\u0002\u0002\u02ac",
    "\u02b0\u0007\u00b7\u0002\u0002\u02ad\u02ae\u0007O\u0002\u0002\u02ae",
    "\u02af\u0007t\u0002\u0002\u02af\u02b1\u00079\u0002\u0002\u02b0\u02ad",
    "\u0003\u0002\u0002\u0002\u02b0\u02b1\u0003\u0002\u0002\u0002\u02b1\u02b2",
    "\u0003\u0002\u0002\u0002\u02b2\u02b4\u0005\u00d0i\u0002\u02b3\u02b5",
    "\u00050\u0019\u0002\u02b4\u02b3\u0003\u0002\u0002\u0002\u02b4\u02b5",
    "\u0003\u0002\u0002\u0002\u02b5\u02b7\u0003\u0002\u0002\u0002\u02b6\u02b8",
    "\u0005.\u0018\u0002\u02b7\u02b6\u0003\u0002\u0002\u0002\u02b7\u02b8",
    "\u0003\u0002\u0002\u0002\u02b8\u02ba\u0003\u0002\u0002\u0002\u02b9\u02bb",
    "\u00056\u001c\u0002\u02ba\u02b9\u0003\u0002\u0002\u0002\u02ba\u02bb",
    "\u0003\u0002\u0002\u0002\u02bb\u02bc\u0003\u0002\u0002\u0002\u02bc\u02bd",
    "\u00054\u001b\u0002\u02bd\u02bf\u0003\u0002\u0002\u0002\u02be\u0225",
    "\u0003\u0002\u0002\u0002\u02be\u023a\u0003\u0002\u0002\u0002\u02be\u024c",
    "\u0003\u0002\u0002\u0002\u02be\u026a\u0003\u0002\u0002\u0002\u02be\u028c",
    "\u0003\u0002\u0002\u0002\u02be\u02a7\u0003\u0002\u0002\u0002\u02bf\u0019",
    "\u0003\u0002\u0002\u0002\u02c0\u02c1\u0007\u00d8\u0002\u0002\u02c1\u02c6",
    "\u0005\u001c\u000f\u0002\u02c2\u02c3\u0007\u00cd\u0002\u0002\u02c3\u02c5",
    "\u0005\u001c\u000f\u0002\u02c4\u02c2\u0003\u0002\u0002\u0002\u02c5\u02c8",
    "\u0003\u0002\u0002\u0002\u02c6\u02c4\u0003\u0002\u0002\u0002\u02c6\u02c7",
    "\u0003\u0002\u0002\u0002\u02c7\u02c9\u0003\u0002\u0002\u0002\u02c8\u02c6",
    "\u0003\u0002\u0002\u0002\u02c9\u02ca\u0007\u00e2\u0002\u0002\u02ca\u001b",
    "\u0003\u0002\u0002\u0002\u02cb\u02cc\u0005\u00e6t\u0002\u02cc\u02e2",
    "\u0005\u00ba^\u0002\u02cd\u02ce\u0006\u000f\u0002\u0003\u02ce\u02cf",
    "\u0007(\u0002\u0002\u02cf\u02d0\u0005\u00dco\u0002\u02d0\u02d1\b\u000f",
    "\u0001\u0002\u02d1\u02e1\u0003\u0002\u0002\u0002\u02d2\u02d3\u0006\u000f",
    "\u0003\u0003\u02d3\u02d4\u0007;\u0002\u0002\u02d4\u02d5\u0005\u00c0",
    "a\u0002\u02d5\u02d6\b\u000f\u0001\u0002\u02d6\u02e1\u0003\u0002\u0002",
    "\u0002\u02d7\u02d8\u0006\u000f\u0004\u0003\u02d8\u02d9\u0007L\u0002",
    "\u0002\u02d9\u02e1\b\u000f\u0001\u0002\u02da\u02db\u0006\u000f\u0005",
    "\u0003\u02db\u02dc\u0007T\u0002\u0002\u02dc\u02e1\b\u000f\u0001\u0002",
    "\u02dd\u02de\u0006\u000f\u0006\u0003\u02de\u02df\u0007Z\u0002\u0002",
    "\u02df\u02e1\b\u000f\u0001\u0002\u02e0\u02cd\u0003\u0002\u0002\u0002",
    "\u02e0\u02d2\u0003\u0002\u0002\u0002\u02e0\u02d7\u0003\u0002\u0002\u0002",
    "\u02e0\u02da\u0003\u0002\u0002\u0002\u02e0\u02dd\u0003\u0002\u0002\u0002",
    "\u02e1\u02e4\u0003\u0002\u0002\u0002\u02e2\u02e0\u0003\u0002\u0002\u0002",
    "\u02e2\u02e3\u0003\u0002\u0002\u0002\u02e3\u001d\u0003\u0002\u0002\u0002",
    "\u02e4\u02e2\u0003\u0002\u0002\u0002\u02e5\u02e7\u0005 \u0011\u0002",
    "\u02e6\u02e5\u0003\u0002\u0002\u0002\u02e6\u02e7\u0003\u0002\u0002\u0002",
    "\u02e7\u02fe\u0003\u0002\u0002\u0002\u02e8\u02e9\u0006\u0010\u0007\u0003",
    "\u02e9\u02ea\u0005$\u0013\u0002\u02ea\u02eb\b\u0010\u0001\u0002\u02eb",
    "\u02fd\u0003\u0002\u0002\u0002\u02ec\u02ed\u0006\u0010\b\u0003\u02ed",
    "\u02ee\u0005&\u0014\u0002\u02ee\u02ef\b\u0010\u0001\u0002\u02ef\u02fd",
    "\u0003\u0002\u0002\u0002\u02f0\u02f1\u0006\u0010\t\u0003\u02f1\u02f2",
    "\u0005(\u0015\u0002\u02f2\u02f3\b\u0010\u0001\u0002\u02f3\u02fd\u0003",
    "\u0002\u0002\u0002\u02f4\u02f5\u0006\u0010\n\u0003\u02f5\u02f6\u0005",
    "*\u0016\u0002\u02f6\u02f7\b\u0010\u0001\u0002\u02f7\u02fd\u0003\u0002",
    "\u0002\u0002\u02f8\u02f9\u0006\u0010\u000b\u0003\u02f9\u02fa\u0005,",
    "\u0017\u0002\u02fa\u02fb\b\u0010\u0001\u0002\u02fb\u02fd\u0003\u0002",
    "\u0002\u0002\u02fc\u02e8\u0003\u0002\u0002\u0002\u02fc\u02ec\u0003\u0002",
    "\u0002\u0002\u02fc\u02f0\u0003\u0002\u0002\u0002\u02fc\u02f4\u0003\u0002",
    "\u0002\u0002\u02fc\u02f8\u0003\u0002\u0002\u0002\u02fd\u0300\u0003\u0002",
    "\u0002\u0002\u02fe\u02fc\u0003\u0002\u0002\u0002\u02fe\u02ff\u0003\u0002",
    "\u0002\u0002\u02ff\u001f\u0003\u0002\u0002\u0002\u0300\u02fe\u0003\u0002",
    "\u0002\u0002\u0301\u0302\u0007\u0083\u0002\u0002\u0302\u0303\u0007\\",
    "\u0002\u0002\u0303\u0304\u0005\u00bc_\u0002\u0304!\u0003\u0002\u0002",
    "\u0002\u0305\u030c\u0005\u00e6t\u0002\u0306\u0309\u0005\u00e6t\u0002",
    "\u0307\u0308\u0007\u00d8\u0002\u0002\u0308\u030a\u0007\u00e2\u0002\u0002",
    "\u0309\u0307\u0003\u0002\u0002\u0002\u0309\u030a\u0003\u0002\u0002\u0002",
    "\u030a\u030d\u0003\u0002\u0002\u0002\u030b\u030d\u0005\u00dco\u0002",
    "\u030c\u0306\u0003\u0002\u0002\u0002\u030c\u030b\u0003\u0002\u0002\u0002",
    "\u030d#\u0003\u0002\u0002\u0002\u030e\u030f\u0007\u0099\u0002\u0002",
    "\u030f\u0310\u0007\u00d8\u0002\u0002\u0310\u0311\u0005\u00e6t\u0002",
    "\u0311\u0315\u0007\u00d8\u0002\u0002\u0312\u0314\u0005\"\u0012\u0002",
    "\u0313\u0312\u0003\u0002\u0002\u0002\u0314\u0317\u0003\u0002\u0002\u0002",
    "\u0315\u0313\u0003\u0002\u0002\u0002\u0315\u0316\u0003\u0002\u0002\u0002",
    "\u0316\u0318\u0003\u0002\u0002\u0002\u0317\u0315\u0003\u0002\u0002\u0002",
    "\u0318\u0319\u0007\u00e2\u0002\u0002\u0319\u031a\u0007\u00e2\u0002\u0002",
    "\u031a%\u0003\u0002\u0002\u0002\u031b\u031c\u0007b\u0002\u0002\u031c",
    "\u0326\u0007\u00d8\u0002\u0002\u031d\u0327\u0007\u00c5\u0002\u0002\u031e",
    "\u031f\u0007l\u0002\u0002\u031f\u0320\u0007\u00c5\u0002\u0002\u0320",
    "\u0321\u0007j\u0002\u0002\u0321\u0327\u0007\u00c5\u0002\u0002\u0322",
    "\u0323\u0007j\u0002\u0002\u0323\u0324\u0007\u00c5\u0002\u0002\u0324",
    "\u0325\u0007l\u0002\u0002\u0325\u0327\u0007\u00c5\u0002\u0002\u0326",
    "\u031d\u0003\u0002\u0002\u0002\u0326\u031e\u0003\u0002\u0002\u0002\u0326",
    "\u0322\u0003\u0002\u0002\u0002\u0327\u0328\u0003\u0002\u0002\u0002\u0328",
    "\u0329\u0007\u00e2\u0002\u0002\u0329\'\u0003\u0002\u0002\u0002\u032a",
    "\u032b\u0007_\u0002\u0002\u032b\u032c\u0007\u00d8\u0002\u0002\u032c",
    "\u032d\u0005\u00e6t\u0002\u032d\u0331\u0007\u00d8\u0002\u0002\u032e",
    "\u0330\u0005\"\u0012\u0002\u032f\u032e\u0003\u0002\u0002\u0002\u0330",
    "\u0333\u0003\u0002\u0002\u0002\u0331\u032f\u0003\u0002\u0002\u0002\u0331",
    "\u0332\u0003\u0002\u0002\u0002\u0332\u0334\u0003\u0002\u0002\u0002\u0333",
    "\u0331\u0003\u0002\u0002\u0002\u0334\u0335\u0007\u00e2\u0002\u0002\u0335",
    "\u0336\u0007\u00e2\u0002\u0002\u0336)\u0003\u0002\u0002\u0002\u0337",
    "\u0338\u0007\u0086\u0002\u0002\u0338\u0343\u0007\u00d8\u0002\u0002\u0339",
    "\u033a\u0007l\u0002\u0002\u033a\u033b\u0005\u00e6t\u0002\u033b\u033c",
    "\u0007j\u0002\u0002\u033c\u033d\u0005\u00e6t\u0002\u033d\u0344\u0003",
    "\u0002\u0002\u0002\u033e\u033f\u0007j\u0002\u0002\u033f\u0340\u0005",
    "\u00e6t\u0002\u0340\u0341\u0007l\u0002\u0002\u0341\u0342\u0005\u00e6",
    "t\u0002\u0342\u0344\u0003\u0002\u0002\u0002\u0343\u0339\u0003\u0002",
    "\u0002\u0002\u0343\u033e\u0003\u0002\u0002\u0002\u0344\u0345\u0003\u0002",
    "\u0002\u0002\u0345\u0346\u0007\u00e2\u0002\u0002\u0346+\u0003\u0002",
    "\u0002\u0002\u0347\u0348\u0007\u0097\u0002\u0002\u0348\u0349\u0007\u00d8",
    "\u0002\u0002\u0349\u034a\u0005\u009eP\u0002\u034a\u034b\u0007\u00e2",
    "\u0002\u0002\u034b-\u0003\u0002\u0002\u0002\u034c\u034d\u0007x\u0002",
    "\u0002\u034d\u0350\u0007\u0019\u0002\u0002\u034e\u0351\u0005\u00e6t",
    "\u0002\u034f\u0351\u0007\u00c7\u0002\u0002\u0350\u034e\u0003\u0002\u0002",
    "\u0002\u0350\u034f\u0003\u0002\u0002\u0002\u0351/\u0003\u0002\u0002",
    "\u0002\u0352\u0353\u0007\u00b5\u0002\u0002\u0353\u0354\u0007\u00c7\u0002",
    "\u0002\u03541\u0003\u0002\u0002\u0002\u0355\u0356\u0007\u00a8\u0002",
    "\u0002\u0356\u0357\u0005\u00d0i\u0002\u03573\u0003\u0002\u0002\u0002",
    "\u0358\u0359\u0007\f\u0002\u0002\u0359\u035a\u0005j6\u0002\u035a5\u0003",
    "\u0002\u0002\u0002\u035b\u035c\u0007\u00d8\u0002\u0002\u035c\u0361\u0005",
    "D#\u0002\u035d\u035e\u0007\u00cd\u0002\u0002\u035e\u0360\u0005D#\u0002",
    "\u035f\u035d\u0003\u0002\u0002\u0002\u0360\u0363\u0003\u0002\u0002\u0002",
    "\u0361\u035f\u0003\u0002\u0002\u0002\u0361\u0362\u0003\u0002\u0002\u0002",
    "\u0362\u0364\u0003\u0002\u0002\u0002\u0363\u0361\u0003\u0002\u0002\u0002",
    "\u0364\u0365\u0007\u00e2\u0002\u0002\u0365\u036b\u0003\u0002\u0002\u0002",
    "\u0366\u0367\u0007\f\u0002\u0002\u0367\u036b\u0005\u00d0i\u0002\u0368",
    "\u0369\u0007\f\u0002\u0002\u0369\u036b\u0005\u00ceh\u0002\u036a\u035b",
    "\u0003\u0002\u0002\u0002\u036a\u0366\u0003\u0002\u0002\u0002\u036a\u0368",
    "\u0003\u0002\u0002\u0002\u036b7\u0003\u0002\u0002\u0002\u036c\u0387",
    "\u0005B\"\u0002\u036d\u036e\u0006\u001d\f\u0003\u036e\u036f\u0005\u0082",
    "B\u0002\u036f\u0370\b\u001d\u0001\u0002\u0370\u0386\u0003\u0002\u0002",
    "\u0002\u0371\u0372\u0006\u001d\r\u0003\u0372\u0373\u0005:\u001e\u0002",
    "\u0373\u0374\b\u001d\u0001\u0002\u0374\u0386\u0003\u0002\u0002\u0002",
    "\u0375\u0376\u0006\u001d\u000e\u0003\u0376\u0377\u0005<\u001f\u0002",
    "\u0377\u0378\b\u001d\u0001\u0002\u0378\u0386\u0003\u0002\u0002\u0002",
    "\u0379\u037a\u0006\u001d\u000f\u0003\u037a\u037b\u0005> \u0002\u037b",
    "\u037c\b\u001d\u0001\u0002\u037c\u0386\u0003\u0002\u0002\u0002\u037d",
    "\u037e\u0006\u001d\u0010\u0003\u037e\u037f\u0005@!\u0002\u037f\u0380",
    "\b\u001d\u0001\u0002\u0380\u0386\u0003\u0002\u0002\u0002\u0381\u0382",
    "\u0006\u001d\u0011\u0003\u0382\u0383\u0005\u008aF\u0002\u0383\u0384",
    "\b\u001d\u0001\u0002\u0384\u0386\u0003\u0002\u0002\u0002\u0385\u036d",
    "\u0003\u0002\u0002\u0002\u0385\u0371\u0003\u0002\u0002\u0002\u0385\u0375",
    "\u0003\u0002\u0002\u0002\u0385\u0379\u0003\u0002\u0002\u0002\u0385\u037d",
    "\u0003\u0002\u0002\u0002\u0385\u0381\u0003\u0002\u0002\u0002\u0386\u0389",
    "\u0003\u0002\u0002\u0002\u0387\u0385\u0003\u0002\u0002\u0002\u0387\u0388",
    "\u0003\u0002\u0002\u0002\u03889\u0003\u0002\u0002\u0002\u0389\u0387",
    "\u0003\u0002\u0002\u0002\u038a\u038b\u0007\u007f\u0002\u0002\u038b\u038c",
    "\u0007\u0014\u0002\u0002\u038c\u038d\u0005\u00c0a\u0002\u038d;\u0003",
    "\u0002\u0002\u0002\u038e\u038f\u0007\u0083\u0002\u0002\u038f\u0390\u0007",
    "\\\u0002\u0002\u0390\u0391\u0005\u00c0a\u0002\u0391=\u0003\u0002\u0002",
    "\u0002\u0392\u0393\u0007\u0091\u0002\u0002\u0393\u0394\u0007\u0014\u0002",
    "\u0002\u0394\u0395\u0005\u00c0a\u0002\u0395?\u0003\u0002\u0002\u0002",
    "\u0396\u0397\u0007\u00ae\u0002\u0002\u0397\u039c\u0005R*\u0002\u0398",
    "\u0399\u0007\u00cd\u0002\u0002\u0399\u039b\u0005R*\u0002\u039a\u0398",
    "\u0003\u0002\u0002\u0002\u039b\u039e\u0003\u0002\u0002\u0002\u039c\u039a",
    "\u0003\u0002\u0002\u0002\u039c\u039d\u0003\u0002\u0002\u0002\u039dA",
    "\u0003\u0002\u0002\u0002\u039e\u039c\u0003\u0002\u0002\u0002\u039f\u03a1",
    "\u00077\u0002\u0002\u03a0\u03a2\u0007\u00d2\u0002\u0002\u03a1\u03a0",
    "\u0003\u0002\u0002\u0002\u03a1\u03a2\u0003\u0002\u0002\u0002\u03a2\u03a3",
    "\u0003\u0002\u0002\u0002\u03a3\u03a9\u0005\u00e8u\u0002\u03a4\u03a6",
    "\u0007\u00d8\u0002\u0002\u03a5\u03a7\u0005\u00bc_\u0002\u03a6\u03a5",
    "\u0003\u0002\u0002\u0002\u03a6\u03a7\u0003\u0002\u0002\u0002\u03a7\u03a8",
    "\u0003\u0002\u0002\u0002\u03a8\u03aa\u0007\u00e2\u0002\u0002\u03a9\u03a4",
    "\u0003\u0002\u0002\u0002\u03a9\u03aa\u0003\u0002\u0002\u0002\u03aaC",
    "\u0003\u0002\u0002\u0002\u03ab\u03b6\u0005F$\u0002\u03ac\u03ad\u0007",
    "\u001e\u0002\u0002\u03ad\u03ae\u0005\u00e6t\u0002\u03ae\u03af\u0007",
    "\u0017\u0002\u0002\u03af\u03b0\u0005\u00c0a\u0002\u03b0\u03b6\u0003",
    "\u0002\u0002\u0002\u03b1\u03b2\u0007R\u0002\u0002\u03b2\u03b6\u0005",
    "J&\u0002\u03b3\u03b4\u0007\u0084\u0002\u0002\u03b4\u03b6\u0005L\'\u0002",
    "\u03b5\u03ab\u0003\u0002\u0002\u0002\u03b5\u03ac\u0003\u0002\u0002\u0002",
    "\u03b5\u03b1\u0003\u0002\u0002\u0002\u03b5\u03b3\u0003\u0002\u0002\u0002",
    "\u03b6E\u0003\u0002\u0002\u0002\u03b7\u03b8\u0005\u00caf\u0002\u03b8",
    "\u03ba\u0005\u00ba^\u0002\u03b9\u03bb\u0005H%\u0002\u03ba\u03b9\u0003",
    "\u0002\u0002\u0002\u03ba\u03bb\u0003\u0002\u0002\u0002\u03bb\u03be\u0003",
    "\u0002\u0002\u0002\u03bc\u03bd\u0007\u001d\u0002\u0002\u03bd\u03bf\u0007",
    "\u00c7\u0002\u0002\u03be\u03bc\u0003\u0002\u0002\u0002\u03be\u03bf\u0003",
    "\u0002\u0002\u0002\u03bf\u03c1\u0003\u0002\u0002\u0002\u03c0\u03c2\u0005",
    "N(\u0002\u03c1\u03c0\u0003\u0002\u0002\u0002\u03c1\u03c2\u0003\u0002",
    "\u0002\u0002\u03c2\u03c5\u0003\u0002\u0002\u0002\u03c3\u03c4\u0007\u00ae",
    "\u0002\u0002\u03c4\u03c6\u0005\u00c0a\u0002\u03c5\u03c3\u0003\u0002",
    "\u0002\u0002\u03c5\u03c6\u0003\u0002\u0002\u0002\u03c6\u03d8\u0003\u0002",
    "\u0002\u0002\u03c7\u03c9\u0005\u00caf\u0002\u03c8\u03ca\u0005\u00ba",
    "^\u0002\u03c9\u03c8\u0003\u0002\u0002\u0002\u03c9\u03ca\u0003\u0002",
    "\u0002\u0002\u03ca\u03cb\u0003\u0002\u0002\u0002\u03cb\u03ce\u0005H",
    "%\u0002\u03cc\u03cd\u0007\u001d\u0002\u0002\u03cd\u03cf\u0007\u00c7",
    "\u0002\u0002\u03ce\u03cc\u0003\u0002\u0002\u0002\u03ce\u03cf\u0003\u0002",
    "\u0002\u0002\u03cf\u03d1\u0003\u0002\u0002\u0002\u03d0\u03d2\u0005N",
    "(\u0002\u03d1\u03d0\u0003\u0002\u0002\u0002\u03d1\u03d2\u0003\u0002",
    "\u0002\u0002\u03d2\u03d5\u0003\u0002\u0002\u0002\u03d3\u03d4\u0007\u00ae",
    "\u0002\u0002\u03d4\u03d6\u0005\u00c0a\u0002\u03d5\u03d3\u0003\u0002",
    "\u0002\u0002\u03d5\u03d6\u0003\u0002\u0002\u0002\u03d6\u03d8\u0003\u0002",
    "\u0002\u0002\u03d7\u03b7\u0003\u0002\u0002\u0002\u03d7\u03c7\u0003\u0002",
    "\u0002\u0002\u03d8G\u0003\u0002\u0002\u0002\u03d9\u03da\t\u0004\u0002",
    "\u0002\u03da\u03db\u0005\u00c0a\u0002\u03dbI\u0003\u0002\u0002\u0002",
    "\u03dc\u03dd\u0005\u00caf\u0002\u03dd\u03de\u0005\u00c0a\u0002\u03de",
    "\u03df\u0007\u00af\u0002\u0002\u03df\u03e0\u0005\u00ba^\u0002\u03e0",
    "\u03e1\u0007I\u0002\u0002\u03e1\u03e2\u0007\u00c5\u0002\u0002\u03e2",
    "K\u0003\u0002\u0002\u0002\u03e3\u03e4\u0005\u00caf\u0002\u03e4\u03e5",
    "\u0005h5\u0002\u03e5M\u0003\u0002\u0002\u0002\u03e6\u03e7\u0007\u001a",
    "\u0002\u0002\u03e7\u03e8\u0007\u00d8\u0002\u0002\u03e8\u03ed\u0005P",
    ")\u0002\u03e9\u03ea\u0007\u00cd\u0002\u0002\u03ea\u03ec\u0005P)\u0002",
    "\u03eb\u03e9\u0003\u0002\u0002\u0002\u03ec\u03ef\u0003\u0002\u0002\u0002",
    "\u03ed\u03eb\u0003\u0002\u0002\u0002\u03ed\u03ee\u0003\u0002\u0002\u0002",
    "\u03ee\u03f0\u0003\u0002\u0002\u0002\u03ef\u03ed\u0003\u0002\u0002\u0002",
    "\u03f0\u03f1\u0007\u00e2\u0002\u0002\u03f1O\u0003\u0002\u0002\u0002",
    "\u03f2\u03f8\u0005\u00e6t\u0002\u03f3\u03f5\u0007\u00d8\u0002\u0002",
    "\u03f4\u03f6\u0005\u00bc_\u0002\u03f5\u03f4\u0003\u0002\u0002\u0002",
    "\u03f5\u03f6\u0003\u0002\u0002\u0002\u03f6\u03f7\u0003\u0002\u0002\u0002",
    "\u03f7\u03f9\u0007\u00e2\u0002\u0002\u03f8\u03f3\u0003\u0002\u0002\u0002",
    "\u03f8\u03f9\u0003\u0002\u0002\u0002\u03f9Q\u0003\u0002\u0002\u0002",
    "\u03fa\u0402\u0005\u00c0a\u0002\u03fb\u0403\u0007*\u0002\u0002\u03fc",
    "\u03fd\u0007\u00a8\u0002\u0002\u03fd\u03fe\u00071\u0002\u0002\u03fe",
    "\u0403\u0007\u00c7\u0002\u0002\u03ff\u0400\u0007\u00a8\u0002\u0002\u0400",
    "\u0401\u0007\u00b8\u0002\u0002\u0401\u0403\u0007\u00c7\u0002\u0002\u0402",
    "\u03fb\u0003\u0002\u0002\u0002\u0402\u03fc\u0003\u0002\u0002\u0002\u0402",
    "\u03ff\u0003\u0002\u0002\u0002\u0402\u0403\u0003\u0002\u0002\u0002\u0403",
    "S\u0003\u0002\u0002\u0002\u0404\u0406\t\u0005\u0002\u0002\u0405\u0407",
    "\u0007\u00a0\u0002\u0002\u0406\u0405\u0003\u0002\u0002\u0002\u0406\u0407",
    "\u0003\u0002\u0002\u0002\u0407\u0408\u0003\u0002\u0002\u0002\u0408\u0409",
    "\u0005\u00ccg\u0002\u0409U\u0003\u0002\u0002\u0002\u040a\u040b\t\u0006",
    "\u0002\u0002\u040b\u040e\u0007#\u0002\u0002\u040c\u040d\u0007O\u0002",
    "\u0002\u040d\u040f\u00079\u0002\u0002\u040e\u040c\u0003\u0002\u0002",
    "\u0002\u040e\u040f\u0003\u0002\u0002\u0002\u040f\u0410\u0003\u0002\u0002",
    "\u0002\u0410\u0412\u0005\u00d6l\u0002\u0411\u0413\u0005.\u0018\u0002",
    "\u0412\u0411\u0003\u0002\u0002\u0002\u0412\u0413\u0003\u0002\u0002\u0002",
    "\u0413\u042a\u0003\u0002\u0002\u0002\u0414\u041b\t\u0006\u0002\u0002",
    "\u0415\u041c\u00070\u0002\u0002\u0416\u0418\u0007\u00a2\u0002\u0002",
    "\u0417\u0416\u0003\u0002\u0002\u0002\u0417\u0418\u0003\u0002\u0002\u0002",
    "\u0418\u0419\u0003\u0002\u0002\u0002\u0419\u041c\u0007\u00a0\u0002\u0002",
    "\u041a\u041c\u0007\u00b7\u0002\u0002\u041b\u0415\u0003\u0002\u0002\u0002",
    "\u041b\u0417\u0003\u0002\u0002\u0002\u041b\u041a\u0003\u0002\u0002\u0002",
    "\u041c\u041f\u0003\u0002\u0002\u0002\u041d\u041e\u0007O\u0002\u0002",
    "\u041e\u0420\u00079\u0002\u0002\u041f\u041d\u0003\u0002\u0002\u0002",
    "\u041f\u0420\u0003\u0002\u0002\u0002\u0420\u0421\u0003\u0002\u0002\u0002",
    "\u0421\u0423\u0005\u00d0i\u0002\u0422\u0424\u0005.\u0018\u0002\u0423",
    "\u0422\u0003\u0002\u0002\u0002\u0423\u0424\u0003\u0002\u0002\u0002\u0424",
    "\u0427\u0003\u0002\u0002\u0002\u0425\u0426\u0007s\u0002\u0002\u0426",
    "\u0428\u0007)\u0002\u0002\u0427\u0425\u0003\u0002\u0002\u0002\u0427",
    "\u0428\u0003\u0002\u0002\u0002\u0428\u042a\u0003\u0002\u0002\u0002\u0429",
    "\u040a\u0003\u0002\u0002\u0002\u0429\u0414\u0003\u0002\u0002\u0002\u042a",
    "W\u0003\u0002\u0002\u0002\u042b\u042c\u00079\u0002\u0002\u042c\u042d",
    "\u0007#\u0002\u0002\u042d\u0439\u0005\u00d6l\u0002\u042e\u0435\u0007",
    "9\u0002\u0002\u042f\u0436\u00070\u0002\u0002\u0430\u0432\u0007\u00a2",
    "\u0002\u0002\u0431\u0430\u0003\u0002\u0002\u0002\u0431\u0432\u0003\u0002",
    "\u0002\u0002\u0432\u0433\u0003\u0002\u0002\u0002\u0433\u0436\u0007\u00a0",
    "\u0002\u0002\u0434\u0436\u0007\u00b7\u0002\u0002\u0435\u042f\u0003\u0002",
    "\u0002\u0002\u0435\u0431\u0003\u0002\u0002\u0002\u0435\u0434\u0003\u0002",
    "\u0002\u0002\u0435\u0436\u0003\u0002\u0002\u0002\u0436\u0437\u0003\u0002",
    "\u0002\u0002\u0437\u0439\u0005\u00d0i\u0002\u0438\u042b\u0003\u0002",
    "\u0002\u0002\u0438\u042e\u0003\u0002\u0002\u0002\u0439Y\u0003\u0002",
    "\u0002\u0002\u043a\u043b\u0007:\u0002\u0002\u043b\u043c\u0007\u000f",
    "\u0002\u0002\u043c\u0441\u0005\u0006\u0004\u0002\u043d\u043e\u0007:",
    "\u0002\u0002\u043e\u043f\u0007\u009e\u0002\u0002\u043f\u0441\u0005\u0006",
    "\u0004\u0002\u0440\u043a\u0003\u0002\u0002\u0002\u0440\u043d\u0003\u0002",
    "\u0002\u0002\u0441[\u0003\u0002\u0002\u0002\u0442\u0443\u0007V\u0002",
    "\u0002\u0443\u0445\u0007X\u0002\u0002\u0444\u0446\u0007\u00a0\u0002",
    "\u0002\u0445\u0444\u0003\u0002\u0002\u0002\u0445\u0446\u0003\u0002\u0002",
    "\u0002\u0446\u044a\u0003\u0002\u0002\u0002\u0447\u044b\u0005\u00d0i",
    "\u0002\u0448\u0449\u0007G\u0002\u0002\u0449\u044b\u0005\u00ceh\u0002",
    "\u044a\u0447\u0003\u0002\u0002\u0002\u044a\u0448\u0003\u0002\u0002\u0002",
    "\u044b\u044d\u0003\u0002\u0002\u0002\u044c\u044e\u0005^0\u0002\u044d",
    "\u044c\u0003\u0002\u0002\u0002\u044d\u044e\u0003\u0002\u0002\u0002\u044e",
    "\u044f\u0003\u0002\u0002\u0002\u044f\u0450\u0005`1\u0002\u0450]\u0003",
    "\u0002\u0002\u0002\u0451\u0452\u0007\u00d8\u0002\u0002\u0452\u0457\u0005",
    "\u00caf\u0002\u0453\u0454\u0007\u00cd\u0002\u0002\u0454\u0456\u0005",
    "\u00caf\u0002\u0455\u0453\u0003\u0002\u0002\u0002\u0456\u0459\u0003",
    "\u0002\u0002\u0002\u0457\u0455\u0003\u0002\u0002\u0002\u0457\u0458\u0003",
    "\u0002\u0002\u0002\u0458\u045a\u0003\u0002\u0002\u0002\u0459\u0457\u0003",
    "\u0002\u0002\u0002\u045a\u045b\u0007\u00e2\u0002\u0002\u045b_\u0003",
    "\u0002\u0002\u0002\u045c\u045d\u0007C\u0002\u0002\u045d\u0466\u0005",
    "\u00e6t\u0002\u045e\u0466\u0007\u00b6\u0002\u0002\u045f\u0461\u0005",
    "j6\u0002\u0460\u0462\u0007\u00e3\u0002\u0002\u0461\u0460\u0003\u0002",
    "\u0002\u0002\u0461\u0462\u0003\u0002\u0002\u0002\u0462\u0463\u0003\u0002",
    "\u0002\u0002\u0463\u0464\u0007\u0002\u0002\u0003\u0464\u0466\u0003\u0002",
    "\u0002\u0002\u0465\u045c\u0003\u0002\u0002\u0002\u0465\u045e\u0003\u0002",
    "\u0002\u0002\u0465\u045f\u0003\u0002\u0002\u0002\u0466a\u0003\u0002",
    "\u0002\u0002\u0467\u0468\u0007]\u0002\u0002\u0468\u046a\u0007q\u0002",
    "\u0002\u0469\u046b\u0005.\u0018\u0002\u046a\u0469\u0003\u0002\u0002",
    "\u0002\u046a\u046b\u0003\u0002\u0002\u0002\u046b\u046c\u0003\u0002\u0002",
    "\u0002\u046c\u046e\u0005|?\u0002\u046d\u046f\t\u0007\u0002\u0002\u046e",
    "\u046d\u0003\u0002\u0002\u0002\u046e\u046f\u0003\u0002\u0002\u0002\u046f",
    "c\u0003\u0002\u0002\u0002\u0470\u0471\u0007y\u0002\u0002\u0471\u0472",
    "\u0007\u00a0\u0002\u0002\u0472\u0474\u0005\u00d0i\u0002\u0473\u0475",
    "\u0005.\u0018\u0002\u0474\u0473\u0003\u0002\u0002\u0002\u0474\u0475",
    "\u0003\u0002\u0002\u0002\u0475\u0477\u0003\u0002\u0002\u0002\u0476\u0478",
    "\u0005\u0012\n\u0002\u0477\u0476\u0003\u0002\u0002\u0002\u0477\u0478",
    "\u0003\u0002\u0002\u0002\u0478\u047a\u0003\u0002\u0002\u0002\u0479\u047b",
    "\u0007>\u0002\u0002\u047a\u0479\u0003\u0002\u0002\u0002\u047a\u047b",
    "\u0003\u0002\u0002\u0002\u047b\u047d\u0003\u0002\u0002\u0002\u047c\u047e",
    "\u0007\'\u0002\u0002\u047d\u047c\u0003\u0002\u0002\u0002\u047d\u047e",
    "\u0003\u0002\u0002\u0002\u047ee\u0003\u0002\u0002\u0002\u047f\u0480",
    "\u0007\u0089\u0002\u0002\u0480\u0481\u0007\u00a0\u0002\u0002\u0481\u0482",
    "\u0005\u00d0i\u0002\u0482\u0483\u0007\u00a8\u0002\u0002\u0483\u048b",
    "\u0005\u00d0i\u0002\u0484\u0485\u0007\u00cd\u0002\u0002\u0485\u0486",
    "\u0005\u00d0i\u0002\u0486\u0487\u0007\u00a8\u0002\u0002\u0487\u0488",
    "\u0005\u00d0i\u0002\u0488\u048a\u0003\u0002\u0002\u0002\u0489\u0484",
    "\u0003\u0002\u0002\u0002\u048a\u048d\u0003\u0002\u0002\u0002\u048b\u0489",
    "\u0003\u0002\u0002\u0002\u048b\u048c\u0003\u0002\u0002\u0002\u048c\u048f",
    "\u0003\u0002\u0002\u0002\u048d\u048b\u0003\u0002\u0002\u0002\u048e\u0490",
    "\u0005.\u0018\u0002\u048f\u048e\u0003\u0002\u0002\u0002\u048f\u0490",
    "\u0003\u0002\u0002\u0002\u0490g\u0003\u0002\u0002\u0002\u0491\u0493",
    "\u0007\u00d8\u0002\u0002\u0492\u0494\u0005p9\u0002\u0493\u0492\u0003",
    "\u0002\u0002\u0002\u0493\u0494\u0003\u0002\u0002\u0002\u0494\u0495\u0003",
    "\u0002\u0002\u0002\u0495\u0496\u0007\u0093\u0002\u0002\u0496\u0498\u0005",
    "\u00bc_\u0002\u0497\u0499\u0005~@\u0002\u0498\u0497\u0003\u0002\u0002",
    "\u0002\u0498\u0499\u0003\u0002\u0002\u0002\u0499\u049b\u0003\u0002\u0002",
    "\u0002\u049a\u049c\u0005\u0084C\u0002\u049b\u049a\u0003\u0002\u0002",
    "\u0002\u049b\u049c\u0003\u0002\u0002\u0002\u049c\u049d\u0003\u0002\u0002",
    "\u0002\u049d\u049e\u0007\u00e2\u0002\u0002\u049ei\u0003\u0002\u0002",
    "\u0002\u049f\u04a5\u0005l7\u0002\u04a0\u04a1\u0007\u00b1\u0002\u0002",
    "\u04a1\u04a2\u0007\u0006\u0002\u0002\u04a2\u04a4\u0005l7\u0002\u04a3",
    "\u04a0\u0003\u0002\u0002\u0002\u04a4\u04a7\u0003\u0002\u0002\u0002\u04a5",
    "\u04a3\u0003\u0002\u0002\u0002\u04a5\u04a6\u0003\u0002\u0002\u0002\u04a6",
    "k\u0003\u0002\u0002\u0002\u04a7\u04a5\u0003\u0002\u0002\u0002\u04a8",
    "\u04ae\u0005n8\u0002\u04a9\u04aa\u0007\u00d8\u0002\u0002\u04aa\u04ab",
    "\u0005j6\u0002\u04ab\u04ac\u0007\u00e2\u0002\u0002\u04ac\u04ae\u0003",
    "\u0002\u0002\u0002\u04ad\u04a8\u0003\u0002\u0002\u0002\u04ad\u04a9\u0003",
    "\u0002\u0002\u0002\u04aem\u0003\u0002\u0002\u0002\u04af\u04b1\u0005",
    "p9\u0002\u04b0\u04af\u0003\u0002\u0002\u0002\u04b0\u04b1\u0003\u0002",
    "\u0002\u0002\u04b1\u04b2\u0003\u0002\u0002\u0002\u04b2\u04b4\u0007\u0093",
    "\u0002\u0002\u04b3\u04b5\u00072\u0002\u0002\u04b4\u04b3\u0003\u0002",
    "\u0002\u0002\u04b4\u04b5\u0003\u0002\u0002\u0002\u04b5\u04b7\u0003\u0002",
    "\u0002\u0002\u04b6\u04b8\u0005r:\u0002\u04b7\u04b6\u0003\u0002\u0002",
    "\u0002\u04b7\u04b8\u0003\u0002\u0002\u0002\u04b8\u04b9\u0003\u0002\u0002",
    "\u0002\u04b9\u04bb\u0005\u00bc_\u0002\u04ba\u04bc\u0005t;\u0002\u04bb",
    "\u04ba\u0003\u0002\u0002\u0002\u04bb\u04bc\u0003\u0002\u0002\u0002\u04bc",
    "\u04be\u0003\u0002\u0002\u0002\u04bd\u04bf\u0005v<\u0002\u04be\u04bd",
    "\u0003\u0002\u0002\u0002\u04be\u04bf\u0003\u0002\u0002\u0002\u04bf\u04c1",
    "\u0003\u0002\u0002\u0002\u04c0\u04c2\u0005x=\u0002\u04c1\u04c0\u0003",
    "\u0002\u0002\u0002\u04c1\u04c2\u0003\u0002\u0002\u0002\u04c2\u04c4\u0003",
    "\u0002\u0002\u0002\u04c3\u04c5\u0005z>\u0002\u04c4\u04c3\u0003\u0002",
    "\u0002\u0002\u04c4\u04c5\u0003\u0002\u0002\u0002\u04c5\u04c7\u0003\u0002",
    "\u0002\u0002\u04c6\u04c8\u0005|?\u0002\u04c7\u04c6\u0003\u0002\u0002",
    "\u0002\u04c7\u04c8\u0003\u0002\u0002\u0002\u04c8\u04ca\u0003\u0002\u0002",
    "\u0002\u04c9\u04cb\u0005~@\u0002\u04ca\u04c9\u0003\u0002\u0002\u0002",
    "\u04ca\u04cb\u0003\u0002\u0002\u0002\u04cb\u04ce\u0003\u0002\u0002\u0002",
    "\u04cc\u04cd\u0007\u00be\u0002\u0002\u04cd\u04cf\t\b\u0002\u0002\u04ce",
    "\u04cc\u0003\u0002\u0002\u0002\u04ce\u04cf\u0003\u0002\u0002\u0002\u04cf",
    "\u04d2\u0003\u0002\u0002\u0002\u04d0\u04d1\u0007\u00be\u0002\u0002\u04d1",
    "\u04d3\u0007\u00aa\u0002\u0002\u04d2\u04d0\u0003\u0002\u0002\u0002\u04d2",
    "\u04d3\u0003\u0002\u0002\u0002\u04d3\u04d5\u0003\u0002\u0002\u0002\u04d4",
    "\u04d6\u0005\u0080A\u0002\u04d5\u04d4\u0003\u0002\u0002\u0002\u04d5",
    "\u04d6\u0003\u0002\u0002\u0002\u04d6\u04d8\u0003\u0002\u0002\u0002\u04d7",
    "\u04d9\u0005\u0082B\u0002\u04d8\u04d7\u0003\u0002\u0002\u0002\u04d8",
    "\u04d9\u0003\u0002\u0002\u0002\u04d9\u04db\u0003\u0002\u0002\u0002\u04da",
    "\u04dc\u0005\u0086D\u0002\u04db\u04da\u0003\u0002\u0002\u0002\u04db",
    "\u04dc\u0003\u0002\u0002\u0002\u04dc\u04de\u0003\u0002\u0002\u0002\u04dd",
    "\u04df\u0005\u0088E\u0002\u04de\u04dd\u0003\u0002\u0002\u0002\u04de",
    "\u04df\u0003\u0002\u0002\u0002\u04df\u04e1\u0003\u0002\u0002\u0002\u04e0",
    "\u04e2\u0005\u008aF\u0002\u04e1\u04e0\u0003\u0002\u0002\u0002\u04e1",
    "\u04e2\u0003\u0002\u0002\u0002\u04e2o\u0003\u0002\u0002\u0002\u04e3",
    "\u04e4\u0007\u00be\u0002\u0002\u04e4\u04e5\u0005\u00bc_\u0002\u04e5",
    "q\u0003\u0002\u0002\u0002\u04e6\u04e7\u0007\u00a9\u0002\u0002\u04e7",
    "\u04ea\u0007\u00c5\u0002\u0002\u04e8\u04e9\u0007\u00be\u0002\u0002\u04e9",
    "\u04eb\u0007\u00a5\u0002\u0002\u04ea\u04e8\u0003\u0002\u0002\u0002\u04ea",
    "\u04eb\u0003\u0002\u0002\u0002\u04ebs\u0003\u0002\u0002\u0002\u04ec",
    "\u04ed\u0007E\u0002\u0002\u04ed\u04ee\u0005\u008cG\u0002\u04eeu\u0003",
    "\u0002\u0002\u0002\u04ef\u04f1\t\t\u0002\u0002\u04f0\u04ef\u0003\u0002",
    "\u0002\u0002\u04f0\u04f1\u0003\u0002\u0002\u0002\u04f1\u04f2\u0003\u0002",
    "\u0002\u0002\u04f2\u04f3\u0007\u000b\u0002\u0002\u04f3\u04f4\u0007[",
    "\u0002\u0002\u04f4\u04f5\u0005\u00bc_\u0002\u04f5w\u0003\u0002\u0002",
    "\u0002\u04f6\u04f7\u0007\u00bd\u0002\u0002\u04f7\u04f8\u0005\u00e6t",
    "\u0002\u04f8\u04f9\u0007\f\u0002\u0002\u04f9\u04fa\u0007\u00d8\u0002",
    "\u0002\u04fa\u04fb\u0005\u00a2R\u0002\u04fb\u04fc\u0007\u00e2\u0002",
    "\u0002\u04fcy\u0003\u0002\u0002\u0002\u04fd\u04fe\u0007\u0082\u0002",
    "\u0002\u04fe\u04ff\u0005\u00c0a\u0002\u04ff{\u0003\u0002\u0002\u0002",
    "\u0500\u0501\u0007\u00bc\u0002\u0002\u0501\u0502\u0005\u00c0a\u0002",
    "\u0502}\u0003\u0002\u0002\u0002\u0503\u0504\u0007J\u0002\u0002\u0504",
    "\u050b\u0007\u0014\u0002\u0002\u0505\u0506\t\b\u0002\u0002\u0506\u0507",
    "\u0007\u00d8\u0002\u0002\u0507\u0508\u0005\u00bc_\u0002\u0508\u0509",
    "\u0007\u00e2\u0002\u0002\u0509\u050c\u0003\u0002\u0002\u0002\u050a\u050c",
    "\u0005\u00bc_\u0002\u050b\u0505\u0003\u0002\u0002\u0002\u050b\u050a",
    "\u0003\u0002\u0002\u0002\u050c\u007f\u0003\u0002\u0002\u0002\u050d\u050e",
    "\u0007K\u0002\u0002\u050e\u050f\u0005\u00c0a\u0002\u050f\u0081\u0003",
    "\u0002\u0002\u0002\u0510\u0511\u0007{\u0002\u0002\u0511\u0512\u0007",
    "\u0014\u0002\u0002\u0512\u0513\u0005\u0098M\u0002\u0513\u0083\u0003",
    "\u0002\u0002\u0002\u0514\u0515\u0007{\u0002\u0002\u0515\u0516\u0007",
    "\u0014\u0002\u0002\u0516\u0517\u0005\u00bc_\u0002\u0517\u0085\u0003",
    "\u0002\u0002\u0002\u0518\u0519\u0007d\u0002\u0002\u0519\u051a\u0005",
    "\u0096L\u0002\u051a\u051b\u0007\u0014\u0002\u0002\u051b\u051c\u0005",
    "\u00bc_\u0002\u051c\u0087\u0003\u0002\u0002\u0002\u051d\u051e\u0007",
    "d\u0002\u0002\u051e\u0521\u0005\u0096L\u0002\u051f\u0520\u0007\u00be",
    "\u0002\u0002\u0520\u0522\u0007\u00a5\u0002\u0002\u0521\u051f\u0003\u0002",
    "\u0002\u0002\u0521\u0522\u0003\u0002\u0002\u0002\u0522\u0089\u0003\u0002",
    "\u0002\u0002\u0523\u0524\u0007\u0097\u0002\u0002\u0524\u0525\u0005\u009e",
    "P\u0002\u0525\u008b\u0003\u0002\u0002\u0002\u0526\u0527\bG\u0001\u0002",
    "\u0527\u0529\u0005\u00ccg\u0002\u0528\u052a\u0007>\u0002\u0002\u0529",
    "\u0528\u0003\u0002\u0002\u0002\u0529\u052a\u0003\u0002\u0002\u0002\u052a",
    "\u052c\u0003\u0002\u0002\u0002\u052b\u052d\u0005\u0094K\u0002\u052c",
    "\u052b\u0003\u0002\u0002\u0002\u052c\u052d\u0003\u0002\u0002\u0002\u052d",
    "\u0533\u0003\u0002\u0002\u0002\u052e\u052f\u0007\u00d8\u0002\u0002\u052f",
    "\u0530\u0005\u008cG\u0002\u0530\u0531\u0007\u00e2\u0002\u0002\u0531",
    "\u0533\u0003\u0002\u0002\u0002\u0532\u0526\u0003\u0002\u0002\u0002\u0532",
    "\u052e\u0003\u0002\u0002\u0002\u0533\u0545\u0003\u0002\u0002\u0002\u0534",
    "\u0535\f\u0005\u0002\u0002\u0535\u0536\u0005\u0090I\u0002\u0536\u0537",
    "\u0005\u008cG\u0006\u0537\u0544\u0003\u0002\u0002\u0002\u0538\u053a",
    "\f\u0006\u0002\u0002\u0539\u053b\t\n\u0002\u0002\u053a\u0539\u0003\u0002",
    "\u0002\u0002\u053a\u053b\u0003\u0002\u0002\u0002\u053b\u053d\u0003\u0002",
    "\u0002\u0002\u053c\u053e\u0005\u008eH\u0002\u053d\u053c\u0003\u0002",
    "\u0002\u0002\u053d\u053e\u0003\u0002\u0002\u0002\u053e\u053f\u0003\u0002",
    "\u0002\u0002\u053f\u0540\u0007[\u0002\u0002\u0540\u0541\u0005\u008c",
    "G\u0002\u0541\u0542\u0005\u0092J\u0002\u0542\u0544\u0003\u0002\u0002",
    "\u0002\u0543\u0534\u0003\u0002\u0002\u0002\u0543\u0538\u0003\u0002\u0002",
    "\u0002\u0544\u0547\u0003\u0002\u0002\u0002\u0545\u0543\u0003\u0002\u0002",
    "\u0002\u0545\u0546\u0003\u0002\u0002\u0002\u0546\u008d\u0003\u0002\u0002",
    "\u0002\u0547\u0545\u0003\u0002\u0002\u0002\u0548\u054a\t\u000b\u0002",
    "\u0002\u0549\u0548\u0003\u0002\u0002\u0002\u0549\u054a\u0003\u0002\u0002",
    "\u0002\u054a\u054b\u0003\u0002\u0002\u0002\u054b\u0552\u0007U\u0002",
    "\u0002\u054c\u054e\u0007U\u0002\u0002\u054d\u054f\t\u000b\u0002\u0002",
    "\u054e\u054d\u0003\u0002\u0002\u0002\u054e\u054f\u0003\u0002\u0002\u0002",
    "\u054f\u0552\u0003\u0002\u0002\u0002\u0550\u0552\t\u000b\u0002\u0002",
    "\u0551\u0549\u0003\u0002\u0002\u0002\u0551\u054c\u0003\u0002\u0002\u0002",
    "\u0551\u0550\u0003\u0002\u0002\u0002\u0552\u0574\u0003\u0002\u0002\u0002",
    "\u0553\u0555\t\f\u0002\u0002\u0554\u0553\u0003\u0002\u0002\u0002\u0554",
    "\u0555\u0003\u0002\u0002\u0002\u0555\u0556\u0003\u0002\u0002\u0002\u0556",
    "\u0558\t\r\u0002\u0002\u0557\u0559\u0007|\u0002\u0002\u0558\u0557\u0003",
    "\u0002\u0002\u0002\u0558\u0559\u0003\u0002\u0002\u0002\u0559\u0562\u0003",
    "\u0002\u0002\u0002\u055a\u055c\t\r\u0002\u0002\u055b\u055d\u0007|\u0002",
    "\u0002\u055c\u055b\u0003\u0002\u0002\u0002\u055c\u055d\u0003\u0002\u0002",
    "\u0002\u055d\u055f\u0003\u0002\u0002\u0002\u055e\u0560\t\f\u0002\u0002",
    "\u055f\u055e\u0003\u0002\u0002\u0002\u055f\u0560\u0003\u0002\u0002\u0002",
    "\u0560\u0562\u0003\u0002\u0002\u0002\u0561\u0554\u0003\u0002\u0002\u0002",
    "\u0561\u055a\u0003\u0002\u0002\u0002\u0562\u0574\u0003\u0002\u0002\u0002",
    "\u0563\u0565\t\u000e\u0002\u0002\u0564\u0563\u0003\u0002\u0002\u0002",
    "\u0564\u0565\u0003\u0002\u0002\u0002\u0565\u0566\u0003\u0002\u0002\u0002",
    "\u0566\u0568\u0007F\u0002\u0002\u0567\u0569\u0007|\u0002\u0002\u0568",
    "\u0567\u0003\u0002\u0002\u0002\u0568\u0569\u0003\u0002\u0002\u0002\u0569",
    "\u0572\u0003\u0002\u0002\u0002\u056a\u056c\u0007F\u0002\u0002\u056b",
    "\u056d\u0007|\u0002\u0002\u056c\u056b\u0003\u0002\u0002\u0002\u056c",
    "\u056d\u0003\u0002\u0002\u0002\u056d\u056f\u0003\u0002\u0002\u0002\u056e",
    "\u0570\t\u000e\u0002\u0002\u056f\u056e\u0003\u0002\u0002\u0002\u056f",
    "\u0570\u0003\u0002\u0002\u0002\u0570\u0572\u0003\u0002\u0002\u0002\u0571",
    "\u0564\u0003\u0002\u0002\u0002\u0571\u056a\u0003\u0002\u0002\u0002\u0572",
    "\u0574\u0003\u0002\u0002\u0002\u0573\u0551\u0003\u0002\u0002\u0002\u0573",
    "\u0561\u0003\u0002\u0002\u0002\u0573\u0571\u0003\u0002\u0002\u0002\u0574",
    "\u008f\u0003\u0002\u0002\u0002\u0575\u0577\t\n\u0002\u0002\u0576\u0575",
    "\u0003\u0002\u0002\u0002\u0576\u0577\u0003\u0002\u0002\u0002\u0577\u0578",
    "\u0003\u0002\u0002\u0002\u0578\u0579\u0007 \u0002\u0002\u0579\u057c",
    "\u0007[\u0002\u0002\u057a\u057c\u0007\u00cd\u0002\u0002\u057b\u0576",
    "\u0003\u0002\u0002\u0002\u057b\u057a\u0003\u0002\u0002\u0002\u057c\u0091",
    "\u0003\u0002\u0002\u0002\u057d\u057e\u0007x\u0002\u0002\u057e\u0587",
    "\u0005\u00bc_\u0002\u057f\u0580\u0007\u00b4\u0002\u0002\u0580\u0581",
    "\u0007\u00d8\u0002\u0002\u0581\u0582\u0005\u00bc_\u0002\u0582\u0583",
    "\u0007\u00e2\u0002\u0002\u0583\u0587\u0003\u0002\u0002\u0002\u0584\u0585",
    "\u0007\u00b4\u0002\u0002\u0585\u0587\u0005\u00bc_\u0002\u0586\u057d",
    "\u0003\u0002\u0002\u0002\u0586\u057f\u0003\u0002\u0002\u0002\u0586\u0584",
    "\u0003\u0002\u0002\u0002\u0587\u0093\u0003\u0002\u0002\u0002\u0588\u0589",
    "\u0007\u0091\u0002\u0002\u0589\u058c\u0005\u009cO\u0002\u058a\u058b",
    "\u0007w\u0002\u0002\u058b\u058d\u0005\u009cO\u0002\u058c\u058a\u0003",
    "\u0002\u0002\u0002\u058c\u058d\u0003\u0002\u0002\u0002\u058d\u0095\u0003",
    "\u0002\u0002\u0002\u058e\u0591\u0005\u00c0a\u0002\u058f\u0590\t\u000f",
    "\u0002\u0002\u0590\u0592\u0005\u00c0a\u0002\u0591\u058f\u0003\u0002",
    "\u0002\u0002\u0591\u0592\u0003\u0002\u0002\u0002\u0592\u0097\u0003\u0002",
    "\u0002\u0002\u0593\u0598\u0005\u009aN\u0002\u0594\u0595\u0007\u00cd",
    "\u0002\u0002\u0595\u0597\u0005\u009aN\u0002\u0596\u0594\u0003\u0002",
    "\u0002\u0002\u0597\u059a\u0003\u0002\u0002\u0002\u0598\u0596\u0003\u0002",
    "\u0002\u0002\u0598\u0599\u0003\u0002\u0002\u0002\u0599\u0099\u0003\u0002",
    "\u0002\u0002\u059a\u0598\u0003\u0002\u0002\u0002\u059b\u059d\u0005\u00c0",
    "a\u0002\u059c\u059e\t\u0010\u0002\u0002\u059d\u059c\u0003\u0002\u0002",
    "\u0002\u059d\u059e\u0003\u0002\u0002\u0002\u059e\u05a1\u0003\u0002\u0002",
    "\u0002\u059f\u05a0\u0007v\u0002\u0002\u05a0\u05a2\t\u0011\u0002\u0002",
    "\u05a1\u059f\u0003\u0002\u0002\u0002\u05a1\u05a2\u0003\u0002\u0002\u0002",
    "\u05a2\u05a5\u0003\u0002\u0002\u0002\u05a3\u05a4\u0007\u001b\u0002\u0002",
    "\u05a4\u05a6\u0007\u00c7\u0002\u0002\u05a5\u05a3\u0003\u0002\u0002\u0002",
    "\u05a5\u05a6\u0003\u0002\u0002\u0002\u05a6\u009b\u0003\u0002\u0002\u0002",
    "\u05a7\u05aa\u0005\u00dan\u0002\u05a8\u05a9\u0007\u00e4\u0002\u0002",
    "\u05a9\u05ab\u0005\u00dan\u0002\u05aa\u05a8\u0003\u0002\u0002\u0002",
    "\u05aa\u05ab\u0003\u0002\u0002\u0002\u05ab\u009d\u0003\u0002\u0002\u0002",
    "\u05ac\u05b1\u0005\u00a0Q\u0002\u05ad\u05ae\u0007\u00cd\u0002\u0002",
    "\u05ae\u05b0\u0005\u00a0Q\u0002\u05af\u05ad\u0003\u0002\u0002\u0002",
    "\u05b0\u05b3\u0003\u0002\u0002\u0002\u05b1\u05af\u0003\u0002\u0002\u0002",
    "\u05b1\u05b2\u0003\u0002\u0002\u0002\u05b2\u009f\u0003\u0002\u0002\u0002",
    "\u05b3\u05b1\u0003\u0002\u0002\u0002\u05b4\u05b5\u0005\u00e6t\u0002",
    "\u05b5\u05b6\u0007\u00d2\u0002\u0002\u05b6\u05b7\u0005\u00dco\u0002",
    "\u05b7\u00a1\u0003\u0002\u0002\u0002\u05b8\u05ba\u0005\u00a4S\u0002",
    "\u05b9\u05b8\u0003\u0002\u0002\u0002\u05b9\u05ba\u0003\u0002\u0002\u0002",
    "\u05ba\u05bc\u0003\u0002\u0002\u0002\u05bb\u05bd\u0005\u00a6T\u0002",
    "\u05bc\u05bb\u0003\u0002\u0002\u0002\u05bc\u05bd\u0003\u0002\u0002\u0002",
    "\u05bd\u05bf\u0003\u0002\u0002\u0002\u05be\u05c0\u0005\u00a8U\u0002",
    "\u05bf\u05be\u0003\u0002\u0002\u0002\u05bf\u05c0\u0003\u0002\u0002\u0002",
    "\u05c0\u00a3\u0003\u0002\u0002\u0002\u05c1\u05c2\u0007\u007f\u0002\u0002",
    "\u05c2\u05c3\u0007\u0014\u0002\u0002\u05c3\u05c4\u0005\u00bc_\u0002",
    "\u05c4\u00a5\u0003\u0002\u0002\u0002\u05c5\u05c6\u0007{\u0002\u0002",
    "\u05c6\u05c7\u0007\u0014\u0002\u0002\u05c7\u05c8\u0005\u0098M\u0002",
    "\u05c8\u00a7\u0003\u0002\u0002\u0002\u05c9\u05ca\t\u0012\u0002\u0002",
    "\u05ca\u05cb\u0005\u00aaV\u0002\u05cb\u00a9\u0003\u0002\u0002\u0002",
    "\u05cc\u05d3\u0005\u00acW\u0002\u05cd\u05ce\u0007\u0012\u0002\u0002",
    "\u05ce\u05cf\u0005\u00acW\u0002\u05cf\u05d0\u0007\b\u0002\u0002\u05d0",
    "\u05d1\u0005\u00acW\u0002\u05d1\u05d3\u0003\u0002\u0002\u0002\u05d2",
    "\u05cc\u0003\u0002\u0002\u0002\u05d2\u05cd\u0003\u0002\u0002\u0002\u05d3",
    "\u00ab\u0003\u0002\u0002\u0002\u05d4\u05d5\u0007\"\u0002\u0002\u05d5",
    "\u05e1\u0007\u008f\u0002\u0002\u05d6\u05d7\u0007\u00b0\u0002\u0002\u05d7",
    "\u05e1\u0007\u0081\u0002\u0002\u05d8\u05d9\u0007\u00b0\u0002\u0002\u05d9",
    "\u05e1\u0007A\u0002\u0002\u05da\u05db\u0005\u00dan\u0002\u05db\u05dc",
    "\u0007\u0081\u0002\u0002\u05dc\u05e1\u0003\u0002\u0002\u0002\u05dd\u05de",
    "\u0005\u00dan\u0002\u05de\u05df\u0007A\u0002\u0002\u05df\u05e1\u0003",
    "\u0002\u0002\u0002\u05e0\u05d4\u0003\u0002\u0002\u0002\u05e0\u05d6\u0003",
    "\u0002\u0002\u0002\u05e0\u05d8\u0003\u0002\u0002\u0002\u05e0\u05da\u0003",
    "\u0002\u0002\u0002\u05e0\u05dd\u0003\u0002\u0002\u0002\u05e1\u00ad\u0003",
    "\u0002\u0002\u0002\u05e2\u05e3\u0007\u0096\u0002\u0002\u05e3\u05e4\u0005",
    "\u009eP\u0002\u05e4\u00af\u0003\u0002\u0002\u0002\u05e5\u05e6\u0007",
    "\u0098\u0002\u0002\u05e6\u05e7\u0007\u001f\u0002\u0002\u05e7\u05e8\u0007",
    "#\u0002\u0002\u05e8\u0610\u0005\u00d6l\u0002\u05e9\u05ea\u0007\u0098",
    "\u0002\u0002\u05ea\u05eb\u0007\u001f\u0002\u0002\u05eb\u05ec\u00070",
    "\u0002\u0002\u05ec\u0610\u0005\u00d0i\u0002\u05ed\u05ee\u0007\u0098",
    "\u0002\u0002\u05ee\u05f0\u0007\u001f\u0002\u0002\u05ef\u05f1\u0007\u00a2",
    "\u0002\u0002\u05f0\u05ef\u0003\u0002\u0002\u0002\u05f0\u05f1\u0003\u0002",
    "\u0002\u0002\u05f1\u05f3\u0003\u0002\u0002\u0002\u05f2\u05f4\u0007\u00a0",
    "\u0002\u0002\u05f3\u05f2\u0003\u0002\u0002\u0002\u05f3\u05f4\u0003\u0002",
    "\u0002\u0002\u05f4\u05f5\u0003\u0002\u0002\u0002\u05f5\u0610\u0005\u00d0",
    "i\u0002\u05f6\u05f7\u0007\u0098\u0002\u0002\u05f7\u0610\u0007$\u0002",
    "\u0002\u05f8\u05f9\u0007\u0098\u0002\u0002\u05f9\u05fc\u0007/\u0002",
    "\u0002\u05fa\u05fb\u0007E\u0002\u0002\u05fb\u05fd\u0005\u00d6l\u0002",
    "\u05fc\u05fa\u0003\u0002\u0002\u0002\u05fc\u05fd\u0003\u0002\u0002\u0002",
    "\u05fd\u0610\u0003\u0002\u0002\u0002\u05fe\u0600\u0007\u0098\u0002\u0002",
    "\u05ff\u0601\u0007\u00a2\u0002\u0002\u0600\u05ff\u0003\u0002\u0002\u0002",
    "\u0600\u0601\u0003\u0002\u0002\u0002\u0601\u0602\u0003\u0002\u0002\u0002",
    "\u0602\u0605\u0007\u00a1\u0002\u0002\u0603\u0604\t\u0013\u0002\u0002",
    "\u0604\u0606\u0005\u00d6l\u0002\u0605\u0603\u0003\u0002\u0002\u0002",
    "\u0605\u0606\u0003\u0002\u0002\u0002\u0606\u060a\u0003\u0002\u0002\u0002",
    "\u0607\u0608\u0007c\u0002\u0002\u0608\u060b\u0007\u00c7\u0002\u0002",
    "\u0609\u060b\u0005|?\u0002\u060a\u0607\u0003\u0002\u0002\u0002\u060a",
    "\u0609\u0003\u0002\u0002\u0002\u060a\u060b\u0003\u0002\u0002\u0002\u060b",
    "\u060d\u0003\u0002\u0002\u0002\u060c\u060e\u0005\u0088E\u0002\u060d",
    "\u060c\u0003\u0002\u0002\u0002\u060d\u060e\u0003\u0002\u0002\u0002\u060e",
    "\u0610\u0003\u0002\u0002\u0002\u060f\u05e5\u0003\u0002\u0002\u0002\u060f",
    "\u05e9\u0003\u0002\u0002\u0002\u060f\u05ed\u0003\u0002\u0002\u0002\u060f",
    "\u05f6\u0003\u0002\u0002\u0002\u060f\u05f8\u0003\u0002\u0002\u0002\u060f",
    "\u05fe\u0003\u0002\u0002\u0002\u0610\u00b1\u0003\u0002\u0002\u0002\u0611",
    "\u0612\u0007\u009f\u0002\u0002\u0612\u0613\u0007@\u0002\u0002\u0613",
    "\u0614\u00073\u0002\u0002\u0614\u0634\u0005\u00d0i\u0002\u0615\u0616",
    "\u0007\u009f\u0002\u0002\u0616\u0617\u0007@\u0002\u0002\u0617\u0634",
    "\u0007g\u0002\u0002\u0618\u0619\u0007\u009f\u0002\u0002\u0619\u061a",
    "\u0007\u0087\u0002\u0002\u061a\u0634\u0007/\u0002\u0002\u061b\u061c",
    "\u0007\u009f\u0002\u0002\u061c\u061d\u0007\u0087\u0002\u0002\u061d\u061e",
    "\u00070\u0002\u0002\u061e\u0634\u0005\u00d0i\u0002\u061f\u0620\u0007",
    "\u009f\u0002\u0002\u0620\u0628\t\u0014\u0002\u0002\u0621\u0622\u0007",
    "3\u0002\u0002\u0622\u0629\u0007\u0095\u0002\u0002\u0623\u0629\u0007",
    "=\u0002\u0002\u0624\u0626\u0007\u00ae\u0002\u0002\u0625\u0624\u0003",
    "\u0002\u0002\u0002\u0625\u0626\u0003\u0002\u0002\u0002\u0626\u0627\u0003",
    "\u0002\u0002\u0002\u0627\u0629\u0007k\u0002\u0002\u0628\u0621\u0003",
    "\u0002\u0002\u0002\u0628\u0623\u0003\u0002\u0002\u0002\u0628\u0625\u0003",
    "\u0002\u0002\u0002\u0629\u062a\u0003\u0002\u0002\u0002\u062a\u0634\u0005",
    "\u00d0i\u0002\u062b\u062c\u0007\u009f\u0002\u0002\u062c\u062d\t\u0014",
    "\u0002\u0002\u062d\u062e\u0007\u008c\u0002\u0002\u062e\u0634\u0007\u0095",
    "\u0002\u0002\u062f\u0630\u0007\u009f\u0002\u0002\u0630\u0631\u0007\u009d",
    "\u0002\u0002\u0631\u0632\u0007\u008b\u0002\u0002\u0632\u0634\u0005\u00d0",
    "i\u0002\u0633\u0611\u0003\u0002\u0002\u0002\u0633\u0615\u0003\u0002",
    "\u0002\u0002\u0633\u0618\u0003\u0002\u0002\u0002\u0633\u061b\u0003\u0002",
    "\u0002\u0002\u0633\u061f\u0003\u0002\u0002\u0002\u0633\u062b\u0003\u0002",
    "\u0002\u0002\u0633\u062f\u0003\u0002\u0002\u0002\u0634\u00b3\u0003\u0002",
    "\u0002\u0002\u0635\u0637\u0007\u00ad\u0002\u0002\u0636\u0638\u0007\u00a2",
    "\u0002\u0002\u0637\u0636\u0003\u0002\u0002\u0002\u0637\u0638\u0003\u0002",
    "\u0002\u0002\u0638\u063a\u0003\u0002\u0002\u0002\u0639\u063b\u0007\u00a0",
    "\u0002\u0002\u063a\u0639\u0003\u0002\u0002\u0002\u063a\u063b\u0003\u0002",
    "\u0002\u0002\u063b\u063e\u0003\u0002\u0002\u0002\u063c\u063d\u0007O",
    "\u0002\u0002\u063d\u063f\u00079\u0002\u0002\u063e\u063c\u0003\u0002",
    "\u0002\u0002\u063e\u063f\u0003\u0002\u0002\u0002\u063f\u0640\u0003\u0002",
    "\u0002\u0002\u0640\u0642\u0005\u00d0i\u0002\u0641\u0643\u0005.\u0018",
    "\u0002\u0642\u0641\u0003\u0002\u0002\u0002\u0642\u0643\u0003\u0002\u0002",
    "\u0002\u0643\u00b5\u0003\u0002\u0002\u0002\u0644\u0645\u0007\u00b3\u0002",
    "\u0002\u0645\u0646\u0005\u00d6l\u0002\u0646\u00b7\u0003\u0002\u0002",
    "\u0002\u0647\u0648\u0007\u00b9\u0002\u0002\u0648\u064a\u0005\u00d0i",
    "\u0002\u0649\u064b\u00078\u0002\u0002\u064a\u0649\u0003\u0002\u0002",
    "\u0002\u064a\u064b\u0003\u0002\u0002\u0002\u064b\u064e\u0003\u0002\u0002",
    "\u0002\u064c\u064d\u0007d\u0002\u0002\u064d\u064f\u0007\u00c5\u0002",
    "\u0002\u064e\u064c\u0003\u0002\u0002\u0002\u064e\u064f\u0003\u0002\u0002",
    "\u0002\u064f\u00b9\u0003\u0002\u0002\u0002\u0650\u0680\u0005\u00e6t",
    "\u0002\u0651\u0652\u0005\u00e6t\u0002\u0652\u0653\u0007\u00d8\u0002",
    "\u0002\u0653\u0654\u0005\u00e6t\u0002\u0654\u065b\u0005\u00ba^\u0002",
    "\u0655\u0656\u0007\u00cd\u0002\u0002\u0656\u0657\u0005\u00e6t\u0002",
    "\u0657\u0658\u0005\u00ba^\u0002\u0658\u065a\u0003\u0002\u0002\u0002",
    "\u0659\u0655\u0003\u0002\u0002\u0002\u065a\u065d\u0003\u0002\u0002\u0002",
    "\u065b\u0659\u0003\u0002\u0002\u0002\u065b\u065c\u0003\u0002\u0002\u0002",
    "\u065c\u065e\u0003\u0002\u0002\u0002\u065d\u065b\u0003\u0002\u0002\u0002",
    "\u065e\u065f\u0007\u00e2\u0002\u0002\u065f\u0680\u0003\u0002\u0002\u0002",
    "\u0660\u0661\u0005\u00e6t\u0002\u0661\u0662\u0007\u00d8\u0002\u0002",
    "\u0662\u0667\u0005\u00eav\u0002\u0663\u0664\u0007\u00cd\u0002\u0002",
    "\u0664\u0666\u0005\u00eav\u0002\u0665\u0663\u0003\u0002\u0002\u0002",
    "\u0666\u0669\u0003\u0002\u0002\u0002\u0667\u0665\u0003\u0002\u0002\u0002",
    "\u0667\u0668\u0003\u0002\u0002\u0002\u0668\u066a\u0003\u0002\u0002\u0002",
    "\u0669\u0667\u0003\u0002\u0002\u0002\u066a\u066b\u0007\u00e2\u0002\u0002",
    "\u066b\u0680\u0003\u0002\u0002\u0002\u066c\u066d\u0005\u00e6t\u0002",
    "\u066d\u066e\u0007\u00d8\u0002\u0002\u066e\u0673\u0005\u00ba^\u0002",
    "\u066f\u0670\u0007\u00cd\u0002\u0002\u0670\u0672\u0005\u00ba^\u0002",
    "\u0671\u066f\u0003\u0002\u0002\u0002\u0672\u0675\u0003\u0002\u0002\u0002",
    "\u0673\u0671\u0003\u0002\u0002\u0002\u0673\u0674\u0003\u0002\u0002\u0002",
    "\u0674\u0676\u0003\u0002\u0002\u0002\u0675\u0673\u0003\u0002\u0002\u0002",
    "\u0676\u0677\u0007\u00e2\u0002\u0002\u0677\u0680\u0003\u0002\u0002\u0002",
    "\u0678\u0679\u0005\u00e6t\u0002\u0679\u067b\u0007\u00d8\u0002\u0002",
    "\u067a\u067c\u0005\u00bc_\u0002\u067b\u067a\u0003\u0002\u0002\u0002",
    "\u067b\u067c\u0003\u0002\u0002\u0002\u067c\u067d\u0003\u0002\u0002\u0002",
    "\u067d\u067e\u0007\u00e2\u0002\u0002\u067e\u0680\u0003\u0002\u0002\u0002",
    "\u067f\u0650\u0003\u0002\u0002\u0002\u067f\u0651\u0003\u0002\u0002\u0002",
    "\u067f\u0660\u0003\u0002\u0002\u0002\u067f\u066c\u0003\u0002\u0002\u0002",
    "\u067f\u0678\u0003\u0002\u0002\u0002\u0680\u00bb\u0003\u0002\u0002\u0002",
    "\u0681\u0686\u0005\u00be`\u0002\u0682\u0683\u0007\u00cd\u0002\u0002",
    "\u0683\u0685\u0005\u00be`\u0002\u0684\u0682\u0003\u0002\u0002\u0002",
    "\u0685\u0688\u0003\u0002\u0002\u0002\u0686\u0684\u0003\u0002\u0002\u0002",
    "\u0686\u0687\u0003\u0002\u0002\u0002\u0687\u00bd\u0003\u0002\u0002\u0002",
    "\u0688\u0686\u0003\u0002\u0002\u0002\u0689\u068a\u0005\u00d0i\u0002",
    "\u068a\u068b\u0007\u00d0\u0002\u0002\u068b\u068d\u0003\u0002\u0002\u0002",
    "\u068c\u0689\u0003\u0002\u0002\u0002\u068c\u068d\u0003\u0002\u0002\u0002",
    "\u068d\u068e\u0003\u0002\u0002\u0002\u068e\u0695\u0007\u00c9\u0002\u0002",
    "\u068f\u0690\u0007\u00d8\u0002\u0002\u0690\u0691\u0005j6\u0002\u0691",
    "\u0692\u0007\u00e2\u0002\u0002\u0692\u0695\u0003\u0002\u0002\u0002\u0693",
    "\u0695\u0005\u00c0a\u0002\u0694\u068c\u0003\u0002\u0002\u0002\u0694",
    "\u068f\u0003\u0002\u0002\u0002\u0694\u0693\u0003\u0002\u0002\u0002\u0695",
    "\u00bf\u0003\u0002\u0002\u0002\u0696\u0697\ba\u0001\u0002\u0697\u0699",
    "\u0007\u0015\u0002\u0002\u0698\u069a\u0005\u00c0a\u0002\u0699\u0698",
    "\u0003\u0002\u0002\u0002\u0699\u069a\u0003\u0002\u0002\u0002\u069a\u06a0",
    "\u0003\u0002\u0002\u0002\u069b\u069c\u0007\u00bb\u0002\u0002\u069c\u069d",
    "\u0005\u00c0a\u0002\u069d\u069e\u0007\u00a4\u0002\u0002\u069e\u069f",
    "\u0005\u00c0a\u0002\u069f\u06a1\u0003\u0002\u0002\u0002\u06a0\u069b",
    "\u0003\u0002\u0002\u0002\u06a1\u06a2\u0003\u0002\u0002\u0002\u06a2\u06a0",
    "\u0003\u0002\u0002\u0002\u06a2\u06a3\u0003\u0002\u0002\u0002\u06a3\u06a6",
    "\u0003\u0002\u0002\u0002\u06a4\u06a5\u00075\u0002\u0002\u06a5\u06a7",
    "\u0005\u00c0a\u0002\u06a6\u06a4\u0003\u0002\u0002\u0002\u06a6\u06a7",
    "\u0003\u0002\u0002\u0002\u06a7\u06a8\u0003\u0002\u0002\u0002\u06a8\u06a9",
    "\u00076\u0002\u0002\u06a9\u0718\u0003\u0002\u0002\u0002\u06aa\u06ab",
    "\u0007\u0016\u0002\u0002\u06ab\u06ac\u0007\u00d8\u0002\u0002\u06ac\u06ad",
    "\u0005\u00c0a\u0002\u06ad\u06ae\u0007\f\u0002\u0002\u06ae\u06af\u0005",
    "\u00ba^\u0002\u06af\u06b0\u0007\u00e2\u0002\u0002\u06b0\u0718\u0003",
    "\u0002\u0002\u0002\u06b1\u06b2\u0007%\u0002\u0002\u06b2\u0718\u0007",
    "\u00c7\u0002\u0002\u06b3\u06b4\u0007<\u0002\u0002\u06b4\u06b5\u0007",
    "\u00d8\u0002\u0002\u06b5\u06b6\u0005\u00dep\u0002\u06b6\u06b7\u0007",
    "E\u0002\u0002\u06b7\u06b8\u0005\u00c0a\u0002\u06b8\u06b9\u0007\u00e2",
    "\u0002\u0002\u06b9\u0718\u0003\u0002\u0002\u0002\u06ba\u06bb\u0007W",
    "\u0002\u0002\u06bb\u06bc\u0005\u00c0a\u0002\u06bc\u06bd\u0005\u00de",
    "p\u0002\u06bd\u0718\u0003\u0002\u0002\u0002\u06be\u06bf\u0007\u009c",
    "\u0002\u0002\u06bf\u06c0\u0007\u00d8\u0002\u0002\u06c0\u06c1\u0005\u00c0",
    "a\u0002\u06c1\u06c2\u0007E\u0002\u0002\u06c2\u06c5\u0005\u00c0a\u0002",
    "\u06c3\u06c4\u0007B\u0002\u0002\u06c4\u06c6\u0005\u00c0a\u0002\u06c5",
    "\u06c3\u0003\u0002\u0002\u0002\u06c5\u06c6\u0003\u0002\u0002\u0002\u06c6",
    "\u06c7\u0003\u0002\u0002\u0002\u06c7\u06c8\u0007\u00e2\u0002\u0002\u06c8",
    "\u0718\u0003\u0002\u0002\u0002\u06c9\u06ca\u0007\u00a7\u0002\u0002\u06ca",
    "\u0718\u0007\u00c7\u0002\u0002\u06cb\u06cc\u0007\u00ac\u0002\u0002\u06cc",
    "\u06cd\u0007\u00d8\u0002\u0002\u06cd\u06ce\t\u0015\u0002\u0002\u06ce",
    "\u06cf\u0007\u00c7\u0002\u0002\u06cf\u06d0\u0007E\u0002\u0002\u06d0",
    "\u06d1\u0005\u00c0a\u0002\u06d1\u06d2\u0007\u00e2\u0002\u0002\u06d2",
    "\u0718\u0003\u0002\u0002\u0002\u06d3\u06d4\u0005\u00e6t\u0002\u06d4",
    "\u06d6\u0007\u00d8\u0002\u0002\u06d5\u06d7\u0005\u00bc_\u0002\u06d6",
    "\u06d5\u0003\u0002\u0002\u0002\u06d6\u06d7\u0003\u0002\u0002\u0002\u06d7",
    "\u06d8\u0003\u0002\u0002\u0002\u06d8\u06d9\u0007\u00e2\u0002\u0002\u06d9",
    "\u06da\u0003\u0002\u0002\u0002\u06da\u06db\u0007~\u0002\u0002\u06db",
    "\u06dc\u0007\u00d8\u0002\u0002\u06dc\u06dd\u0005\u00a2R\u0002\u06dd",
    "\u06de\u0007\u00e2\u0002\u0002\u06de\u0718\u0003\u0002\u0002\u0002\u06df",
    "\u06e0\u0005\u00e6t\u0002\u06e0\u06e2\u0007\u00d8\u0002\u0002\u06e1",
    "\u06e3\u0005\u00bc_\u0002\u06e2\u06e1\u0003\u0002\u0002\u0002\u06e2",
    "\u06e3\u0003\u0002\u0002\u0002\u06e3\u06e4\u0003\u0002\u0002\u0002\u06e4",
    "\u06e5\u0007\u00e2\u0002\u0002\u06e5\u06e6\u0003\u0002\u0002\u0002\u06e6",
    "\u06e7\u0007~\u0002\u0002\u06e7\u06e8\u0005\u00e6t\u0002\u06e8\u0718",
    "\u0003\u0002\u0002\u0002\u06e9\u06ef\u0005\u00e6t\u0002\u06ea\u06ec",
    "\u0007\u00d8\u0002\u0002\u06eb\u06ed\u0005\u00bc_\u0002\u06ec\u06eb",
    "\u0003\u0002\u0002\u0002\u06ec\u06ed\u0003\u0002\u0002\u0002\u06ed\u06ee",
    "\u0003\u0002\u0002\u0002\u06ee\u06f0\u0007\u00e2\u0002\u0002\u06ef\u06ea",
    "\u0003\u0002\u0002\u0002\u06ef\u06f0\u0003\u0002\u0002\u0002\u06f0\u06f1",
    "\u0003\u0002\u0002\u0002\u06f1\u06f3\u0007\u00d8\u0002\u0002\u06f2\u06f4",
    "\u00072\u0002\u0002\u06f3\u06f2\u0003\u0002\u0002\u0002\u06f3\u06f4",
    "\u0003\u0002\u0002\u0002\u06f4\u06f6\u0003\u0002\u0002\u0002\u06f5\u06f7",
    "\u0005\u00c2b\u0002\u06f6\u06f5\u0003\u0002\u0002\u0002\u06f6\u06f7",
    "\u0003\u0002\u0002\u0002\u06f7\u06f8\u0003\u0002\u0002\u0002\u06f8\u06f9",
    "\u0007\u00e2\u0002\u0002\u06f9\u0718\u0003\u0002\u0002\u0002\u06fa\u0718",
    "\u0005\u00dco\u0002\u06fb\u06fc\u0007\u00cf\u0002\u0002\u06fc\u0718",
    "\u0005\u00c0a\u0013\u06fd\u06fe\u0007t\u0002\u0002\u06fe\u0718\u0005",
    "\u00c0a\u000e\u06ff\u0700\u0005\u00d0i\u0002\u0700\u0701\u0007\u00d0",
    "\u0002\u0002\u0701\u0703\u0003\u0002\u0002\u0002\u0702\u06ff\u0003\u0002",
    "\u0002\u0002\u0702\u0703\u0003\u0002\u0002\u0002\u0703\u0704\u0003\u0002",
    "\u0002\u0002\u0704\u0718\u0007\u00c9\u0002\u0002\u0705\u0706\u0007\u00d8",
    "\u0002\u0002\u0706\u0707\u0005j6\u0002\u0707\u0708\u0007\u00e2\u0002",
    "\u0002\u0708\u0718\u0003\u0002\u0002\u0002\u0709\u070a\u0007\u00d8\u0002",
    "\u0002\u070a\u070b\u0005\u00c0a\u0002\u070b\u070c\u0007\u00e2\u0002",
    "\u0002\u070c\u0718\u0003\u0002\u0002\u0002\u070d\u070e\u0007\u00d8\u0002",
    "\u0002\u070e\u070f\u0005\u00bc_\u0002\u070f\u0710\u0007\u00e2\u0002",
    "\u0002\u0710\u0718\u0003\u0002\u0002\u0002\u0711\u0713\u0007\u00d6\u0002",
    "\u0002\u0712\u0714\u0005\u00bc_\u0002\u0713\u0712\u0003\u0002\u0002",
    "\u0002\u0713\u0714\u0003\u0002\u0002\u0002\u0714\u0715\u0003\u0002\u0002",
    "\u0002\u0715\u0718\u0007\u00e1\u0002\u0002\u0716\u0718\u0005\u00c8e",
    "\u0002\u0717\u0696\u0003\u0002\u0002\u0002\u0717\u06aa\u0003\u0002\u0002",
    "\u0002\u0717\u06b1\u0003\u0002\u0002\u0002\u0717\u06b3\u0003\u0002\u0002",
    "\u0002\u0717\u06ba\u0003\u0002\u0002\u0002\u0717\u06be\u0003\u0002\u0002",
    "\u0002\u0717\u06c9\u0003\u0002\u0002\u0002\u0717\u06cb\u0003\u0002\u0002",
    "\u0002\u0717\u06d3\u0003\u0002\u0002\u0002\u0717\u06df\u0003\u0002\u0002",
    "\u0002\u0717\u06e9\u0003\u0002\u0002\u0002\u0717\u06fa\u0003\u0002\u0002",
    "\u0002\u0717\u06fb\u0003\u0002\u0002\u0002\u0717\u06fd\u0003\u0002\u0002",
    "\u0002\u0717\u0702\u0003\u0002\u0002\u0002\u0717\u0705\u0003\u0002\u0002",
    "\u0002\u0717\u0709\u0003\u0002\u0002\u0002\u0717\u070d\u0003\u0002\u0002",
    "\u0002\u0717\u0711\u0003\u0002\u0002\u0002\u0717\u0716\u0003\u0002\u0002",
    "\u0002\u0718\u0760\u0003\u0002\u0002\u0002\u0719\u071a\f\u0012\u0002",
    "\u0002\u071a\u071b\t\u0016\u0002\u0002\u071b\u075f\u0005\u00c0a\u0013",
    "\u071c\u071d\f\u0011\u0002\u0002\u071d\u071e\t\u0017\u0002\u0002\u071e",
    "\u075f\u0005\u00c0a\u0012\u071f\u0732\f\u0010\u0002\u0002\u0720\u0733",
    "\u0007\u00d1\u0002\u0002\u0721\u0733\u0007\u00d2\u0002\u0002\u0722\u0733",
    "\u0007\u00da\u0002\u0002\u0723\u0733\u0007\u00d7\u0002\u0002\u0724\u0733",
    "\u0007\u00d3\u0002\u0002\u0725\u0733\u0007\u00d9\u0002\u0002\u0726\u0733",
    "\u0007\u00d4\u0002\u0002\u0727\u0729\u0007H\u0002\u0002\u0728\u0727",
    "\u0003\u0002\u0002\u0002\u0728\u0729\u0003\u0002\u0002\u0002\u0729\u072b",
    "\u0003\u0002\u0002\u0002\u072a\u072c\u0007t\u0002\u0002\u072b\u072a",
    "\u0003\u0002\u0002\u0002\u072b\u072c\u0003\u0002\u0002\u0002\u072c\u072d",
    "\u0003\u0002\u0002\u0002\u072d\u0733\u0007Q\u0002\u0002\u072e\u0730",
    "\u0007t\u0002\u0002\u072f\u072e\u0003\u0002\u0002\u0002\u072f\u0730",
    "\u0003\u0002\u0002\u0002\u0730\u0731\u0003\u0002\u0002\u0002\u0731\u0733",
    "\t\u0018\u0002\u0002\u0732\u0720\u0003\u0002\u0002\u0002\u0732\u0721",
    "\u0003\u0002\u0002\u0002\u0732\u0722\u0003\u0002\u0002\u0002\u0732\u0723",
    "\u0003\u0002\u0002\u0002\u0732\u0724\u0003\u0002\u0002\u0002\u0732\u0725",
    "\u0003\u0002\u0002\u0002\u0732\u0726\u0003\u0002\u0002\u0002\u0732\u0728",
    "\u0003\u0002\u0002\u0002\u0732\u072f\u0003\u0002\u0002\u0002\u0733\u0734",
    "\u0003\u0002\u0002\u0002\u0734\u075f\u0005\u00c0a\u0011\u0735\u0736",
    "\f\r\u0002\u0002\u0736\u0737\u0007\b\u0002\u0002\u0737\u075f\u0005\u00c0",
    "a\u000e\u0738\u0739\f\f\u0002\u0002\u0739\u073a\u0007z\u0002\u0002\u073a",
    "\u075f\u0005\u00c0a\r\u073b\u073d\f\u000b\u0002\u0002\u073c\u073e\u0007",
    "t\u0002\u0002\u073d\u073c\u0003\u0002\u0002\u0002\u073d\u073e\u0003",
    "\u0002\u0002\u0002\u073e\u073f\u0003\u0002\u0002\u0002\u073f\u0740\u0007",
    "\u0012\u0002\u0002\u0740\u0741\u0005\u00c0a\u0002\u0741\u0742\u0007",
    "\b\u0002\u0002\u0742\u0743\u0005\u00c0a\f\u0743\u075f\u0003\u0002\u0002",
    "\u0002\u0744\u0745\f\n\u0002\u0002\u0745\u0746\u0007\u00dd\u0002\u0002",
    "\u0746\u0747\u0005\u00c0a\u0002\u0747\u0748\u0007\u00cc\u0002\u0002",
    "\u0748\u0749\u0005\u00c0a\n\u0749\u075f\u0003\u0002\u0002\u0002\u074a",
    "\u074b\f\u0015\u0002\u0002\u074b\u074c\u0007\u00d6\u0002\u0002\u074c",
    "\u074d\u0005\u00c0a\u0002\u074d\u074e\u0007\u00e1\u0002\u0002\u074e",
    "\u075f\u0003\u0002\u0002\u0002\u074f\u0750\f\u0014\u0002\u0002\u0750",
    "\u0751\u0007\u00d0\u0002\u0002\u0751\u075f\u0007\u00c5\u0002\u0002\u0752",
    "\u0753\f\u000f\u0002\u0002\u0753\u0755\u0007Y\u0002\u0002\u0754\u0756",
    "\u0007t\u0002\u0002\u0755\u0754\u0003\u0002\u0002\u0002\u0755\u0756",
    "\u0003\u0002\u0002\u0002\u0756\u0757\u0003\u0002\u0002\u0002\u0757\u075f",
    "\u0007u\u0002\u0002\u0758\u075c\f\t\u0002\u0002\u0759\u075d\u0005\u00e4",
    "s\u0002\u075a\u075b\u0007\f\u0002\u0002\u075b\u075d\u0005\u00e6t\u0002",
    "\u075c\u0759\u0003\u0002\u0002\u0002\u075c\u075a\u0003\u0002\u0002\u0002",
    "\u075d\u075f\u0003\u0002\u0002\u0002\u075e\u0719\u0003\u0002\u0002\u0002",
    "\u075e\u071c\u0003\u0002\u0002\u0002\u075e\u071f\u0003\u0002\u0002\u0002",
    "\u075e\u0735\u0003\u0002\u0002\u0002\u075e\u0738\u0003\u0002\u0002\u0002",
    "\u075e\u073b\u0003\u0002\u0002\u0002\u075e\u0744\u0003\u0002\u0002\u0002",
    "\u075e\u074a\u0003\u0002\u0002\u0002\u075e\u074f\u0003\u0002\u0002\u0002",
    "\u075e\u0752\u0003\u0002\u0002\u0002\u075e\u0758\u0003\u0002\u0002\u0002",
    "\u075f\u0762\u0003\u0002\u0002\u0002\u0760\u075e\u0003\u0002\u0002\u0002",
    "\u0760\u0761\u0003\u0002\u0002\u0002\u0761\u00c1\u0003\u0002\u0002\u0002",
    "\u0762\u0760\u0003\u0002\u0002\u0002\u0763\u0768\u0005\u00c4c\u0002",
    "\u0764\u0765\u0007\u00cd\u0002\u0002\u0765\u0767\u0005\u00c4c\u0002",
    "\u0766\u0764\u0003\u0002\u0002\u0002\u0767\u076a\u0003\u0002\u0002\u0002",
    "\u0768\u0766\u0003\u0002\u0002\u0002\u0768\u0769\u0003\u0002\u0002\u0002",
    "\u0769\u00c3\u0003\u0002\u0002\u0002\u076a\u0768\u0003\u0002\u0002\u0002",
    "\u076b\u076e\u0005\u00c6d\u0002\u076c\u076e\u0005\u00c0a\u0002\u076d",
    "\u076b\u0003\u0002\u0002\u0002\u076d\u076c\u0003\u0002\u0002\u0002\u076e",
    "\u00c5\u0003\u0002\u0002\u0002\u076f\u0770\u0007\u00d8\u0002\u0002\u0770",
    "\u0775\u0005\u00e6t\u0002\u0771\u0772\u0007\u00cd\u0002\u0002\u0772",
    "\u0774\u0005\u00e6t\u0002\u0773\u0771\u0003\u0002\u0002\u0002\u0774",
    "\u0777\u0003\u0002\u0002\u0002\u0775\u0773\u0003\u0002\u0002\u0002\u0775",
    "\u0776\u0003\u0002\u0002\u0002\u0776\u0778\u0003\u0002\u0002\u0002\u0777",
    "\u0775\u0003\u0002\u0002\u0002\u0778\u0779\u0007\u00e2\u0002\u0002\u0779",
    "\u0783\u0003\u0002\u0002\u0002\u077a\u077f\u0005\u00e6t\u0002\u077b",
    "\u077c\u0007\u00cd\u0002\u0002\u077c\u077e\u0005\u00e6t\u0002\u077d",
    "\u077b\u0003\u0002\u0002\u0002\u077e\u0781\u0003\u0002\u0002\u0002\u077f",
    "\u077d\u0003\u0002\u0002\u0002\u077f\u0780\u0003\u0002\u0002\u0002\u0780",
    "\u0783\u0003\u0002\u0002\u0002\u0781\u077f\u0003\u0002\u0002\u0002\u0782",
    "\u076f\u0003\u0002\u0002\u0002\u0782\u077a\u0003\u0002\u0002\u0002\u0783",
    "\u0784\u0003\u0002\u0002\u0002\u0784\u0785\u0007\u00c8\u0002\u0002\u0785",
    "\u0786\u0005\u00c0a\u0002\u0786\u00c7\u0003\u0002\u0002\u0002\u0787",
    "\u0788\u0005\u00d0i\u0002\u0788\u0789\u0007\u00d0\u0002\u0002\u0789",
    "\u078b\u0003\u0002\u0002\u0002\u078a\u0787\u0003\u0002\u0002\u0002\u078a",
    "\u078b\u0003\u0002\u0002\u0002\u078b\u078c\u0003\u0002\u0002\u0002\u078c",
    "\u078d\u0005\u00caf\u0002\u078d\u00c9\u0003\u0002\u0002\u0002\u078e",
    "\u0791\u0005\u00e6t\u0002\u078f\u0790\u0007\u00d0\u0002\u0002\u0790",
    "\u0792\u0005\u00e6t\u0002\u0791\u078f\u0003\u0002\u0002\u0002\u0791",
    "\u0792\u0003\u0002\u0002\u0002\u0792\u00cb\u0003\u0002\u0002\u0002\u0793",
    "\u0794\bg\u0001\u0002\u0794\u079b\u0005\u00d0i\u0002\u0795\u079b\u0005",
    "\u00ceh\u0002\u0796\u0797\u0007\u00d8\u0002\u0002\u0797\u0798\u0005",
    "j6\u0002\u0798\u0799\u0007\u00e2\u0002\u0002\u0799\u079b\u0003\u0002",
    "\u0002\u0002\u079a\u0793\u0003\u0002\u0002\u0002\u079a\u0795\u0003\u0002",
    "\u0002\u0002\u079a\u0796\u0003\u0002\u0002\u0002\u079b\u07a4\u0003\u0002",
    "\u0002\u0002\u079c\u07a0\f\u0003\u0002\u0002\u079d\u07a1\u0005\u00e4",
    "s\u0002\u079e\u079f\u0007\f\u0002\u0002\u079f\u07a1\u0005\u00e6t\u0002",
    "\u07a0\u079d\u0003\u0002\u0002\u0002\u07a0\u079e\u0003\u0002\u0002\u0002",
    "\u07a1\u07a3\u0003\u0002\u0002\u0002\u07a2\u079c\u0003\u0002\u0002\u0002",
    "\u07a3\u07a6\u0003\u0002\u0002\u0002\u07a4\u07a2\u0003\u0002\u0002\u0002",
    "\u07a4\u07a5\u0003\u0002\u0002\u0002\u07a5\u00cd\u0003\u0002\u0002\u0002",
    "\u07a6\u07a4\u0003\u0002\u0002\u0002\u07a7\u07a8\u0005\u00e6t\u0002",
    "\u07a8\u07aa\u0007\u00d8\u0002\u0002\u07a9\u07ab\u0005\u00d2j\u0002",
    "\u07aa\u07a9\u0003\u0002\u0002\u0002\u07aa\u07ab\u0003\u0002\u0002\u0002",
    "\u07ab\u07ac\u0003\u0002\u0002\u0002\u07ac\u07ad\u0007\u00e2\u0002\u0002",
    "\u07ad\u00cf\u0003\u0002\u0002\u0002\u07ae\u07af\u0005\u00d6l\u0002",
    "\u07af\u07b0\u0007\u00d0\u0002\u0002\u07b0\u07b2\u0003\u0002\u0002\u0002",
    "\u07b1\u07ae\u0003\u0002\u0002\u0002\u07b1\u07b2\u0003\u0002\u0002\u0002",
    "\u07b2\u07b3\u0003\u0002\u0002\u0002\u07b3\u07b4\u0005\u00e6t\u0002",
    "\u07b4\u00d1\u0003\u0002\u0002\u0002\u07b5\u07ba\u0005\u00d4k\u0002",
    "\u07b6\u07b7\u0007\u00cd\u0002\u0002\u07b7\u07b9\u0005\u00d4k\u0002",
    "\u07b8\u07b6\u0003\u0002\u0002\u0002\u07b9\u07bc\u0003\u0002\u0002\u0002",
    "\u07ba\u07b8\u0003\u0002\u0002\u0002\u07ba\u07bb\u0003\u0002\u0002\u0002",
    "\u07bb\u00d3\u0003\u0002\u0002\u0002\u07bc\u07ba\u0003\u0002\u0002\u0002",
    "\u07bd\u07c1\u0005\u00caf\u0002\u07be\u07c1\u0005\u00ceh\u0002\u07bf",
    "\u07c1\u0005\u00dco\u0002\u07c0\u07bd\u0003\u0002\u0002\u0002\u07c0",
    "\u07be\u0003\u0002\u0002\u0002\u07c0\u07bf\u0003\u0002\u0002\u0002\u07c1",
    "\u00d5\u0003\u0002\u0002\u0002\u07c2\u07c3\u0005\u00e6t\u0002\u07c3",
    "\u00d7\u0003\u0002\u0002\u0002\u07c4\u07cd\u0007\u00c3\u0002\u0002\u07c5",
    "\u07c6\u0007\u00d0\u0002\u0002\u07c6\u07cd\t\u0019\u0002\u0002\u07c7",
    "\u07c8\u0007\u00c5\u0002\u0002\u07c8\u07ca\u0007\u00d0\u0002\u0002\u07c9",
    "\u07cb\t\u0019\u0002\u0002\u07ca\u07c9\u0003\u0002\u0002\u0002\u07ca",
    "\u07cb\u0003\u0002\u0002\u0002\u07cb\u07cd\u0003\u0002\u0002\u0002\u07cc",
    "\u07c4\u0003\u0002\u0002\u0002\u07cc\u07c5\u0003\u0002\u0002\u0002\u07cc",
    "\u07c7\u0003\u0002\u0002\u0002\u07cd\u00d9\u0003\u0002\u0002\u0002\u07ce",
    "\u07d0\t\u001a\u0002\u0002\u07cf\u07ce\u0003\u0002\u0002\u0002\u07cf",
    "\u07d0\u0003\u0002\u0002\u0002\u07d0\u07d7\u0003\u0002\u0002\u0002\u07d1",
    "\u07d8\u0005\u00d8m\u0002\u07d2\u07d8\u0007\u00c4\u0002\u0002\u07d3",
    "\u07d8\u0007\u00c5\u0002\u0002\u07d4\u07d8\u0007\u00c6\u0002\u0002\u07d5",
    "\u07d8\u0007S\u0002\u0002\u07d6\u07d8\u0007r\u0002\u0002\u07d7\u07d1",
    "\u0003\u0002\u0002\u0002\u07d7\u07d2\u0003\u0002\u0002\u0002\u07d7\u07d3",
    "\u0003\u0002\u0002\u0002\u07d7\u07d4\u0003\u0002\u0002\u0002\u07d7\u07d5",
    "\u0003\u0002\u0002\u0002\u07d7\u07d6\u0003\u0002\u0002\u0002\u07d8\u00db",
    "\u0003\u0002\u0002\u0002\u07d9\u07dd\u0005\u00dan\u0002\u07da\u07dd",
    "\u0007\u00c7\u0002\u0002\u07db\u07dd\u0007u\u0002\u0002\u07dc\u07d9",
    "\u0003\u0002\u0002\u0002\u07dc\u07da\u0003\u0002\u0002\u0002\u07dc\u07db",
    "\u0003\u0002\u0002\u0002\u07dd\u00dd\u0003\u0002\u0002\u0002\u07de\u07df",
    "\t\u001b\u0002\u0002\u07df\u00df\u0003\u0002\u0002\u0002\u07e0\u07e1",
    "\t\u001c\u0002\u0002\u07e1\u00e1\u0003\u0002\u0002\u0002\u07e2\u07e3",
    "\t\u001d\u0002\u0002\u07e3\u00e3\u0003\u0002\u0002\u0002\u07e4\u07e7",
    "\u0007\u00c2\u0002\u0002\u07e5\u07e7\u0005\u00e2r\u0002\u07e6\u07e4",
    "\u0003\u0002\u0002\u0002\u07e6\u07e5\u0003\u0002\u0002\u0002\u07e7\u00e5",
    "\u0003\u0002\u0002\u0002\u07e8\u07ec\u0007\u00c2\u0002\u0002\u07e9\u07ec",
    "\u0005\u00dep\u0002\u07ea\u07ec\u0005\u00e0q\u0002\u07eb\u07e8\u0003",
    "\u0002\u0002\u0002\u07eb\u07e9\u0003\u0002\u0002\u0002\u07eb\u07ea\u0003",
    "\u0002\u0002\u0002\u07ec\u00e7\u0003\u0002\u0002\u0002\u07ed\u07f0\u0005",
    "\u00e6t\u0002\u07ee\u07f0\u0007u\u0002\u0002\u07ef\u07ed\u0003\u0002",
    "\u0002\u0002\u07ef\u07ee\u0003\u0002\u0002\u0002\u07f0\u00e9\u0003\u0002",
    "\u0002\u0002\u07f1\u07f2\u0007\u00c7\u0002\u0002\u07f2\u07f3\u0007\u00d2",
    "\u0002\u0002\u07f3\u07f4\u0005\u00dan\u0002\u07f4\u00eb\u0003\u0002",
    "\u0002\u0002\u0111\u00f0\u00f5\u00fe\u0102\u0105\u0108\u011c\u0122\u0129",
    "\u0131\u0136\u013d\u0142\u0149\u014e\u0154\u015a\u015f\u0165\u016a\u0170",
    "\u0175\u017b\u0189\u0190\u0197\u019e\u01a4\u01a9\u01af\u01b4\u01ba\u01c3",
    "\u01cd\u01d7\u01eb\u01f3\u0202\u0209\u0217\u021d\u0223\u022a\u022e\u0231",
    "\u0237\u023a\u0240\u0244\u0247\u0252\u0256\u0259\u025e\u0260\u0263\u0266",
    "\u0270\u0274\u0277\u027a\u027f\u0281\u0289\u028c\u028f\u0295\u0299\u029c",
    "\u029f\u02a2\u02a5\u02aa\u02b0\u02b4\u02b7\u02ba\u02be\u02c6\u02e0\u02e2",
    "\u02e6\u02fc\u02fe\u0309\u030c\u0315\u0326\u0331\u0343\u0350\u0361\u036a",
    "\u0385\u0387\u039c\u03a1\u03a6\u03a9\u03b5\u03ba\u03be\u03c1\u03c5\u03c9",
    "\u03ce\u03d1\u03d5\u03d7\u03ed\u03f5\u03f8\u0402\u0406\u040e\u0412\u0417",
    "\u041b\u041f\u0423\u0427\u0429\u0431\u0435\u0438\u0440\u0445\u044a\u044d",
    "\u0457\u0461\u0465\u046a\u046e\u0474\u0477\u047a\u047d\u048b\u048f\u0493",
    "\u0498\u049b\u04a5\u04ad\u04b0\u04b4\u04b7\u04bb\u04be\u04c1\u04c4\u04c7",
    "\u04ca\u04ce\u04d2\u04d5\u04d8\u04db\u04de\u04e1\u04ea\u04f0\u050b\u0521",
    "\u0529\u052c\u0532\u053a\u053d\u0543\u0545\u0549\u054e\u0551\u0554\u0558",
    "\u055c\u055f\u0561\u0564\u0568\u056c\u056f\u0571\u0573\u0576\u057b\u0586",
    "\u058c\u0591\u0598\u059d\u05a1\u05a5\u05aa\u05b1\u05b9\u05bc\u05bf\u05d2",
    "\u05e0\u05f0\u05f3\u05fc\u0600\u0605\u060a\u060d\u060f\u0625\u0628\u0633",
    "\u0637\u063a\u063e\u0642\u064a\u064e\u065b\u0667\u0673\u067b\u067f\u0686",
    "\u068c\u0694\u0699\u06a2\u06a6\u06c5\u06d6\u06e2\u06ec\u06ef\u06f3\u06f6",
    "\u0702\u0713\u0717\u0728\u072b\u072f\u0732\u073d\u0755\u075c\u075e\u0760",
    "\u0768\u076d\u0775\u077f\u0782\u078a\u0791\u079a\u07a0\u07a4\u07aa\u07b1",
    "\u07ba\u07c0\u07ca\u07cc\u07cf\u07d7\u07dc\u07e6\u07eb\u07ef"].join("");


var atn = new antlr4.atn.ATNDeserializer().deserialize(serializedATN);

var decisionsToDFA = atn.decisionToState.map( function(ds, index) { return new antlr4.dfa.DFA(ds, index); });

var sharedContextCache = new antlr4.PredictionContextCache();

var literalNames = [ null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, null, null, null, null, null, null, null, null, 
                     null, "'false'", "'true'", null, null, null, null, 
                     null, null, "'->'", "'*'", "'`'", "'\\'", "':'", "','", 
                     "'||'", "'-'", "'.'", "'=='", "'='", "'>='", "'>'", 
                     "'{'", "'['", "'<='", "'('", "'<'", null, "'%'", "'+'", 
                     "'?'", "'\"'", "'''", "'}'", "']'", "')'", "';'", "'/'", 
                     "'_'" ];

var symbolicNames = [ null, "ADD", "AFTER", "ALIAS", "ALL", "ALTER", "AND", 
                      "ANTI", "ANY", "ARRAY", "AS", "ASCENDING", "ASOF", 
                      "AST", "ASYNC", "ATTACH", "BETWEEN", "BOTH", "BY", 
                      "CASE", "CAST", "CHECK", "CLEAR", "CLUSTER", "CODEC", 
                      "COLLATE", "COLUMN", "COMMENT", "CONSTRAINT", "CREATE", 
                      "CROSS", "CUBE", "CURRENT", "DATABASE", "DATABASES", 
                      "DATE", "DAY", "DEDUPLICATE", "DEFAULT", "DELAY", 
                      "DELETE", "DESC", "DESCENDING", "DESCRIBE", "DETACH", 
                      "DICTIONARIES", "DICTIONARY", "DISK", "DISTINCT", 
                      "DISTRIBUTED", "DROP", "ELSE", "END", "ENGINE", "EVENTS", 
                      "EXISTS", "EXPLAIN", "EXPRESSION", "EXTRACT", "FETCHES", 
                      "FINAL", "FIRST", "FLUSH", "FOLLOWING", "FOR", "FORMAT", 
                      "FREEZE", "FROM", "FULL", "FUNCTION", "GLOBAL", "GRANULARITY", 
                      "GROUP", "HAVING", "HIERARCHICAL", "HOUR", "ID", "IF", 
                      "ILIKE", "IN", "INDEX", "INF", "INJECTIVE", "INNER", 
                      "INSERT", "INTERVAL", "INTO", "IS", "IS_OBJECT_ID", 
                      "JOIN", "KEY", "KILL", "LAST", "LAYOUT", "LEADING", 
                      "LEFT", "LIFETIME", "LIKE", "LIMIT", "LIVE", "LOCAL", 
                      "LOGS", "MATERIALIZE", "MATERIALIZED", "MAX", "MERGES", 
                      "MIN", "MINUTE", "MODIFY", "MONTH", "MOVE", "MUTATION", 
                      "NAN_SQL", "NO", "NOT", "NULL_SQL", "NULLS", "OFFSET", 
                      "ON", "OPTIMIZE", "OR", "ORDER", "OUTER", "OUTFILE", 
                      "OVER", "PARTITION", "POPULATE", "PRECEDING", "PREWHERE", 
                      "PRIMARY", "PROJECTION", "QUARTER", "RANGE", "RELOAD", 
                      "REMOVE", "RENAME", "REPLACE", "REPLICA", "REPLICATED", 
                      "RIGHT", "ROLLUP", "ROW", "ROWS", "SAMPLE", "SECOND", 
                      "SELECT", "SEMI", "SENDS", "SET", "SETTINGS", "SHOW", 
                      "SOURCE", "START", "STOP", "SUBSTRING", "SYNC", "SYNTAX", 
                      "SYSTEM", "TABLE", "TABLES", "TEMPORARY", "TEST", 
                      "THEN", "TIES", "TIMEOUT", "TIMESTAMP", "TO", "TOP", 
                      "TOTALS", "TRAILING", "TRIM", "TRUNCATE", "TTL", "TYPE", 
                      "UNBOUNDED", "UNION", "UPDATE", "USE", "USING", "UUID", 
                      "VALUES", "VIEW", "VOLUME", "WATCH", "WEEK", "WHEN", 
                      "WHERE", "WINDOW", "WITH", "YEAR", "JSON_FALSE", "JSON_TRUE", 
                      "IDENTIFIER", "FLOATING_LITERAL", "OCTAL_LITERAL", 
                      "DECIMAL_LITERAL", "HEXADECIMAL_LITERAL", "STRING_LITERAL", 
                      "ARROW", "ASTERISK", "BACKQUOTE", "BACKSLASH", "COLON", 
                      "COMMA", "CONCAT", "DASH", "DOT", "EQ_DOUBLE", "EQ_SINGLE", 
                      "GE", "GT", "LBRACE", "LBRACKET", "LE", "LPAREN", 
                      "LT", "NOT_EQ", "PERCENT", "PLUS", "QUERY", "QUOTE_DOUBLE", 
                      "QUOTE_SINGLE", "RBRACE", "RBRACKET", "RPAREN", "SEMICOLON", 
                      "SLASH", "UNDERSCORE", "MULTI_LINE_COMMENT", "SINGLE_LINE_COMMENT", 
                      "WHITESPACE" ];

var ruleNames =  [ "sql", "queryStmt", "query", "alterStmt", "alterTableClause", 
                   "assignmentExprList", "assignmentExpr", "tableColumnPropertyType", 
                   "partitionClause", "attachStmt", "checkStmt", "createStmt", 
                   "dictionarySchemaClause", "dictionaryAttrDfnt", "dictionaryEngineClause", 
                   "dictionaryPrimaryKeyClause", "dictionaryArgExpr", "sourceClause", 
                   "lifetimeClause", "layoutClause", "rangeClause", "dictionarySettingsClause", 
                   "clusterClause", "uuidClause", "destinationClause", "subqueryClause", 
                   "tableSchemaClause", "engineClause", "partitionByClause", 
                   "primaryKeyClause", "sampleByClause", "ttlClause", "engineExpr", 
                   "tableElementExpr", "tableColumnDfnt", "tableColumnPropertyExpr", 
                   "tableIndexDfnt", "tableProjectionDfnt", "codecExpr", 
                   "codecArgExpr", "ttlExpr", "describeStmt", "dropStmt", 
                   "existsStmt", "explainStmt", "insertStmt", "columnsClause", 
                   "dataClause", "killStmt", "optimizeStmt", "renameStmt", 
                   "projectionSelectStmt", "selectUnionStmt", "selectStmtWithParens", 
                   "selectStmt", "withClause", "topClause", "fromClause", 
                   "arrayJoinClause", "windowClause", "prewhereClause", 
                   "whereClause", "groupByClause", "havingClause", "orderByClause", 
                   "projectionOrderByClause", "limitByClause", "limitClause", 
                   "settingsClause", "joinExpr", "joinOp", "joinOpCross", 
                   "joinConstraintClause", "sampleClause", "limitExpr", 
                   "orderExprList", "orderExpr", "ratioExpr", "settingExprList", 
                   "settingExpr", "windowExpr", "winPartitionByClause", 
                   "winOrderByClause", "winFrameClause", "winFrameExtend", 
                   "winFrameBound", "setStmt", "showStmt", "systemStmt", 
                   "truncateStmt", "useStmt", "watchStmt", "columnTypeExpr", 
                   "columnExprList", "columnsExpr", "columnExpr", "columnArgList", 
                   "columnArgExpr", "columnLambdaExpr", "columnIdentifier", 
                   "nestedIdentifier", "tableExpr", "tableFunctionExpr", 
                   "tableIdentifier", "tableArgList", "tableArgExpr", "databaseIdentifier", 
                   "floatingLiteral", "numberLiteral", "literal", "interval", 
                   "keyword", "keywordForAlias", "alias", "identifier", 
                   "identifierOrNull", "enumValue" ];

function ClickHouseParser (input) {
	antlr4.Parser.call(this, input);
    this._interp = new antlr4.atn.ParserATNSimulator(this, atn, decisionsToDFA, sharedContextCache);
    this.ruleNames = ruleNames;
    this.literalNames = literalNames;
    this.symbolicNames = symbolicNames;
    return this;
}

ClickHouseParser.prototype = Object.create(antlr4.Parser.prototype);
ClickHouseParser.prototype.constructor = ClickHouseParser;

Object.defineProperty(ClickHouseParser.prototype, "atn", {
	get : function() {
		return atn;
	}
});

ClickHouseParser.EOF = antlr4.Token.EOF;
ClickHouseParser.ADD = 1;
ClickHouseParser.AFTER = 2;
ClickHouseParser.ALIAS = 3;
ClickHouseParser.ALL = 4;
ClickHouseParser.ALTER = 5;
ClickHouseParser.AND = 6;
ClickHouseParser.ANTI = 7;
ClickHouseParser.ANY = 8;
ClickHouseParser.ARRAY = 9;
ClickHouseParser.AS = 10;
ClickHouseParser.ASCENDING = 11;
ClickHouseParser.ASOF = 12;
ClickHouseParser.AST = 13;
ClickHouseParser.ASYNC = 14;
ClickHouseParser.ATTACH = 15;
ClickHouseParser.BETWEEN = 16;
ClickHouseParser.BOTH = 17;
ClickHouseParser.BY = 18;
ClickHouseParser.CASE = 19;
ClickHouseParser.CAST = 20;
ClickHouseParser.CHECK = 21;
ClickHouseParser.CLEAR = 22;
ClickHouseParser.CLUSTER = 23;
ClickHouseParser.CODEC = 24;
ClickHouseParser.COLLATE = 25;
ClickHouseParser.COLUMN = 26;
ClickHouseParser.COMMENT = 27;
ClickHouseParser.CONSTRAINT = 28;
ClickHouseParser.CREATE = 29;
ClickHouseParser.CROSS = 30;
ClickHouseParser.CUBE = 31;
ClickHouseParser.CURRENT = 32;
ClickHouseParser.DATABASE = 33;
ClickHouseParser.DATABASES = 34;
ClickHouseParser.DATE = 35;
ClickHouseParser.DAY = 36;
ClickHouseParser.DEDUPLICATE = 37;
ClickHouseParser.DEFAULT = 38;
ClickHouseParser.DELAY = 39;
ClickHouseParser.DELETE = 40;
ClickHouseParser.DESC = 41;
ClickHouseParser.DESCENDING = 42;
ClickHouseParser.DESCRIBE = 43;
ClickHouseParser.DETACH = 44;
ClickHouseParser.DICTIONARIES = 45;
ClickHouseParser.DICTIONARY = 46;
ClickHouseParser.DISK = 47;
ClickHouseParser.DISTINCT = 48;
ClickHouseParser.DISTRIBUTED = 49;
ClickHouseParser.DROP = 50;
ClickHouseParser.ELSE = 51;
ClickHouseParser.END = 52;
ClickHouseParser.ENGINE = 53;
ClickHouseParser.EVENTS = 54;
ClickHouseParser.EXISTS = 55;
ClickHouseParser.EXPLAIN = 56;
ClickHouseParser.EXPRESSION = 57;
ClickHouseParser.EXTRACT = 58;
ClickHouseParser.FETCHES = 59;
ClickHouseParser.FINAL = 60;
ClickHouseParser.FIRST = 61;
ClickHouseParser.FLUSH = 62;
ClickHouseParser.FOLLOWING = 63;
ClickHouseParser.FOR = 64;
ClickHouseParser.FORMAT = 65;
ClickHouseParser.FREEZE = 66;
ClickHouseParser.FROM = 67;
ClickHouseParser.FULL = 68;
ClickHouseParser.FUNCTION = 69;
ClickHouseParser.GLOBAL = 70;
ClickHouseParser.GRANULARITY = 71;
ClickHouseParser.GROUP = 72;
ClickHouseParser.HAVING = 73;
ClickHouseParser.HIERARCHICAL = 74;
ClickHouseParser.HOUR = 75;
ClickHouseParser.ID = 76;
ClickHouseParser.IF = 77;
ClickHouseParser.ILIKE = 78;
ClickHouseParser.IN = 79;
ClickHouseParser.INDEX = 80;
ClickHouseParser.INF = 81;
ClickHouseParser.INJECTIVE = 82;
ClickHouseParser.INNER = 83;
ClickHouseParser.INSERT = 84;
ClickHouseParser.INTERVAL = 85;
ClickHouseParser.INTO = 86;
ClickHouseParser.IS = 87;
ClickHouseParser.IS_OBJECT_ID = 88;
ClickHouseParser.JOIN = 89;
ClickHouseParser.KEY = 90;
ClickHouseParser.KILL = 91;
ClickHouseParser.LAST = 92;
ClickHouseParser.LAYOUT = 93;
ClickHouseParser.LEADING = 94;
ClickHouseParser.LEFT = 95;
ClickHouseParser.LIFETIME = 96;
ClickHouseParser.LIKE = 97;
ClickHouseParser.LIMIT = 98;
ClickHouseParser.LIVE = 99;
ClickHouseParser.LOCAL = 100;
ClickHouseParser.LOGS = 101;
ClickHouseParser.MATERIALIZE = 102;
ClickHouseParser.MATERIALIZED = 103;
ClickHouseParser.MAX = 104;
ClickHouseParser.MERGES = 105;
ClickHouseParser.MIN = 106;
ClickHouseParser.MINUTE = 107;
ClickHouseParser.MODIFY = 108;
ClickHouseParser.MONTH = 109;
ClickHouseParser.MOVE = 110;
ClickHouseParser.MUTATION = 111;
ClickHouseParser.NAN_SQL = 112;
ClickHouseParser.NO = 113;
ClickHouseParser.NOT = 114;
ClickHouseParser.NULL_SQL = 115;
ClickHouseParser.NULLS = 116;
ClickHouseParser.OFFSET = 117;
ClickHouseParser.ON = 118;
ClickHouseParser.OPTIMIZE = 119;
ClickHouseParser.OR = 120;
ClickHouseParser.ORDER = 121;
ClickHouseParser.OUTER = 122;
ClickHouseParser.OUTFILE = 123;
ClickHouseParser.OVER = 124;
ClickHouseParser.PARTITION = 125;
ClickHouseParser.POPULATE = 126;
ClickHouseParser.PRECEDING = 127;
ClickHouseParser.PREWHERE = 128;
ClickHouseParser.PRIMARY = 129;
ClickHouseParser.PROJECTION = 130;
ClickHouseParser.QUARTER = 131;
ClickHouseParser.RANGE = 132;
ClickHouseParser.RELOAD = 133;
ClickHouseParser.REMOVE = 134;
ClickHouseParser.RENAME = 135;
ClickHouseParser.REPLACE = 136;
ClickHouseParser.REPLICA = 137;
ClickHouseParser.REPLICATED = 138;
ClickHouseParser.RIGHT = 139;
ClickHouseParser.ROLLUP = 140;
ClickHouseParser.ROW = 141;
ClickHouseParser.ROWS = 142;
ClickHouseParser.SAMPLE = 143;
ClickHouseParser.SECOND = 144;
ClickHouseParser.SELECT = 145;
ClickHouseParser.SEMI = 146;
ClickHouseParser.SENDS = 147;
ClickHouseParser.SET = 148;
ClickHouseParser.SETTINGS = 149;
ClickHouseParser.SHOW = 150;
ClickHouseParser.SOURCE = 151;
ClickHouseParser.START = 152;
ClickHouseParser.STOP = 153;
ClickHouseParser.SUBSTRING = 154;
ClickHouseParser.SYNC = 155;
ClickHouseParser.SYNTAX = 156;
ClickHouseParser.SYSTEM = 157;
ClickHouseParser.TABLE = 158;
ClickHouseParser.TABLES = 159;
ClickHouseParser.TEMPORARY = 160;
ClickHouseParser.TEST = 161;
ClickHouseParser.THEN = 162;
ClickHouseParser.TIES = 163;
ClickHouseParser.TIMEOUT = 164;
ClickHouseParser.TIMESTAMP = 165;
ClickHouseParser.TO = 166;
ClickHouseParser.TOP = 167;
ClickHouseParser.TOTALS = 168;
ClickHouseParser.TRAILING = 169;
ClickHouseParser.TRIM = 170;
ClickHouseParser.TRUNCATE = 171;
ClickHouseParser.TTL = 172;
ClickHouseParser.TYPE = 173;
ClickHouseParser.UNBOUNDED = 174;
ClickHouseParser.UNION = 175;
ClickHouseParser.UPDATE = 176;
ClickHouseParser.USE = 177;
ClickHouseParser.USING = 178;
ClickHouseParser.UUID = 179;
ClickHouseParser.VALUES = 180;
ClickHouseParser.VIEW = 181;
ClickHouseParser.VOLUME = 182;
ClickHouseParser.WATCH = 183;
ClickHouseParser.WEEK = 184;
ClickHouseParser.WHEN = 185;
ClickHouseParser.WHERE = 186;
ClickHouseParser.WINDOW = 187;
ClickHouseParser.WITH = 188;
ClickHouseParser.YEAR = 189;
ClickHouseParser.JSON_FALSE = 190;
ClickHouseParser.JSON_TRUE = 191;
ClickHouseParser.IDENTIFIER = 192;
ClickHouseParser.FLOATING_LITERAL = 193;
ClickHouseParser.OCTAL_LITERAL = 194;
ClickHouseParser.DECIMAL_LITERAL = 195;
ClickHouseParser.HEXADECIMAL_LITERAL = 196;
ClickHouseParser.STRING_LITERAL = 197;
ClickHouseParser.ARROW = 198;
ClickHouseParser.ASTERISK = 199;
ClickHouseParser.BACKQUOTE = 200;
ClickHouseParser.BACKSLASH = 201;
ClickHouseParser.COLON = 202;
ClickHouseParser.COMMA = 203;
ClickHouseParser.CONCAT = 204;
ClickHouseParser.DASH = 205;
ClickHouseParser.DOT = 206;
ClickHouseParser.EQ_DOUBLE = 207;
ClickHouseParser.EQ_SINGLE = 208;
ClickHouseParser.GE = 209;
ClickHouseParser.GT = 210;
ClickHouseParser.LBRACE = 211;
ClickHouseParser.LBRACKET = 212;
ClickHouseParser.LE = 213;
ClickHouseParser.LPAREN = 214;
ClickHouseParser.LT = 215;
ClickHouseParser.NOT_EQ = 216;
ClickHouseParser.PERCENT = 217;
ClickHouseParser.PLUS = 218;
ClickHouseParser.QUERY = 219;
ClickHouseParser.QUOTE_DOUBLE = 220;
ClickHouseParser.QUOTE_SINGLE = 221;
ClickHouseParser.RBRACE = 222;
ClickHouseParser.RBRACKET = 223;
ClickHouseParser.RPAREN = 224;
ClickHouseParser.SEMICOLON = 225;
ClickHouseParser.SLASH = 226;
ClickHouseParser.UNDERSCORE = 227;
ClickHouseParser.MULTI_LINE_COMMENT = 228;
ClickHouseParser.SINGLE_LINE_COMMENT = 229;
ClickHouseParser.WHITESPACE = 230;

ClickHouseParser.RULE_sql = 0;
ClickHouseParser.RULE_queryStmt = 1;
ClickHouseParser.RULE_query = 2;
ClickHouseParser.RULE_alterStmt = 3;
ClickHouseParser.RULE_alterTableClause = 4;
ClickHouseParser.RULE_assignmentExprList = 5;
ClickHouseParser.RULE_assignmentExpr = 6;
ClickHouseParser.RULE_tableColumnPropertyType = 7;
ClickHouseParser.RULE_partitionClause = 8;
ClickHouseParser.RULE_attachStmt = 9;
ClickHouseParser.RULE_checkStmt = 10;
ClickHouseParser.RULE_createStmt = 11;
ClickHouseParser.RULE_dictionarySchemaClause = 12;
ClickHouseParser.RULE_dictionaryAttrDfnt = 13;
ClickHouseParser.RULE_dictionaryEngineClause = 14;
ClickHouseParser.RULE_dictionaryPrimaryKeyClause = 15;
ClickHouseParser.RULE_dictionaryArgExpr = 16;
ClickHouseParser.RULE_sourceClause = 17;
ClickHouseParser.RULE_lifetimeClause = 18;
ClickHouseParser.RULE_layoutClause = 19;
ClickHouseParser.RULE_rangeClause = 20;
ClickHouseParser.RULE_dictionarySettingsClause = 21;
ClickHouseParser.RULE_clusterClause = 22;
ClickHouseParser.RULE_uuidClause = 23;
ClickHouseParser.RULE_destinationClause = 24;
ClickHouseParser.RULE_subqueryClause = 25;
ClickHouseParser.RULE_tableSchemaClause = 26;
ClickHouseParser.RULE_engineClause = 27;
ClickHouseParser.RULE_partitionByClause = 28;
ClickHouseParser.RULE_primaryKeyClause = 29;
ClickHouseParser.RULE_sampleByClause = 30;
ClickHouseParser.RULE_ttlClause = 31;
ClickHouseParser.RULE_engineExpr = 32;
ClickHouseParser.RULE_tableElementExpr = 33;
ClickHouseParser.RULE_tableColumnDfnt = 34;
ClickHouseParser.RULE_tableColumnPropertyExpr = 35;
ClickHouseParser.RULE_tableIndexDfnt = 36;
ClickHouseParser.RULE_tableProjectionDfnt = 37;
ClickHouseParser.RULE_codecExpr = 38;
ClickHouseParser.RULE_codecArgExpr = 39;
ClickHouseParser.RULE_ttlExpr = 40;
ClickHouseParser.RULE_describeStmt = 41;
ClickHouseParser.RULE_dropStmt = 42;
ClickHouseParser.RULE_existsStmt = 43;
ClickHouseParser.RULE_explainStmt = 44;
ClickHouseParser.RULE_insertStmt = 45;
ClickHouseParser.RULE_columnsClause = 46;
ClickHouseParser.RULE_dataClause = 47;
ClickHouseParser.RULE_killStmt = 48;
ClickHouseParser.RULE_optimizeStmt = 49;
ClickHouseParser.RULE_renameStmt = 50;
ClickHouseParser.RULE_projectionSelectStmt = 51;
ClickHouseParser.RULE_selectUnionStmt = 52;
ClickHouseParser.RULE_selectStmtWithParens = 53;
ClickHouseParser.RULE_selectStmt = 54;
ClickHouseParser.RULE_withClause = 55;
ClickHouseParser.RULE_topClause = 56;
ClickHouseParser.RULE_fromClause = 57;
ClickHouseParser.RULE_arrayJoinClause = 58;
ClickHouseParser.RULE_windowClause = 59;
ClickHouseParser.RULE_prewhereClause = 60;
ClickHouseParser.RULE_whereClause = 61;
ClickHouseParser.RULE_groupByClause = 62;
ClickHouseParser.RULE_havingClause = 63;
ClickHouseParser.RULE_orderByClause = 64;
ClickHouseParser.RULE_projectionOrderByClause = 65;
ClickHouseParser.RULE_limitByClause = 66;
ClickHouseParser.RULE_limitClause = 67;
ClickHouseParser.RULE_settingsClause = 68;
ClickHouseParser.RULE_joinExpr = 69;
ClickHouseParser.RULE_joinOp = 70;
ClickHouseParser.RULE_joinOpCross = 71;
ClickHouseParser.RULE_joinConstraintClause = 72;
ClickHouseParser.RULE_sampleClause = 73;
ClickHouseParser.RULE_limitExpr = 74;
ClickHouseParser.RULE_orderExprList = 75;
ClickHouseParser.RULE_orderExpr = 76;
ClickHouseParser.RULE_ratioExpr = 77;
ClickHouseParser.RULE_settingExprList = 78;
ClickHouseParser.RULE_settingExpr = 79;
ClickHouseParser.RULE_windowExpr = 80;
ClickHouseParser.RULE_winPartitionByClause = 81;
ClickHouseParser.RULE_winOrderByClause = 82;
ClickHouseParser.RULE_winFrameClause = 83;
ClickHouseParser.RULE_winFrameExtend = 84;
ClickHouseParser.RULE_winFrameBound = 85;
ClickHouseParser.RULE_setStmt = 86;
ClickHouseParser.RULE_showStmt = 87;
ClickHouseParser.RULE_systemStmt = 88;
ClickHouseParser.RULE_truncateStmt = 89;
ClickHouseParser.RULE_useStmt = 90;
ClickHouseParser.RULE_watchStmt = 91;
ClickHouseParser.RULE_columnTypeExpr = 92;
ClickHouseParser.RULE_columnExprList = 93;
ClickHouseParser.RULE_columnsExpr = 94;
ClickHouseParser.RULE_columnExpr = 95;
ClickHouseParser.RULE_columnArgList = 96;
ClickHouseParser.RULE_columnArgExpr = 97;
ClickHouseParser.RULE_columnLambdaExpr = 98;
ClickHouseParser.RULE_columnIdentifier = 99;
ClickHouseParser.RULE_nestedIdentifier = 100;
ClickHouseParser.RULE_tableExpr = 101;
ClickHouseParser.RULE_tableFunctionExpr = 102;
ClickHouseParser.RULE_tableIdentifier = 103;
ClickHouseParser.RULE_tableArgList = 104;
ClickHouseParser.RULE_tableArgExpr = 105;
ClickHouseParser.RULE_databaseIdentifier = 106;
ClickHouseParser.RULE_floatingLiteral = 107;
ClickHouseParser.RULE_numberLiteral = 108;
ClickHouseParser.RULE_literal = 109;
ClickHouseParser.RULE_interval = 110;
ClickHouseParser.RULE_keyword = 111;
ClickHouseParser.RULE_keywordForAlias = 112;
ClickHouseParser.RULE_alias = 113;
ClickHouseParser.RULE_identifier = 114;
ClickHouseParser.RULE_identifierOrNull = 115;
ClickHouseParser.RULE_enumValue = 116;


function SqlContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_sql;
    return this;
}

SqlContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SqlContext.prototype.constructor = SqlContext;

SqlContext.prototype.EOF = function() {
    return this.getToken(ClickHouseParser.EOF, 0);
};

SqlContext.prototype.queryStmt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(QueryStmtContext);
    } else {
        return this.getTypedRuleContext(QueryStmtContext,i);
    }
};

SqlContext.prototype.SEMICOLON = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.SEMICOLON);
    } else {
        return this.getToken(ClickHouseParser.SEMICOLON, i);
    }
};


SqlContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSql(this);
	}
};

SqlContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSql(this);
	}
};

SqlContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSql(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SqlContext = SqlContext;

ClickHouseParser.prototype.sql = function() {

    var localctx = new SqlContext(this, this._ctx, this.state);
    this.enterRule(localctx, 0, ClickHouseParser.RULE_sql);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 243;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CREATE))) !== 0) || ((((_la - 41)) & ~0x1f) == 0 && ((1 << (_la - 41)) & ((1 << (ClickHouseParser.DESC - 41)) | (1 << (ClickHouseParser.DESCRIBE - 41)) | (1 << (ClickHouseParser.DETACH - 41)) | (1 << (ClickHouseParser.DROP - 41)) | (1 << (ClickHouseParser.EXISTS - 41)) | (1 << (ClickHouseParser.EXPLAIN - 41)))) !== 0) || _la===ClickHouseParser.INSERT || _la===ClickHouseParser.KILL || ((((_la - 119)) & ~0x1f) == 0 && ((1 << (_la - 119)) & ((1 << (ClickHouseParser.OPTIMIZE - 119)) | (1 << (ClickHouseParser.RENAME - 119)) | (1 << (ClickHouseParser.REPLACE - 119)) | (1 << (ClickHouseParser.SELECT - 119)) | (1 << (ClickHouseParser.SET - 119)) | (1 << (ClickHouseParser.SHOW - 119)))) !== 0) || ((((_la - 157)) & ~0x1f) == 0 && ((1 << (_la - 157)) & ((1 << (ClickHouseParser.SYSTEM - 157)) | (1 << (ClickHouseParser.TRUNCATE - 157)) | (1 << (ClickHouseParser.USE - 157)) | (1 << (ClickHouseParser.WATCH - 157)) | (1 << (ClickHouseParser.WITH - 157)))) !== 0) || _la===ClickHouseParser.LPAREN) {
            this.state = 234;
            this.queryStmt();
            this.state = 238;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ClickHouseParser.SEMICOLON) {
                this.state = 235;
                this.match(ClickHouseParser.SEMICOLON);
                this.state = 240;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 245;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 246;
        this.match(ClickHouseParser.EOF);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_queryStmt;
    return this;
}

QueryStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryStmtContext.prototype.constructor = QueryStmtContext;

QueryStmtContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};

QueryStmtContext.prototype.INTO = function() {
    return this.getToken(ClickHouseParser.INTO, 0);
};

QueryStmtContext.prototype.OUTFILE = function() {
    return this.getToken(ClickHouseParser.OUTFILE, 0);
};

QueryStmtContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

QueryStmtContext.prototype.FORMAT = function() {
    return this.getToken(ClickHouseParser.FORMAT, 0);
};

QueryStmtContext.prototype.identifierOrNull = function() {
    return this.getTypedRuleContext(IdentifierOrNullContext,0);
};

QueryStmtContext.prototype.SEMICOLON = function() {
    return this.getToken(ClickHouseParser.SEMICOLON, 0);
};

QueryStmtContext.prototype.insertStmt = function() {
    return this.getTypedRuleContext(InsertStmtContext,0);
};

QueryStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterQueryStmt(this);
	}
};

QueryStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitQueryStmt(this);
	}
};

QueryStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitQueryStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.QueryStmtContext = QueryStmtContext;

ClickHouseParser.prototype.queryStmt = function() {

    var localctx = new QueryStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 2, ClickHouseParser.RULE_queryStmt);
    var _la = 0; // Token type
    try {
        this.state = 262;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.ALTER:
        case ClickHouseParser.ATTACH:
        case ClickHouseParser.CHECK:
        case ClickHouseParser.CREATE:
        case ClickHouseParser.DESC:
        case ClickHouseParser.DESCRIBE:
        case ClickHouseParser.DETACH:
        case ClickHouseParser.DROP:
        case ClickHouseParser.EXISTS:
        case ClickHouseParser.EXPLAIN:
        case ClickHouseParser.KILL:
        case ClickHouseParser.OPTIMIZE:
        case ClickHouseParser.RENAME:
        case ClickHouseParser.REPLACE:
        case ClickHouseParser.SELECT:
        case ClickHouseParser.SET:
        case ClickHouseParser.SHOW:
        case ClickHouseParser.SYSTEM:
        case ClickHouseParser.TRUNCATE:
        case ClickHouseParser.USE:
        case ClickHouseParser.WATCH:
        case ClickHouseParser.WITH:
        case ClickHouseParser.LPAREN:
            this.enterOuterAlt(localctx, 1);
            this.state = 248;
            this.query();
            this.state = 252;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.INTO) {
                this.state = 249;
                this.match(ClickHouseParser.INTO);
                this.state = 250;
                this.match(ClickHouseParser.OUTFILE);
                this.state = 251;
                this.match(ClickHouseParser.STRING_LITERAL);
            }

            this.state = 256;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.FORMAT) {
                this.state = 254;
                this.match(ClickHouseParser.FORMAT);
                this.state = 255;
                this.identifierOrNull();
            }

            this.state = 259;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,4,this._ctx);
            if(la_===1) {
                this.state = 258;
                this.match(ClickHouseParser.SEMICOLON);

            }
            break;
        case ClickHouseParser.INSERT:
            this.enterOuterAlt(localctx, 2);
            this.state = 261;
            this.insertStmt();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function QueryContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_query;
    return this;
}

QueryContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
QueryContext.prototype.constructor = QueryContext;

QueryContext.prototype.alterStmt = function() {
    return this.getTypedRuleContext(AlterStmtContext,0);
};

QueryContext.prototype.attachStmt = function() {
    return this.getTypedRuleContext(AttachStmtContext,0);
};

QueryContext.prototype.checkStmt = function() {
    return this.getTypedRuleContext(CheckStmtContext,0);
};

QueryContext.prototype.createStmt = function() {
    return this.getTypedRuleContext(CreateStmtContext,0);
};

QueryContext.prototype.describeStmt = function() {
    return this.getTypedRuleContext(DescribeStmtContext,0);
};

QueryContext.prototype.dropStmt = function() {
    return this.getTypedRuleContext(DropStmtContext,0);
};

QueryContext.prototype.existsStmt = function() {
    return this.getTypedRuleContext(ExistsStmtContext,0);
};

QueryContext.prototype.explainStmt = function() {
    return this.getTypedRuleContext(ExplainStmtContext,0);
};

QueryContext.prototype.killStmt = function() {
    return this.getTypedRuleContext(KillStmtContext,0);
};

QueryContext.prototype.optimizeStmt = function() {
    return this.getTypedRuleContext(OptimizeStmtContext,0);
};

QueryContext.prototype.renameStmt = function() {
    return this.getTypedRuleContext(RenameStmtContext,0);
};

QueryContext.prototype.selectUnionStmt = function() {
    return this.getTypedRuleContext(SelectUnionStmtContext,0);
};

QueryContext.prototype.setStmt = function() {
    return this.getTypedRuleContext(SetStmtContext,0);
};

QueryContext.prototype.showStmt = function() {
    return this.getTypedRuleContext(ShowStmtContext,0);
};

QueryContext.prototype.systemStmt = function() {
    return this.getTypedRuleContext(SystemStmtContext,0);
};

QueryContext.prototype.truncateStmt = function() {
    return this.getTypedRuleContext(TruncateStmtContext,0);
};

QueryContext.prototype.useStmt = function() {
    return this.getTypedRuleContext(UseStmtContext,0);
};

QueryContext.prototype.watchStmt = function() {
    return this.getTypedRuleContext(WatchStmtContext,0);
};

QueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterQuery(this);
	}
};

QueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitQuery(this);
	}
};

QueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitQuery(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.QueryContext = QueryContext;

ClickHouseParser.prototype.query = function() {

    var localctx = new QueryContext(this, this._ctx, this.state);
    this.enterRule(localctx, 4, ClickHouseParser.RULE_query);
    try {
        this.state = 282;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,6,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 264;
            this.alterStmt();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 265;
            this.attachStmt();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 266;
            this.checkStmt();
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 267;
            this.createStmt();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 268;
            this.describeStmt();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 269;
            this.dropStmt();
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 270;
            this.existsStmt();
            break;

        case 8:
            this.enterOuterAlt(localctx, 8);
            this.state = 271;
            this.explainStmt();
            break;

        case 9:
            this.enterOuterAlt(localctx, 9);
            this.state = 272;
            this.killStmt();
            break;

        case 10:
            this.enterOuterAlt(localctx, 10);
            this.state = 273;
            this.optimizeStmt();
            break;

        case 11:
            this.enterOuterAlt(localctx, 11);
            this.state = 274;
            this.renameStmt();
            break;

        case 12:
            this.enterOuterAlt(localctx, 12);
            this.state = 275;
            this.selectUnionStmt();
            break;

        case 13:
            this.enterOuterAlt(localctx, 13);
            this.state = 276;
            this.setStmt();
            break;

        case 14:
            this.enterOuterAlt(localctx, 14);
            this.state = 277;
            this.showStmt();
            break;

        case 15:
            this.enterOuterAlt(localctx, 15);
            this.state = 278;
            this.systemStmt();
            break;

        case 16:
            this.enterOuterAlt(localctx, 16);
            this.state = 279;
            this.truncateStmt();
            break;

        case 17:
            this.enterOuterAlt(localctx, 17);
            this.state = 280;
            this.useStmt();
            break;

        case 18:
            this.enterOuterAlt(localctx, 18);
            this.state = 281;
            this.watchStmt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_alterStmt;
    return this;
}

AlterStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterStmtContext.prototype.constructor = AlterStmtContext;


 
AlterStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AlterTableStmtContext(parser, ctx) {
	AlterStmtContext.call(this, parser);
    AlterStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableStmtContext.prototype = Object.create(AlterStmtContext.prototype);
AlterTableStmtContext.prototype.constructor = AlterTableStmtContext;

ClickHouseParser.AlterTableStmtContext = AlterTableStmtContext;

AlterTableStmtContext.prototype.ALTER = function() {
    return this.getToken(ClickHouseParser.ALTER, 0);
};

AlterTableStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

AlterTableStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

AlterTableStmtContext.prototype.alterTableClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AlterTableClauseContext);
    } else {
        return this.getTypedRuleContext(AlterTableClauseContext,i);
    }
};

AlterTableStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

AlterTableStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};

AlterTableStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableStmt(this);
	}
};

AlterTableStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableStmt(this);
	}
};

AlterTableStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.AlterStmtContext = AlterStmtContext;

ClickHouseParser.prototype.alterStmt = function() {

    var localctx = new AlterStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 6, ClickHouseParser.RULE_alterStmt);
    var _la = 0; // Token type
    try {
        localctx = new AlterTableStmtContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 284;
        this.match(ClickHouseParser.ALTER);
        this.state = 285;
        this.match(ClickHouseParser.TABLE);
        this.state = 286;
        this.tableIdentifier();
        this.state = 288;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ON) {
            this.state = 287;
            this.clusterClause();
        }

        this.state = 290;
        this.alterTableClause();
        this.state = 295;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ClickHouseParser.COMMA) {
            this.state = 291;
            this.match(ClickHouseParser.COMMA);
            this.state = 292;
            this.alterTableClause();
            this.state = 297;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AlterTableClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_alterTableClause;
    return this;
}

AlterTableClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AlterTableClauseContext.prototype.constructor = AlterTableClauseContext;


 
AlterTableClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AlterTableClauseReplaceContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseReplaceContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseReplaceContext.prototype.constructor = AlterTableClauseReplaceContext;

ClickHouseParser.AlterTableClauseReplaceContext = AlterTableClauseReplaceContext;

AlterTableClauseReplaceContext.prototype.REPLACE = function() {
    return this.getToken(ClickHouseParser.REPLACE, 0);
};

AlterTableClauseReplaceContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};

AlterTableClauseReplaceContext.prototype.FROM = function() {
    return this.getToken(ClickHouseParser.FROM, 0);
};

AlterTableClauseReplaceContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};
AlterTableClauseReplaceContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseReplace(this);
	}
};

AlterTableClauseReplaceContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseReplace(this);
	}
};

AlterTableClauseReplaceContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseReplace(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseModifyOrderByContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseModifyOrderByContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseModifyOrderByContext.prototype.constructor = AlterTableClauseModifyOrderByContext;

ClickHouseParser.AlterTableClauseModifyOrderByContext = AlterTableClauseModifyOrderByContext;

AlterTableClauseModifyOrderByContext.prototype.MODIFY = function() {
    return this.getToken(ClickHouseParser.MODIFY, 0);
};

AlterTableClauseModifyOrderByContext.prototype.ORDER = function() {
    return this.getToken(ClickHouseParser.ORDER, 0);
};

AlterTableClauseModifyOrderByContext.prototype.BY = function() {
    return this.getToken(ClickHouseParser.BY, 0);
};

AlterTableClauseModifyOrderByContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};
AlterTableClauseModifyOrderByContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseModifyOrderBy(this);
	}
};

AlterTableClauseModifyOrderByContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseModifyOrderBy(this);
	}
};

AlterTableClauseModifyOrderByContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseModifyOrderBy(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseUpdateContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseUpdateContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseUpdateContext.prototype.constructor = AlterTableClauseUpdateContext;

ClickHouseParser.AlterTableClauseUpdateContext = AlterTableClauseUpdateContext;

AlterTableClauseUpdateContext.prototype.UPDATE = function() {
    return this.getToken(ClickHouseParser.UPDATE, 0);
};

AlterTableClauseUpdateContext.prototype.assignmentExprList = function() {
    return this.getTypedRuleContext(AssignmentExprListContext,0);
};

AlterTableClauseUpdateContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};
AlterTableClauseUpdateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseUpdate(this);
	}
};

AlterTableClauseUpdateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseUpdate(this);
	}
};

AlterTableClauseUpdateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseUpdate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseClearProjectionContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseClearProjectionContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseClearProjectionContext.prototype.constructor = AlterTableClauseClearProjectionContext;

ClickHouseParser.AlterTableClauseClearProjectionContext = AlterTableClauseClearProjectionContext;

AlterTableClauseClearProjectionContext.prototype.CLEAR = function() {
    return this.getToken(ClickHouseParser.CLEAR, 0);
};

AlterTableClauseClearProjectionContext.prototype.PROJECTION = function() {
    return this.getToken(ClickHouseParser.PROJECTION, 0);
};

AlterTableClauseClearProjectionContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseClearProjectionContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseClearProjectionContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

AlterTableClauseClearProjectionContext.prototype.IN = function() {
    return this.getToken(ClickHouseParser.IN, 0);
};

AlterTableClauseClearProjectionContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};
AlterTableClauseClearProjectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseClearProjection(this);
	}
};

AlterTableClauseClearProjectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseClearProjection(this);
	}
};

AlterTableClauseClearProjectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseClearProjection(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseModifyRemoveContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseModifyRemoveContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseModifyRemoveContext.prototype.constructor = AlterTableClauseModifyRemoveContext;

ClickHouseParser.AlterTableClauseModifyRemoveContext = AlterTableClauseModifyRemoveContext;

AlterTableClauseModifyRemoveContext.prototype.MODIFY = function() {
    return this.getToken(ClickHouseParser.MODIFY, 0);
};

AlterTableClauseModifyRemoveContext.prototype.COLUMN = function() {
    return this.getToken(ClickHouseParser.COLUMN, 0);
};

AlterTableClauseModifyRemoveContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseModifyRemoveContext.prototype.REMOVE = function() {
    return this.getToken(ClickHouseParser.REMOVE, 0);
};

AlterTableClauseModifyRemoveContext.prototype.tableColumnPropertyType = function() {
    return this.getTypedRuleContext(TableColumnPropertyTypeContext,0);
};

AlterTableClauseModifyRemoveContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseModifyRemoveContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};
AlterTableClauseModifyRemoveContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseModifyRemove(this);
	}
};

AlterTableClauseModifyRemoveContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseModifyRemove(this);
	}
};

AlterTableClauseModifyRemoveContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseModifyRemove(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseDeleteContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseDeleteContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseDeleteContext.prototype.constructor = AlterTableClauseDeleteContext;

ClickHouseParser.AlterTableClauseDeleteContext = AlterTableClauseDeleteContext;

AlterTableClauseDeleteContext.prototype.DELETE = function() {
    return this.getToken(ClickHouseParser.DELETE, 0);
};

AlterTableClauseDeleteContext.prototype.WHERE = function() {
    return this.getToken(ClickHouseParser.WHERE, 0);
};

AlterTableClauseDeleteContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};
AlterTableClauseDeleteContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseDelete(this);
	}
};

AlterTableClauseDeleteContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseDelete(this);
	}
};

AlterTableClauseDeleteContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseDelete(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseCommentContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseCommentContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseCommentContext.prototype.constructor = AlterTableClauseCommentContext;

ClickHouseParser.AlterTableClauseCommentContext = AlterTableClauseCommentContext;

AlterTableClauseCommentContext.prototype.COMMENT = function() {
    return this.getToken(ClickHouseParser.COMMENT, 0);
};

AlterTableClauseCommentContext.prototype.COLUMN = function() {
    return this.getToken(ClickHouseParser.COLUMN, 0);
};

AlterTableClauseCommentContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseCommentContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

AlterTableClauseCommentContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseCommentContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};
AlterTableClauseCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseComment(this);
	}
};

AlterTableClauseCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseComment(this);
	}
};

AlterTableClauseCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseDropColumnContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseDropColumnContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseDropColumnContext.prototype.constructor = AlterTableClauseDropColumnContext;

ClickHouseParser.AlterTableClauseDropColumnContext = AlterTableClauseDropColumnContext;

AlterTableClauseDropColumnContext.prototype.DROP = function() {
    return this.getToken(ClickHouseParser.DROP, 0);
};

AlterTableClauseDropColumnContext.prototype.COLUMN = function() {
    return this.getToken(ClickHouseParser.COLUMN, 0);
};

AlterTableClauseDropColumnContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseDropColumnContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseDropColumnContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};
AlterTableClauseDropColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseDropColumn(this);
	}
};

AlterTableClauseDropColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseDropColumn(this);
	}
};

AlterTableClauseDropColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseDropColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseDetachContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseDetachContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseDetachContext.prototype.constructor = AlterTableClauseDetachContext;

ClickHouseParser.AlterTableClauseDetachContext = AlterTableClauseDetachContext;

AlterTableClauseDetachContext.prototype.DETACH = function() {
    return this.getToken(ClickHouseParser.DETACH, 0);
};

AlterTableClauseDetachContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};
AlterTableClauseDetachContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseDetach(this);
	}
};

AlterTableClauseDetachContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseDetach(this);
	}
};

AlterTableClauseDetachContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseDetach(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseAddIndexContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseAddIndexContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseAddIndexContext.prototype.constructor = AlterTableClauseAddIndexContext;

ClickHouseParser.AlterTableClauseAddIndexContext = AlterTableClauseAddIndexContext;

AlterTableClauseAddIndexContext.prototype.ADD = function() {
    return this.getToken(ClickHouseParser.ADD, 0);
};

AlterTableClauseAddIndexContext.prototype.INDEX = function() {
    return this.getToken(ClickHouseParser.INDEX, 0);
};

AlterTableClauseAddIndexContext.prototype.tableIndexDfnt = function() {
    return this.getTypedRuleContext(TableIndexDfntContext,0);
};

AlterTableClauseAddIndexContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseAddIndexContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

AlterTableClauseAddIndexContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

AlterTableClauseAddIndexContext.prototype.AFTER = function() {
    return this.getToken(ClickHouseParser.AFTER, 0);
};

AlterTableClauseAddIndexContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};
AlterTableClauseAddIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseAddIndex(this);
	}
};

AlterTableClauseAddIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseAddIndex(this);
	}
};

AlterTableClauseAddIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseAddIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseDropPartitionContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseDropPartitionContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseDropPartitionContext.prototype.constructor = AlterTableClauseDropPartitionContext;

ClickHouseParser.AlterTableClauseDropPartitionContext = AlterTableClauseDropPartitionContext;

AlterTableClauseDropPartitionContext.prototype.DROP = function() {
    return this.getToken(ClickHouseParser.DROP, 0);
};

AlterTableClauseDropPartitionContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};
AlterTableClauseDropPartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseDropPartition(this);
	}
};

AlterTableClauseDropPartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseDropPartition(this);
	}
};

AlterTableClauseDropPartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseDropPartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseMaterializeIndexContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseMaterializeIndexContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseMaterializeIndexContext.prototype.constructor = AlterTableClauseMaterializeIndexContext;

ClickHouseParser.AlterTableClauseMaterializeIndexContext = AlterTableClauseMaterializeIndexContext;

AlterTableClauseMaterializeIndexContext.prototype.MATERIALIZE = function() {
    return this.getToken(ClickHouseParser.MATERIALIZE, 0);
};

AlterTableClauseMaterializeIndexContext.prototype.INDEX = function() {
    return this.getToken(ClickHouseParser.INDEX, 0);
};

AlterTableClauseMaterializeIndexContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseMaterializeIndexContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseMaterializeIndexContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

AlterTableClauseMaterializeIndexContext.prototype.IN = function() {
    return this.getToken(ClickHouseParser.IN, 0);
};

AlterTableClauseMaterializeIndexContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};
AlterTableClauseMaterializeIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseMaterializeIndex(this);
	}
};

AlterTableClauseMaterializeIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseMaterializeIndex(this);
	}
};

AlterTableClauseMaterializeIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseMaterializeIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseMaterializeProjectionContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseMaterializeProjectionContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseMaterializeProjectionContext.prototype.constructor = AlterTableClauseMaterializeProjectionContext;

ClickHouseParser.AlterTableClauseMaterializeProjectionContext = AlterTableClauseMaterializeProjectionContext;

AlterTableClauseMaterializeProjectionContext.prototype.MATERIALIZE = function() {
    return this.getToken(ClickHouseParser.MATERIALIZE, 0);
};

AlterTableClauseMaterializeProjectionContext.prototype.PROJECTION = function() {
    return this.getToken(ClickHouseParser.PROJECTION, 0);
};

AlterTableClauseMaterializeProjectionContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseMaterializeProjectionContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseMaterializeProjectionContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

AlterTableClauseMaterializeProjectionContext.prototype.IN = function() {
    return this.getToken(ClickHouseParser.IN, 0);
};

AlterTableClauseMaterializeProjectionContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};
AlterTableClauseMaterializeProjectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseMaterializeProjection(this);
	}
};

AlterTableClauseMaterializeProjectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseMaterializeProjection(this);
	}
};

AlterTableClauseMaterializeProjectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseMaterializeProjection(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseMovePartitionContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseMovePartitionContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseMovePartitionContext.prototype.constructor = AlterTableClauseMovePartitionContext;

ClickHouseParser.AlterTableClauseMovePartitionContext = AlterTableClauseMovePartitionContext;

AlterTableClauseMovePartitionContext.prototype.MOVE = function() {
    return this.getToken(ClickHouseParser.MOVE, 0);
};

AlterTableClauseMovePartitionContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};

AlterTableClauseMovePartitionContext.prototype.TO = function() {
    return this.getToken(ClickHouseParser.TO, 0);
};

AlterTableClauseMovePartitionContext.prototype.DISK = function() {
    return this.getToken(ClickHouseParser.DISK, 0);
};

AlterTableClauseMovePartitionContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

AlterTableClauseMovePartitionContext.prototype.VOLUME = function() {
    return this.getToken(ClickHouseParser.VOLUME, 0);
};

AlterTableClauseMovePartitionContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

AlterTableClauseMovePartitionContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};
AlterTableClauseMovePartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseMovePartition(this);
	}
};

AlterTableClauseMovePartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseMovePartition(this);
	}
};

AlterTableClauseMovePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseMovePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseRenameContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseRenameContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseRenameContext.prototype.constructor = AlterTableClauseRenameContext;

ClickHouseParser.AlterTableClauseRenameContext = AlterTableClauseRenameContext;

AlterTableClauseRenameContext.prototype.RENAME = function() {
    return this.getToken(ClickHouseParser.RENAME, 0);
};

AlterTableClauseRenameContext.prototype.COLUMN = function() {
    return this.getToken(ClickHouseParser.COLUMN, 0);
};

AlterTableClauseRenameContext.prototype.nestedIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NestedIdentifierContext);
    } else {
        return this.getTypedRuleContext(NestedIdentifierContext,i);
    }
};

AlterTableClauseRenameContext.prototype.TO = function() {
    return this.getToken(ClickHouseParser.TO, 0);
};

AlterTableClauseRenameContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseRenameContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};
AlterTableClauseRenameContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseRename(this);
	}
};

AlterTableClauseRenameContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseRename(this);
	}
};

AlterTableClauseRenameContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseRename(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseFreezePartitionContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseFreezePartitionContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseFreezePartitionContext.prototype.constructor = AlterTableClauseFreezePartitionContext;

ClickHouseParser.AlterTableClauseFreezePartitionContext = AlterTableClauseFreezePartitionContext;

AlterTableClauseFreezePartitionContext.prototype.FREEZE = function() {
    return this.getToken(ClickHouseParser.FREEZE, 0);
};

AlterTableClauseFreezePartitionContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};
AlterTableClauseFreezePartitionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseFreezePartition(this);
	}
};

AlterTableClauseFreezePartitionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseFreezePartition(this);
	}
};

AlterTableClauseFreezePartitionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseFreezePartition(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseClearColumnContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseClearColumnContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseClearColumnContext.prototype.constructor = AlterTableClauseClearColumnContext;

ClickHouseParser.AlterTableClauseClearColumnContext = AlterTableClauseClearColumnContext;

AlterTableClauseClearColumnContext.prototype.CLEAR = function() {
    return this.getToken(ClickHouseParser.CLEAR, 0);
};

AlterTableClauseClearColumnContext.prototype.COLUMN = function() {
    return this.getToken(ClickHouseParser.COLUMN, 0);
};

AlterTableClauseClearColumnContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseClearColumnContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseClearColumnContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

AlterTableClauseClearColumnContext.prototype.IN = function() {
    return this.getToken(ClickHouseParser.IN, 0);
};

AlterTableClauseClearColumnContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};
AlterTableClauseClearColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseClearColumn(this);
	}
};

AlterTableClauseClearColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseClearColumn(this);
	}
};

AlterTableClauseClearColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseClearColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseModifyContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseModifyContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseModifyContext.prototype.constructor = AlterTableClauseModifyContext;

ClickHouseParser.AlterTableClauseModifyContext = AlterTableClauseModifyContext;

AlterTableClauseModifyContext.prototype.MODIFY = function() {
    return this.getToken(ClickHouseParser.MODIFY, 0);
};

AlterTableClauseModifyContext.prototype.COLUMN = function() {
    return this.getToken(ClickHouseParser.COLUMN, 0);
};

AlterTableClauseModifyContext.prototype.tableColumnDfnt = function() {
    return this.getTypedRuleContext(TableColumnDfntContext,0);
};

AlterTableClauseModifyContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseModifyContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};
AlterTableClauseModifyContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseModify(this);
	}
};

AlterTableClauseModifyContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseModify(this);
	}
};

AlterTableClauseModifyContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseModify(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseClearIndexContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseClearIndexContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseClearIndexContext.prototype.constructor = AlterTableClauseClearIndexContext;

ClickHouseParser.AlterTableClauseClearIndexContext = AlterTableClauseClearIndexContext;

AlterTableClauseClearIndexContext.prototype.CLEAR = function() {
    return this.getToken(ClickHouseParser.CLEAR, 0);
};

AlterTableClauseClearIndexContext.prototype.INDEX = function() {
    return this.getToken(ClickHouseParser.INDEX, 0);
};

AlterTableClauseClearIndexContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseClearIndexContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseClearIndexContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

AlterTableClauseClearIndexContext.prototype.IN = function() {
    return this.getToken(ClickHouseParser.IN, 0);
};

AlterTableClauseClearIndexContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};
AlterTableClauseClearIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseClearIndex(this);
	}
};

AlterTableClauseClearIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseClearIndex(this);
	}
};

AlterTableClauseClearIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseClearIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseRemoveTTLContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseRemoveTTLContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseRemoveTTLContext.prototype.constructor = AlterTableClauseRemoveTTLContext;

ClickHouseParser.AlterTableClauseRemoveTTLContext = AlterTableClauseRemoveTTLContext;

AlterTableClauseRemoveTTLContext.prototype.REMOVE = function() {
    return this.getToken(ClickHouseParser.REMOVE, 0);
};

AlterTableClauseRemoveTTLContext.prototype.TTL = function() {
    return this.getToken(ClickHouseParser.TTL, 0);
};
AlterTableClauseRemoveTTLContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseRemoveTTL(this);
	}
};

AlterTableClauseRemoveTTLContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseRemoveTTL(this);
	}
};

AlterTableClauseRemoveTTLContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseRemoveTTL(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseModifyCodecContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseModifyCodecContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseModifyCodecContext.prototype.constructor = AlterTableClauseModifyCodecContext;

ClickHouseParser.AlterTableClauseModifyCodecContext = AlterTableClauseModifyCodecContext;

AlterTableClauseModifyCodecContext.prototype.MODIFY = function() {
    return this.getToken(ClickHouseParser.MODIFY, 0);
};

AlterTableClauseModifyCodecContext.prototype.COLUMN = function() {
    return this.getToken(ClickHouseParser.COLUMN, 0);
};

AlterTableClauseModifyCodecContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseModifyCodecContext.prototype.codecExpr = function() {
    return this.getTypedRuleContext(CodecExprContext,0);
};

AlterTableClauseModifyCodecContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseModifyCodecContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};
AlterTableClauseModifyCodecContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseModifyCodec(this);
	}
};

AlterTableClauseModifyCodecContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseModifyCodec(this);
	}
};

AlterTableClauseModifyCodecContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseModifyCodec(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseAttachContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseAttachContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseAttachContext.prototype.constructor = AlterTableClauseAttachContext;

ClickHouseParser.AlterTableClauseAttachContext = AlterTableClauseAttachContext;

AlterTableClauseAttachContext.prototype.ATTACH = function() {
    return this.getToken(ClickHouseParser.ATTACH, 0);
};

AlterTableClauseAttachContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};

AlterTableClauseAttachContext.prototype.FROM = function() {
    return this.getToken(ClickHouseParser.FROM, 0);
};

AlterTableClauseAttachContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};
AlterTableClauseAttachContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseAttach(this);
	}
};

AlterTableClauseAttachContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseAttach(this);
	}
};

AlterTableClauseAttachContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseAttach(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseDropProjectionContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseDropProjectionContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseDropProjectionContext.prototype.constructor = AlterTableClauseDropProjectionContext;

ClickHouseParser.AlterTableClauseDropProjectionContext = AlterTableClauseDropProjectionContext;

AlterTableClauseDropProjectionContext.prototype.DROP = function() {
    return this.getToken(ClickHouseParser.DROP, 0);
};

AlterTableClauseDropProjectionContext.prototype.PROJECTION = function() {
    return this.getToken(ClickHouseParser.PROJECTION, 0);
};

AlterTableClauseDropProjectionContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseDropProjectionContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseDropProjectionContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};
AlterTableClauseDropProjectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseDropProjection(this);
	}
};

AlterTableClauseDropProjectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseDropProjection(this);
	}
};

AlterTableClauseDropProjectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseDropProjection(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseDropIndexContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseDropIndexContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseDropIndexContext.prototype.constructor = AlterTableClauseDropIndexContext;

ClickHouseParser.AlterTableClauseDropIndexContext = AlterTableClauseDropIndexContext;

AlterTableClauseDropIndexContext.prototype.DROP = function() {
    return this.getToken(ClickHouseParser.DROP, 0);
};

AlterTableClauseDropIndexContext.prototype.INDEX = function() {
    return this.getToken(ClickHouseParser.INDEX, 0);
};

AlterTableClauseDropIndexContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseDropIndexContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseDropIndexContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};
AlterTableClauseDropIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseDropIndex(this);
	}
};

AlterTableClauseDropIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseDropIndex(this);
	}
};

AlterTableClauseDropIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseDropIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseModifyCommentContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseModifyCommentContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseModifyCommentContext.prototype.constructor = AlterTableClauseModifyCommentContext;

ClickHouseParser.AlterTableClauseModifyCommentContext = AlterTableClauseModifyCommentContext;

AlterTableClauseModifyCommentContext.prototype.MODIFY = function() {
    return this.getToken(ClickHouseParser.MODIFY, 0);
};

AlterTableClauseModifyCommentContext.prototype.COLUMN = function() {
    return this.getToken(ClickHouseParser.COLUMN, 0);
};

AlterTableClauseModifyCommentContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AlterTableClauseModifyCommentContext.prototype.COMMENT = function() {
    return this.getToken(ClickHouseParser.COMMENT, 0);
};

AlterTableClauseModifyCommentContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

AlterTableClauseModifyCommentContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseModifyCommentContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};
AlterTableClauseModifyCommentContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseModifyComment(this);
	}
};

AlterTableClauseModifyCommentContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseModifyComment(this);
	}
};

AlterTableClauseModifyCommentContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseModifyComment(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseModifyTTLContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseModifyTTLContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseModifyTTLContext.prototype.constructor = AlterTableClauseModifyTTLContext;

ClickHouseParser.AlterTableClauseModifyTTLContext = AlterTableClauseModifyTTLContext;

AlterTableClauseModifyTTLContext.prototype.MODIFY = function() {
    return this.getToken(ClickHouseParser.MODIFY, 0);
};

AlterTableClauseModifyTTLContext.prototype.ttlClause = function() {
    return this.getTypedRuleContext(TtlClauseContext,0);
};
AlterTableClauseModifyTTLContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseModifyTTL(this);
	}
};

AlterTableClauseModifyTTLContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseModifyTTL(this);
	}
};

AlterTableClauseModifyTTLContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseModifyTTL(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseAddProjectionContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseAddProjectionContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseAddProjectionContext.prototype.constructor = AlterTableClauseAddProjectionContext;

ClickHouseParser.AlterTableClauseAddProjectionContext = AlterTableClauseAddProjectionContext;

AlterTableClauseAddProjectionContext.prototype.ADD = function() {
    return this.getToken(ClickHouseParser.ADD, 0);
};

AlterTableClauseAddProjectionContext.prototype.PROJECTION = function() {
    return this.getToken(ClickHouseParser.PROJECTION, 0);
};

AlterTableClauseAddProjectionContext.prototype.tableProjectionDfnt = function() {
    return this.getTypedRuleContext(TableProjectionDfntContext,0);
};

AlterTableClauseAddProjectionContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseAddProjectionContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

AlterTableClauseAddProjectionContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

AlterTableClauseAddProjectionContext.prototype.AFTER = function() {
    return this.getToken(ClickHouseParser.AFTER, 0);
};

AlterTableClauseAddProjectionContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};
AlterTableClauseAddProjectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseAddProjection(this);
	}
};

AlterTableClauseAddProjectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseAddProjection(this);
	}
};

AlterTableClauseAddProjectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseAddProjection(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function AlterTableClauseAddColumnContext(parser, ctx) {
	AlterTableClauseContext.call(this, parser);
    AlterTableClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AlterTableClauseAddColumnContext.prototype = Object.create(AlterTableClauseContext.prototype);
AlterTableClauseAddColumnContext.prototype.constructor = AlterTableClauseAddColumnContext;

ClickHouseParser.AlterTableClauseAddColumnContext = AlterTableClauseAddColumnContext;

AlterTableClauseAddColumnContext.prototype.ADD = function() {
    return this.getToken(ClickHouseParser.ADD, 0);
};

AlterTableClauseAddColumnContext.prototype.COLUMN = function() {
    return this.getToken(ClickHouseParser.COLUMN, 0);
};

AlterTableClauseAddColumnContext.prototype.tableColumnDfnt = function() {
    return this.getTypedRuleContext(TableColumnDfntContext,0);
};

AlterTableClauseAddColumnContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

AlterTableClauseAddColumnContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

AlterTableClauseAddColumnContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

AlterTableClauseAddColumnContext.prototype.AFTER = function() {
    return this.getToken(ClickHouseParser.AFTER, 0);
};

AlterTableClauseAddColumnContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};
AlterTableClauseAddColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlterTableClauseAddColumn(this);
	}
};

AlterTableClauseAddColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlterTableClauseAddColumn(this);
	}
};

AlterTableClauseAddColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlterTableClauseAddColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.AlterTableClauseContext = AlterTableClauseContext;

ClickHouseParser.prototype.alterTableClause = function() {

    var localctx = new AlterTableClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 8, ClickHouseParser.RULE_alterTableClause);
    var _la = 0; // Token type
    try {
        this.state = 512;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,37,this._ctx);
        switch(la_) {
        case 1:
            localctx = new AlterTableClauseAddColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 298;
            this.match(ClickHouseParser.ADD);
            this.state = 299;
            this.match(ClickHouseParser.COLUMN);
            this.state = 303;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,9,this._ctx);
            if(la_===1) {
                this.state = 300;
                this.match(ClickHouseParser.IF);
                this.state = 301;
                this.match(ClickHouseParser.NOT);
                this.state = 302;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 305;
            this.tableColumnDfnt();
            this.state = 308;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.AFTER) {
                this.state = 306;
                this.match(ClickHouseParser.AFTER);
                this.state = 307;
                this.nestedIdentifier();
            }

            break;

        case 2:
            localctx = new AlterTableClauseAddIndexContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 310;
            this.match(ClickHouseParser.ADD);
            this.state = 311;
            this.match(ClickHouseParser.INDEX);
            this.state = 315;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,11,this._ctx);
            if(la_===1) {
                this.state = 312;
                this.match(ClickHouseParser.IF);
                this.state = 313;
                this.match(ClickHouseParser.NOT);
                this.state = 314;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 317;
            this.tableIndexDfnt();
            this.state = 320;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.AFTER) {
                this.state = 318;
                this.match(ClickHouseParser.AFTER);
                this.state = 319;
                this.nestedIdentifier();
            }

            break;

        case 3:
            localctx = new AlterTableClauseAddProjectionContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 322;
            this.match(ClickHouseParser.ADD);
            this.state = 323;
            this.match(ClickHouseParser.PROJECTION);
            this.state = 327;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,13,this._ctx);
            if(la_===1) {
                this.state = 324;
                this.match(ClickHouseParser.IF);
                this.state = 325;
                this.match(ClickHouseParser.NOT);
                this.state = 326;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 329;
            this.tableProjectionDfnt();
            this.state = 332;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.AFTER) {
                this.state = 330;
                this.match(ClickHouseParser.AFTER);
                this.state = 331;
                this.nestedIdentifier();
            }

            break;

        case 4:
            localctx = new AlterTableClauseAttachContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 334;
            this.match(ClickHouseParser.ATTACH);
            this.state = 335;
            this.partitionClause();
            this.state = 338;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.FROM) {
                this.state = 336;
                this.match(ClickHouseParser.FROM);
                this.state = 337;
                this.tableIdentifier();
            }

            break;

        case 5:
            localctx = new AlterTableClauseClearColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 340;
            this.match(ClickHouseParser.CLEAR);
            this.state = 341;
            this.match(ClickHouseParser.COLUMN);
            this.state = 344;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,16,this._ctx);
            if(la_===1) {
                this.state = 342;
                this.match(ClickHouseParser.IF);
                this.state = 343;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 346;
            this.nestedIdentifier();
            this.state = 349;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.IN) {
                this.state = 347;
                this.match(ClickHouseParser.IN);
                this.state = 348;
                this.partitionClause();
            }

            break;

        case 6:
            localctx = new AlterTableClauseClearIndexContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 351;
            this.match(ClickHouseParser.CLEAR);
            this.state = 352;
            this.match(ClickHouseParser.INDEX);
            this.state = 355;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,18,this._ctx);
            if(la_===1) {
                this.state = 353;
                this.match(ClickHouseParser.IF);
                this.state = 354;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 357;
            this.nestedIdentifier();
            this.state = 360;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.IN) {
                this.state = 358;
                this.match(ClickHouseParser.IN);
                this.state = 359;
                this.partitionClause();
            }

            break;

        case 7:
            localctx = new AlterTableClauseClearProjectionContext(this, localctx);
            this.enterOuterAlt(localctx, 7);
            this.state = 362;
            this.match(ClickHouseParser.CLEAR);
            this.state = 363;
            this.match(ClickHouseParser.PROJECTION);
            this.state = 366;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,20,this._ctx);
            if(la_===1) {
                this.state = 364;
                this.match(ClickHouseParser.IF);
                this.state = 365;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 368;
            this.nestedIdentifier();
            this.state = 371;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.IN) {
                this.state = 369;
                this.match(ClickHouseParser.IN);
                this.state = 370;
                this.partitionClause();
            }

            break;

        case 8:
            localctx = new AlterTableClauseCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 8);
            this.state = 373;
            this.match(ClickHouseParser.COMMENT);
            this.state = 374;
            this.match(ClickHouseParser.COLUMN);
            this.state = 377;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,22,this._ctx);
            if(la_===1) {
                this.state = 375;
                this.match(ClickHouseParser.IF);
                this.state = 376;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 379;
            this.nestedIdentifier();
            this.state = 380;
            this.match(ClickHouseParser.STRING_LITERAL);
            break;

        case 9:
            localctx = new AlterTableClauseDeleteContext(this, localctx);
            this.enterOuterAlt(localctx, 9);
            this.state = 382;
            this.match(ClickHouseParser.DELETE);
            this.state = 383;
            this.match(ClickHouseParser.WHERE);
            this.state = 384;
            this.columnExpr(0);
            break;

        case 10:
            localctx = new AlterTableClauseDetachContext(this, localctx);
            this.enterOuterAlt(localctx, 10);
            this.state = 385;
            this.match(ClickHouseParser.DETACH);
            this.state = 386;
            this.partitionClause();
            break;

        case 11:
            localctx = new AlterTableClauseDropColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 11);
            this.state = 387;
            this.match(ClickHouseParser.DROP);
            this.state = 388;
            this.match(ClickHouseParser.COLUMN);
            this.state = 391;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,23,this._ctx);
            if(la_===1) {
                this.state = 389;
                this.match(ClickHouseParser.IF);
                this.state = 390;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 393;
            this.nestedIdentifier();
            break;

        case 12:
            localctx = new AlterTableClauseDropIndexContext(this, localctx);
            this.enterOuterAlt(localctx, 12);
            this.state = 394;
            this.match(ClickHouseParser.DROP);
            this.state = 395;
            this.match(ClickHouseParser.INDEX);
            this.state = 398;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,24,this._ctx);
            if(la_===1) {
                this.state = 396;
                this.match(ClickHouseParser.IF);
                this.state = 397;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 400;
            this.nestedIdentifier();
            break;

        case 13:
            localctx = new AlterTableClauseDropProjectionContext(this, localctx);
            this.enterOuterAlt(localctx, 13);
            this.state = 401;
            this.match(ClickHouseParser.DROP);
            this.state = 402;
            this.match(ClickHouseParser.PROJECTION);
            this.state = 405;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,25,this._ctx);
            if(la_===1) {
                this.state = 403;
                this.match(ClickHouseParser.IF);
                this.state = 404;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 407;
            this.nestedIdentifier();
            break;

        case 14:
            localctx = new AlterTableClauseDropPartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 14);
            this.state = 408;
            this.match(ClickHouseParser.DROP);
            this.state = 409;
            this.partitionClause();
            break;

        case 15:
            localctx = new AlterTableClauseFreezePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 15);
            this.state = 410;
            this.match(ClickHouseParser.FREEZE);
            this.state = 412;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.PARTITION) {
                this.state = 411;
                this.partitionClause();
            }

            break;

        case 16:
            localctx = new AlterTableClauseMaterializeIndexContext(this, localctx);
            this.enterOuterAlt(localctx, 16);
            this.state = 414;
            this.match(ClickHouseParser.MATERIALIZE);
            this.state = 415;
            this.match(ClickHouseParser.INDEX);
            this.state = 418;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,27,this._ctx);
            if(la_===1) {
                this.state = 416;
                this.match(ClickHouseParser.IF);
                this.state = 417;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 420;
            this.nestedIdentifier();
            this.state = 423;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.IN) {
                this.state = 421;
                this.match(ClickHouseParser.IN);
                this.state = 422;
                this.partitionClause();
            }

            break;

        case 17:
            localctx = new AlterTableClauseMaterializeProjectionContext(this, localctx);
            this.enterOuterAlt(localctx, 17);
            this.state = 425;
            this.match(ClickHouseParser.MATERIALIZE);
            this.state = 426;
            this.match(ClickHouseParser.PROJECTION);
            this.state = 429;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,29,this._ctx);
            if(la_===1) {
                this.state = 427;
                this.match(ClickHouseParser.IF);
                this.state = 428;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 431;
            this.nestedIdentifier();
            this.state = 434;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.IN) {
                this.state = 432;
                this.match(ClickHouseParser.IN);
                this.state = 433;
                this.partitionClause();
            }

            break;

        case 18:
            localctx = new AlterTableClauseModifyCodecContext(this, localctx);
            this.enterOuterAlt(localctx, 18);
            this.state = 436;
            this.match(ClickHouseParser.MODIFY);
            this.state = 437;
            this.match(ClickHouseParser.COLUMN);
            this.state = 440;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,31,this._ctx);
            if(la_===1) {
                this.state = 438;
                this.match(ClickHouseParser.IF);
                this.state = 439;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 442;
            this.nestedIdentifier();
            this.state = 443;
            this.codecExpr();
            break;

        case 19:
            localctx = new AlterTableClauseModifyCommentContext(this, localctx);
            this.enterOuterAlt(localctx, 19);
            this.state = 445;
            this.match(ClickHouseParser.MODIFY);
            this.state = 446;
            this.match(ClickHouseParser.COLUMN);
            this.state = 449;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,32,this._ctx);
            if(la_===1) {
                this.state = 447;
                this.match(ClickHouseParser.IF);
                this.state = 448;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 451;
            this.nestedIdentifier();
            this.state = 452;
            this.match(ClickHouseParser.COMMENT);
            this.state = 453;
            this.match(ClickHouseParser.STRING_LITERAL);
            break;

        case 20:
            localctx = new AlterTableClauseModifyRemoveContext(this, localctx);
            this.enterOuterAlt(localctx, 20);
            this.state = 455;
            this.match(ClickHouseParser.MODIFY);
            this.state = 456;
            this.match(ClickHouseParser.COLUMN);
            this.state = 459;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,33,this._ctx);
            if(la_===1) {
                this.state = 457;
                this.match(ClickHouseParser.IF);
                this.state = 458;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 461;
            this.nestedIdentifier();
            this.state = 462;
            this.match(ClickHouseParser.REMOVE);
            this.state = 463;
            this.tableColumnPropertyType();
            break;

        case 21:
            localctx = new AlterTableClauseModifyContext(this, localctx);
            this.enterOuterAlt(localctx, 21);
            this.state = 465;
            this.match(ClickHouseParser.MODIFY);
            this.state = 466;
            this.match(ClickHouseParser.COLUMN);
            this.state = 469;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,34,this._ctx);
            if(la_===1) {
                this.state = 467;
                this.match(ClickHouseParser.IF);
                this.state = 468;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 471;
            this.tableColumnDfnt();
            break;

        case 22:
            localctx = new AlterTableClauseModifyOrderByContext(this, localctx);
            this.enterOuterAlt(localctx, 22);
            this.state = 472;
            this.match(ClickHouseParser.MODIFY);
            this.state = 473;
            this.match(ClickHouseParser.ORDER);
            this.state = 474;
            this.match(ClickHouseParser.BY);
            this.state = 475;
            this.columnExpr(0);
            break;

        case 23:
            localctx = new AlterTableClauseModifyTTLContext(this, localctx);
            this.enterOuterAlt(localctx, 23);
            this.state = 476;
            this.match(ClickHouseParser.MODIFY);
            this.state = 477;
            this.ttlClause();
            break;

        case 24:
            localctx = new AlterTableClauseMovePartitionContext(this, localctx);
            this.enterOuterAlt(localctx, 24);
            this.state = 478;
            this.match(ClickHouseParser.MOVE);
            this.state = 479;
            this.partitionClause();
            this.state = 489;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,35,this._ctx);
            switch(la_) {
            case 1:
                this.state = 480;
                this.match(ClickHouseParser.TO);
                this.state = 481;
                this.match(ClickHouseParser.DISK);
                this.state = 482;
                this.match(ClickHouseParser.STRING_LITERAL);
                break;

            case 2:
                this.state = 483;
                this.match(ClickHouseParser.TO);
                this.state = 484;
                this.match(ClickHouseParser.VOLUME);
                this.state = 485;
                this.match(ClickHouseParser.STRING_LITERAL);
                break;

            case 3:
                this.state = 486;
                this.match(ClickHouseParser.TO);
                this.state = 487;
                this.match(ClickHouseParser.TABLE);
                this.state = 488;
                this.tableIdentifier();
                break;

            }
            break;

        case 25:
            localctx = new AlterTableClauseRemoveTTLContext(this, localctx);
            this.enterOuterAlt(localctx, 25);
            this.state = 491;
            this.match(ClickHouseParser.REMOVE);
            this.state = 492;
            this.match(ClickHouseParser.TTL);
            break;

        case 26:
            localctx = new AlterTableClauseRenameContext(this, localctx);
            this.enterOuterAlt(localctx, 26);
            this.state = 493;
            this.match(ClickHouseParser.RENAME);
            this.state = 494;
            this.match(ClickHouseParser.COLUMN);
            this.state = 497;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,36,this._ctx);
            if(la_===1) {
                this.state = 495;
                this.match(ClickHouseParser.IF);
                this.state = 496;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 499;
            this.nestedIdentifier();
            this.state = 500;
            this.match(ClickHouseParser.TO);
            this.state = 501;
            this.nestedIdentifier();
            break;

        case 27:
            localctx = new AlterTableClauseReplaceContext(this, localctx);
            this.enterOuterAlt(localctx, 27);
            this.state = 503;
            this.match(ClickHouseParser.REPLACE);
            this.state = 504;
            this.partitionClause();
            this.state = 505;
            this.match(ClickHouseParser.FROM);
            this.state = 506;
            this.tableIdentifier();
            break;

        case 28:
            localctx = new AlterTableClauseUpdateContext(this, localctx);
            this.enterOuterAlt(localctx, 28);
            this.state = 508;
            this.match(ClickHouseParser.UPDATE);
            this.state = 509;
            this.assignmentExprList();
            this.state = 510;
            this.whereClause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentExprListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_assignmentExprList;
    return this;
}

AssignmentExprListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExprListContext.prototype.constructor = AssignmentExprListContext;

AssignmentExprListContext.prototype.assignmentExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(AssignmentExprContext);
    } else {
        return this.getTypedRuleContext(AssignmentExprContext,i);
    }
};

AssignmentExprListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


AssignmentExprListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAssignmentExprList(this);
	}
};

AssignmentExprListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAssignmentExprList(this);
	}
};

AssignmentExprListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAssignmentExprList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.AssignmentExprListContext = AssignmentExprListContext;

ClickHouseParser.prototype.assignmentExprList = function() {

    var localctx = new AssignmentExprListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 10, ClickHouseParser.RULE_assignmentExprList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 514;
        this.assignmentExpr();
        this.state = 519;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ClickHouseParser.COMMA) {
            this.state = 515;
            this.match(ClickHouseParser.COMMA);
            this.state = 516;
            this.assignmentExpr();
            this.state = 521;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AssignmentExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_assignmentExpr;
    return this;
}

AssignmentExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AssignmentExprContext.prototype.constructor = AssignmentExprContext;

AssignmentExprContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

AssignmentExprContext.prototype.EQ_SINGLE = function() {
    return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
};

AssignmentExprContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

AssignmentExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAssignmentExpr(this);
	}
};

AssignmentExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAssignmentExpr(this);
	}
};

AssignmentExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAssignmentExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.AssignmentExprContext = AssignmentExprContext;

ClickHouseParser.prototype.assignmentExpr = function() {

    var localctx = new AssignmentExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 12, ClickHouseParser.RULE_assignmentExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 522;
        this.nestedIdentifier();
        this.state = 523;
        this.match(ClickHouseParser.EQ_SINGLE);
        this.state = 524;
        this.columnExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableColumnPropertyTypeContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableColumnPropertyType;
    return this;
}

TableColumnPropertyTypeContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableColumnPropertyTypeContext.prototype.constructor = TableColumnPropertyTypeContext;

TableColumnPropertyTypeContext.prototype.ALIAS = function() {
    return this.getToken(ClickHouseParser.ALIAS, 0);
};

TableColumnPropertyTypeContext.prototype.CODEC = function() {
    return this.getToken(ClickHouseParser.CODEC, 0);
};

TableColumnPropertyTypeContext.prototype.COMMENT = function() {
    return this.getToken(ClickHouseParser.COMMENT, 0);
};

TableColumnPropertyTypeContext.prototype.DEFAULT = function() {
    return this.getToken(ClickHouseParser.DEFAULT, 0);
};

TableColumnPropertyTypeContext.prototype.MATERIALIZED = function() {
    return this.getToken(ClickHouseParser.MATERIALIZED, 0);
};

TableColumnPropertyTypeContext.prototype.TTL = function() {
    return this.getToken(ClickHouseParser.TTL, 0);
};

TableColumnPropertyTypeContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableColumnPropertyType(this);
	}
};

TableColumnPropertyTypeContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableColumnPropertyType(this);
	}
};

TableColumnPropertyTypeContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableColumnPropertyType(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TableColumnPropertyTypeContext = TableColumnPropertyTypeContext;

ClickHouseParser.prototype.tableColumnPropertyType = function() {

    var localctx = new TableColumnPropertyTypeContext(this, this._ctx, this.state);
    this.enterRule(localctx, 14, ClickHouseParser.RULE_tableColumnPropertyType);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 526;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COMMENT))) !== 0) || _la===ClickHouseParser.DEFAULT || _la===ClickHouseParser.MATERIALIZED || _la===ClickHouseParser.TTL)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_partitionClause;
    return this;
}

PartitionClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionClauseContext.prototype.constructor = PartitionClauseContext;

PartitionClauseContext.prototype.PARTITION = function() {
    return this.getToken(ClickHouseParser.PARTITION, 0);
};

PartitionClauseContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

PartitionClauseContext.prototype.ID = function() {
    return this.getToken(ClickHouseParser.ID, 0);
};

PartitionClauseContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

PartitionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterPartitionClause(this);
	}
};

PartitionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitPartitionClause(this);
	}
};

PartitionClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitPartitionClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.PartitionClauseContext = PartitionClauseContext;

ClickHouseParser.prototype.partitionClause = function() {

    var localctx = new PartitionClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 16, ClickHouseParser.RULE_partitionClause);
    try {
        this.state = 533;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,39,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 528;
            this.match(ClickHouseParser.PARTITION);
            this.state = 529;
            this.columnExpr(0);
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 530;
            this.match(ClickHouseParser.PARTITION);
            this.state = 531;
            this.match(ClickHouseParser.ID);
            this.state = 532;
            this.match(ClickHouseParser.STRING_LITERAL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AttachStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_attachStmt;
    return this;
}

AttachStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AttachStmtContext.prototype.constructor = AttachStmtContext;


 
AttachStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function AttachDictionaryStmtContext(parser, ctx) {
	AttachStmtContext.call(this, parser);
    AttachStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

AttachDictionaryStmtContext.prototype = Object.create(AttachStmtContext.prototype);
AttachDictionaryStmtContext.prototype.constructor = AttachDictionaryStmtContext;

ClickHouseParser.AttachDictionaryStmtContext = AttachDictionaryStmtContext;

AttachDictionaryStmtContext.prototype.ATTACH = function() {
    return this.getToken(ClickHouseParser.ATTACH, 0);
};

AttachDictionaryStmtContext.prototype.DICTIONARY = function() {
    return this.getToken(ClickHouseParser.DICTIONARY, 0);
};

AttachDictionaryStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

AttachDictionaryStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};
AttachDictionaryStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAttachDictionaryStmt(this);
	}
};

AttachDictionaryStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAttachDictionaryStmt(this);
	}
};

AttachDictionaryStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAttachDictionaryStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.AttachStmtContext = AttachStmtContext;

ClickHouseParser.prototype.attachStmt = function() {

    var localctx = new AttachStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 18, ClickHouseParser.RULE_attachStmt);
    var _la = 0; // Token type
    try {
        localctx = new AttachDictionaryStmtContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 535;
        this.match(ClickHouseParser.ATTACH);
        this.state = 536;
        this.match(ClickHouseParser.DICTIONARY);
        this.state = 537;
        this.tableIdentifier();
        this.state = 539;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ON) {
            this.state = 538;
            this.clusterClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CheckStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_checkStmt;
    return this;
}

CheckStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CheckStmtContext.prototype.constructor = CheckStmtContext;

CheckStmtContext.prototype.CHECK = function() {
    return this.getToken(ClickHouseParser.CHECK, 0);
};

CheckStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

CheckStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CheckStmtContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};

CheckStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterCheckStmt(this);
	}
};

CheckStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitCheckStmt(this);
	}
};

CheckStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitCheckStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.CheckStmtContext = CheckStmtContext;

ClickHouseParser.prototype.checkStmt = function() {

    var localctx = new CheckStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 20, ClickHouseParser.RULE_checkStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 541;
        this.match(ClickHouseParser.CHECK);
        this.state = 542;
        this.match(ClickHouseParser.TABLE);
        this.state = 543;
        this.tableIdentifier();
        this.state = 545;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.PARTITION) {
            this.state = 544;
            this.partitionClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CreateStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_createStmt;
    return this;
}

CreateStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CreateStmtContext.prototype.constructor = CreateStmtContext;


 
CreateStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function CreateViewStmtContext(parser, ctx) {
	CreateStmtContext.call(this, parser);
    CreateStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateViewStmtContext.prototype = Object.create(CreateStmtContext.prototype);
CreateViewStmtContext.prototype.constructor = CreateViewStmtContext;

ClickHouseParser.CreateViewStmtContext = CreateViewStmtContext;

CreateViewStmtContext.prototype.VIEW = function() {
    return this.getToken(ClickHouseParser.VIEW, 0);
};

CreateViewStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CreateViewStmtContext.prototype.subqueryClause = function() {
    return this.getTypedRuleContext(SubqueryClauseContext,0);
};

CreateViewStmtContext.prototype.ATTACH = function() {
    return this.getToken(ClickHouseParser.ATTACH, 0);
};

CreateViewStmtContext.prototype.CREATE = function() {
    return this.getToken(ClickHouseParser.CREATE, 0);
};

CreateViewStmtContext.prototype.OR = function() {
    return this.getToken(ClickHouseParser.OR, 0);
};

CreateViewStmtContext.prototype.REPLACE = function() {
    return this.getToken(ClickHouseParser.REPLACE, 0);
};

CreateViewStmtContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

CreateViewStmtContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

CreateViewStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

CreateViewStmtContext.prototype.uuidClause = function() {
    return this.getTypedRuleContext(UuidClauseContext,0);
};

CreateViewStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

CreateViewStmtContext.prototype.tableSchemaClause = function() {
    return this.getTypedRuleContext(TableSchemaClauseContext,0);
};
CreateViewStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterCreateViewStmt(this);
	}
};

CreateViewStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitCreateViewStmt(this);
	}
};

CreateViewStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitCreateViewStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateDictionaryStmtContext(parser, ctx) {
	CreateStmtContext.call(this, parser);
    CreateStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateDictionaryStmtContext.prototype = Object.create(CreateStmtContext.prototype);
CreateDictionaryStmtContext.prototype.constructor = CreateDictionaryStmtContext;

ClickHouseParser.CreateDictionaryStmtContext = CreateDictionaryStmtContext;

CreateDictionaryStmtContext.prototype.DICTIONARY = function() {
    return this.getToken(ClickHouseParser.DICTIONARY, 0);
};

CreateDictionaryStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CreateDictionaryStmtContext.prototype.dictionarySchemaClause = function() {
    return this.getTypedRuleContext(DictionarySchemaClauseContext,0);
};

CreateDictionaryStmtContext.prototype.dictionaryEngineClause = function() {
    return this.getTypedRuleContext(DictionaryEngineClauseContext,0);
};

CreateDictionaryStmtContext.prototype.ATTACH = function() {
    return this.getToken(ClickHouseParser.ATTACH, 0);
};

CreateDictionaryStmtContext.prototype.CREATE = function() {
    return this.getToken(ClickHouseParser.CREATE, 0);
};

CreateDictionaryStmtContext.prototype.REPLACE = function() {
    return this.getToken(ClickHouseParser.REPLACE, 0);
};

CreateDictionaryStmtContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

CreateDictionaryStmtContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

CreateDictionaryStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

CreateDictionaryStmtContext.prototype.uuidClause = function() {
    return this.getTypedRuleContext(UuidClauseContext,0);
};

CreateDictionaryStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

CreateDictionaryStmtContext.prototype.OR = function() {
    return this.getToken(ClickHouseParser.OR, 0);
};
CreateDictionaryStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterCreateDictionaryStmt(this);
	}
};

CreateDictionaryStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitCreateDictionaryStmt(this);
	}
};

CreateDictionaryStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitCreateDictionaryStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateDatabaseStmtContext(parser, ctx) {
	CreateStmtContext.call(this, parser);
    CreateStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateDatabaseStmtContext.prototype = Object.create(CreateStmtContext.prototype);
CreateDatabaseStmtContext.prototype.constructor = CreateDatabaseStmtContext;

ClickHouseParser.CreateDatabaseStmtContext = CreateDatabaseStmtContext;

CreateDatabaseStmtContext.prototype.DATABASE = function() {
    return this.getToken(ClickHouseParser.DATABASE, 0);
};

CreateDatabaseStmtContext.prototype.databaseIdentifier = function() {
    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
};

CreateDatabaseStmtContext.prototype.ATTACH = function() {
    return this.getToken(ClickHouseParser.ATTACH, 0);
};

CreateDatabaseStmtContext.prototype.CREATE = function() {
    return this.getToken(ClickHouseParser.CREATE, 0);
};

CreateDatabaseStmtContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

CreateDatabaseStmtContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

CreateDatabaseStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

CreateDatabaseStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

CreateDatabaseStmtContext.prototype.engineExpr = function() {
    return this.getTypedRuleContext(EngineExprContext,0);
};
CreateDatabaseStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterCreateDatabaseStmt(this);
	}
};

CreateDatabaseStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitCreateDatabaseStmt(this);
	}
};

CreateDatabaseStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitCreateDatabaseStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateLiveViewStmtContext(parser, ctx) {
	CreateStmtContext.call(this, parser);
    CreateStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateLiveViewStmtContext.prototype = Object.create(CreateStmtContext.prototype);
CreateLiveViewStmtContext.prototype.constructor = CreateLiveViewStmtContext;

ClickHouseParser.CreateLiveViewStmtContext = CreateLiveViewStmtContext;

CreateLiveViewStmtContext.prototype.LIVE = function() {
    return this.getToken(ClickHouseParser.LIVE, 0);
};

CreateLiveViewStmtContext.prototype.VIEW = function() {
    return this.getToken(ClickHouseParser.VIEW, 0);
};

CreateLiveViewStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CreateLiveViewStmtContext.prototype.subqueryClause = function() {
    return this.getTypedRuleContext(SubqueryClauseContext,0);
};

CreateLiveViewStmtContext.prototype.ATTACH = function() {
    return this.getToken(ClickHouseParser.ATTACH, 0);
};

CreateLiveViewStmtContext.prototype.CREATE = function() {
    return this.getToken(ClickHouseParser.CREATE, 0);
};

CreateLiveViewStmtContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

CreateLiveViewStmtContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

CreateLiveViewStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

CreateLiveViewStmtContext.prototype.uuidClause = function() {
    return this.getTypedRuleContext(UuidClauseContext,0);
};

CreateLiveViewStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

CreateLiveViewStmtContext.prototype.WITH = function() {
    return this.getToken(ClickHouseParser.WITH, 0);
};

CreateLiveViewStmtContext.prototype.TIMEOUT = function() {
    return this.getToken(ClickHouseParser.TIMEOUT, 0);
};

CreateLiveViewStmtContext.prototype.destinationClause = function() {
    return this.getTypedRuleContext(DestinationClauseContext,0);
};

CreateLiveViewStmtContext.prototype.tableSchemaClause = function() {
    return this.getTypedRuleContext(TableSchemaClauseContext,0);
};

CreateLiveViewStmtContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
};
CreateLiveViewStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterCreateLiveViewStmt(this);
	}
};

CreateLiveViewStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitCreateLiveViewStmt(this);
	}
};

CreateLiveViewStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitCreateLiveViewStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateMaterializedViewStmtContext(parser, ctx) {
	CreateStmtContext.call(this, parser);
    CreateStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateMaterializedViewStmtContext.prototype = Object.create(CreateStmtContext.prototype);
CreateMaterializedViewStmtContext.prototype.constructor = CreateMaterializedViewStmtContext;

ClickHouseParser.CreateMaterializedViewStmtContext = CreateMaterializedViewStmtContext;

CreateMaterializedViewStmtContext.prototype.MATERIALIZED = function() {
    return this.getToken(ClickHouseParser.MATERIALIZED, 0);
};

CreateMaterializedViewStmtContext.prototype.VIEW = function() {
    return this.getToken(ClickHouseParser.VIEW, 0);
};

CreateMaterializedViewStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CreateMaterializedViewStmtContext.prototype.subqueryClause = function() {
    return this.getTypedRuleContext(SubqueryClauseContext,0);
};

CreateMaterializedViewStmtContext.prototype.ATTACH = function() {
    return this.getToken(ClickHouseParser.ATTACH, 0);
};

CreateMaterializedViewStmtContext.prototype.CREATE = function() {
    return this.getToken(ClickHouseParser.CREATE, 0);
};

CreateMaterializedViewStmtContext.prototype.destinationClause = function() {
    return this.getTypedRuleContext(DestinationClauseContext,0);
};

CreateMaterializedViewStmtContext.prototype.engineClause = function() {
    return this.getTypedRuleContext(EngineClauseContext,0);
};

CreateMaterializedViewStmtContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

CreateMaterializedViewStmtContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

CreateMaterializedViewStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

CreateMaterializedViewStmtContext.prototype.uuidClause = function() {
    return this.getTypedRuleContext(UuidClauseContext,0);
};

CreateMaterializedViewStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

CreateMaterializedViewStmtContext.prototype.tableSchemaClause = function() {
    return this.getTypedRuleContext(TableSchemaClauseContext,0);
};

CreateMaterializedViewStmtContext.prototype.POPULATE = function() {
    return this.getToken(ClickHouseParser.POPULATE, 0);
};
CreateMaterializedViewStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterCreateMaterializedViewStmt(this);
	}
};

CreateMaterializedViewStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitCreateMaterializedViewStmt(this);
	}
};

CreateMaterializedViewStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitCreateMaterializedViewStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function CreateTableStmtContext(parser, ctx) {
	CreateStmtContext.call(this, parser);
    CreateStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

CreateTableStmtContext.prototype = Object.create(CreateStmtContext.prototype);
CreateTableStmtContext.prototype.constructor = CreateTableStmtContext;

ClickHouseParser.CreateTableStmtContext = CreateTableStmtContext;

CreateTableStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

CreateTableStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

CreateTableStmtContext.prototype.ATTACH = function() {
    return this.getToken(ClickHouseParser.ATTACH, 0);
};

CreateTableStmtContext.prototype.CREATE = function() {
    return this.getToken(ClickHouseParser.CREATE, 0);
};

CreateTableStmtContext.prototype.REPLACE = function() {
    return this.getToken(ClickHouseParser.REPLACE, 0);
};

CreateTableStmtContext.prototype.TEMPORARY = function() {
    return this.getToken(ClickHouseParser.TEMPORARY, 0);
};

CreateTableStmtContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

CreateTableStmtContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

CreateTableStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

CreateTableStmtContext.prototype.uuidClause = function() {
    return this.getTypedRuleContext(UuidClauseContext,0);
};

CreateTableStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

CreateTableStmtContext.prototype.tableSchemaClause = function() {
    return this.getTypedRuleContext(TableSchemaClauseContext,0);
};

CreateTableStmtContext.prototype.engineClause = function() {
    return this.getTypedRuleContext(EngineClauseContext,0);
};

CreateTableStmtContext.prototype.subqueryClause = function() {
    return this.getTypedRuleContext(SubqueryClauseContext,0);
};

CreateTableStmtContext.prototype.OR = function() {
    return this.getToken(ClickHouseParser.OR, 0);
};
CreateTableStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterCreateTableStmt(this);
	}
};

CreateTableStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitCreateTableStmt(this);
	}
};

CreateTableStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitCreateTableStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.CreateStmtContext = CreateStmtContext;

ClickHouseParser.prototype.createStmt = function() {

    var localctx = new CreateStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 22, ClickHouseParser.RULE_createStmt);
    var _la = 0; // Token type
    try {
        this.state = 700;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,77,this._ctx);
        switch(la_) {
        case 1:
            localctx = new CreateDatabaseStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 547;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.ATTACH || _la===ClickHouseParser.CREATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 548;
            this.match(ClickHouseParser.DATABASE);
            this.state = 552;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,42,this._ctx);
            if(la_===1) {
                this.state = 549;
                this.match(ClickHouseParser.IF);
                this.state = 550;
                this.match(ClickHouseParser.NOT);
                this.state = 551;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 554;
            this.databaseIdentifier();
            this.state = 556;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ON) {
                this.state = 555;
                this.clusterClause();
            }

            this.state = 559;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ENGINE) {
                this.state = 558;
                this.engineExpr();
            }

            break;

        case 2:
            localctx = new CreateDictionaryStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 568;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ClickHouseParser.ATTACH:
                this.state = 561;
                this.match(ClickHouseParser.ATTACH);
                break;
            case ClickHouseParser.CREATE:
                this.state = 562;
                this.match(ClickHouseParser.CREATE);
                this.state = 565;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.OR) {
                    this.state = 563;
                    this.match(ClickHouseParser.OR);
                    this.state = 564;
                    this.match(ClickHouseParser.REPLACE);
                }

                break;
            case ClickHouseParser.REPLACE:
                this.state = 567;
                this.match(ClickHouseParser.REPLACE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 570;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 574;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,47,this._ctx);
            if(la_===1) {
                this.state = 571;
                this.match(ClickHouseParser.IF);
                this.state = 572;
                this.match(ClickHouseParser.NOT);
                this.state = 573;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 576;
            this.tableIdentifier();
            this.state = 578;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.UUID) {
                this.state = 577;
                this.uuidClause();
            }

            this.state = 581;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ON) {
                this.state = 580;
                this.clusterClause();
            }

            this.state = 583;
            this.dictionarySchemaClause();
            this.state = 584;
            this.dictionaryEngineClause();
            break;

        case 3:
            localctx = new CreateLiveViewStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 586;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.ATTACH || _la===ClickHouseParser.CREATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 587;
            this.match(ClickHouseParser.LIVE);
            this.state = 588;
            this.match(ClickHouseParser.VIEW);
            this.state = 592;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,50,this._ctx);
            if(la_===1) {
                this.state = 589;
                this.match(ClickHouseParser.IF);
                this.state = 590;
                this.match(ClickHouseParser.NOT);
                this.state = 591;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 594;
            this.tableIdentifier();
            this.state = 596;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.UUID) {
                this.state = 595;
                this.uuidClause();
            }

            this.state = 599;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ON) {
                this.state = 598;
                this.clusterClause();
            }

            this.state = 606;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.WITH) {
                this.state = 601;
                this.match(ClickHouseParser.WITH);
                this.state = 602;
                this.match(ClickHouseParser.TIMEOUT);
                this.state = 604;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.DECIMAL_LITERAL) {
                    this.state = 603;
                    this.match(ClickHouseParser.DECIMAL_LITERAL);
                }

            }

            this.state = 609;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.TO) {
                this.state = 608;
                this.destinationClause();
            }

            this.state = 612;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,56,this._ctx);
            if(la_===1) {
                this.state = 611;
                this.tableSchemaClause();

            }
            this.state = 614;
            this.subqueryClause();
            break;

        case 4:
            localctx = new CreateMaterializedViewStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 616;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.ATTACH || _la===ClickHouseParser.CREATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 617;
            this.match(ClickHouseParser.MATERIALIZED);
            this.state = 618;
            this.match(ClickHouseParser.VIEW);
            this.state = 622;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,57,this._ctx);
            if(la_===1) {
                this.state = 619;
                this.match(ClickHouseParser.IF);
                this.state = 620;
                this.match(ClickHouseParser.NOT);
                this.state = 621;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 624;
            this.tableIdentifier();
            this.state = 626;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.UUID) {
                this.state = 625;
                this.uuidClause();
            }

            this.state = 629;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ON) {
                this.state = 628;
                this.clusterClause();
            }

            this.state = 632;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.AS || _la===ClickHouseParser.LPAREN) {
                this.state = 631;
                this.tableSchemaClause();
            }

            this.state = 639;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ClickHouseParser.TO:
                this.state = 634;
                this.destinationClause();
                break;
            case ClickHouseParser.ENGINE:
                this.state = 635;
                this.engineClause();
                this.state = 637;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.POPULATE) {
                    this.state = 636;
                    this.match(ClickHouseParser.POPULATE);
                }

                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 641;
            this.subqueryClause();
            break;

        case 5:
            localctx = new CreateTableStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 650;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ClickHouseParser.ATTACH:
                this.state = 643;
                this.match(ClickHouseParser.ATTACH);
                break;
            case ClickHouseParser.CREATE:
                this.state = 644;
                this.match(ClickHouseParser.CREATE);
                this.state = 647;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.OR) {
                    this.state = 645;
                    this.match(ClickHouseParser.OR);
                    this.state = 646;
                    this.match(ClickHouseParser.REPLACE);
                }

                break;
            case ClickHouseParser.REPLACE:
                this.state = 649;
                this.match(ClickHouseParser.REPLACE);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 653;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.TEMPORARY) {
                this.state = 652;
                this.match(ClickHouseParser.TEMPORARY);
            }

            this.state = 655;
            this.match(ClickHouseParser.TABLE);
            this.state = 659;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,66,this._ctx);
            if(la_===1) {
                this.state = 656;
                this.match(ClickHouseParser.IF);
                this.state = 657;
                this.match(ClickHouseParser.NOT);
                this.state = 658;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 661;
            this.tableIdentifier();
            this.state = 663;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.UUID) {
                this.state = 662;
                this.uuidClause();
            }

            this.state = 666;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ON) {
                this.state = 665;
                this.clusterClause();
            }

            this.state = 669;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,69,this._ctx);
            if(la_===1) {
                this.state = 668;
                this.tableSchemaClause();

            }
            this.state = 672;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ENGINE) {
                this.state = 671;
                this.engineClause();
            }

            this.state = 675;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.AS) {
                this.state = 674;
                this.subqueryClause();
            }

            break;

        case 6:
            localctx = new CreateViewStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 677;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.ATTACH || _la===ClickHouseParser.CREATE)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 680;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.OR) {
                this.state = 678;
                this.match(ClickHouseParser.OR);
                this.state = 679;
                this.match(ClickHouseParser.REPLACE);
            }

            this.state = 682;
            this.match(ClickHouseParser.VIEW);
            this.state = 686;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,73,this._ctx);
            if(la_===1) {
                this.state = 683;
                this.match(ClickHouseParser.IF);
                this.state = 684;
                this.match(ClickHouseParser.NOT);
                this.state = 685;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 688;
            this.tableIdentifier();
            this.state = 690;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.UUID) {
                this.state = 689;
                this.uuidClause();
            }

            this.state = 693;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ON) {
                this.state = 692;
                this.clusterClause();
            }

            this.state = 696;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,76,this._ctx);
            if(la_===1) {
                this.state = 695;
                this.tableSchemaClause();

            }
            this.state = 698;
            this.subqueryClause();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DictionarySchemaClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_dictionarySchemaClause;
    return this;
}

DictionarySchemaClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionarySchemaClauseContext.prototype.constructor = DictionarySchemaClauseContext;

DictionarySchemaClauseContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

DictionarySchemaClauseContext.prototype.dictionaryAttrDfnt = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DictionaryAttrDfntContext);
    } else {
        return this.getTypedRuleContext(DictionaryAttrDfntContext,i);
    }
};

DictionarySchemaClauseContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

DictionarySchemaClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


DictionarySchemaClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDictionarySchemaClause(this);
	}
};

DictionarySchemaClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDictionarySchemaClause(this);
	}
};

DictionarySchemaClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDictionarySchemaClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.DictionarySchemaClauseContext = DictionarySchemaClauseContext;

ClickHouseParser.prototype.dictionarySchemaClause = function() {

    var localctx = new DictionarySchemaClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 24, ClickHouseParser.RULE_dictionarySchemaClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 702;
        this.match(ClickHouseParser.LPAREN);
        this.state = 703;
        this.dictionaryAttrDfnt();
        this.state = 708;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ClickHouseParser.COMMA) {
            this.state = 704;
            this.match(ClickHouseParser.COMMA);
            this.state = 705;
            this.dictionaryAttrDfnt();
            this.state = 710;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 711;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DictionaryAttrDfntContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_dictionaryAttrDfnt;
    this.attrs = null
    return this;
}

DictionaryAttrDfntContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryAttrDfntContext.prototype.constructor = DictionaryAttrDfntContext;

DictionaryAttrDfntContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DictionaryAttrDfntContext.prototype.columnTypeExpr = function() {
    return this.getTypedRuleContext(ColumnTypeExprContext,0);
};

DictionaryAttrDfntContext.prototype.DEFAULT = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.DEFAULT);
    } else {
        return this.getToken(ClickHouseParser.DEFAULT, i);
    }
};


DictionaryAttrDfntContext.prototype.literal = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LiteralContext);
    } else {
        return this.getTypedRuleContext(LiteralContext,i);
    }
};

DictionaryAttrDfntContext.prototype.EXPRESSION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.EXPRESSION);
    } else {
        return this.getToken(ClickHouseParser.EXPRESSION, i);
    }
};


DictionaryAttrDfntContext.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

DictionaryAttrDfntContext.prototype.HIERARCHICAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.HIERARCHICAL);
    } else {
        return this.getToken(ClickHouseParser.HIERARCHICAL, i);
    }
};


DictionaryAttrDfntContext.prototype.INJECTIVE = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.INJECTIVE);
    } else {
        return this.getToken(ClickHouseParser.INJECTIVE, i);
    }
};


DictionaryAttrDfntContext.prototype.IS_OBJECT_ID = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.IS_OBJECT_ID);
    } else {
        return this.getToken(ClickHouseParser.IS_OBJECT_ID, i);
    }
};


DictionaryAttrDfntContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDictionaryAttrDfnt(this);
	}
};

DictionaryAttrDfntContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDictionaryAttrDfnt(this);
	}
};

DictionaryAttrDfntContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDictionaryAttrDfnt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.DictionaryAttrDfntContext = DictionaryAttrDfntContext;

ClickHouseParser.prototype.dictionaryAttrDfnt = function() {

    var localctx = new DictionaryAttrDfntContext(this, this._ctx, this.state);
    this.enterRule(localctx, 26, ClickHouseParser.RULE_dictionaryAttrDfnt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 713;
        this.identifier();
        this.state = 714;
        this.columnTypeExpr();
        this.state = 736;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,80,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 734;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,79,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 715;
                    if (!( !localctx.attrs.count("default"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$attrs.count(\"default\")");
                    }
                    this.state = 716;
                    this.match(ClickHouseParser.DEFAULT);
                    this.state = 717;
                    this.literal();
                    localctx.attrs.insert("default");
                    break;

                case 2:
                    this.state = 720;
                    if (!( !localctx.attrs.count("expression"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$attrs.count(\"expression\")");
                    }
                    this.state = 721;
                    this.match(ClickHouseParser.EXPRESSION);
                    this.state = 722;
                    this.columnExpr(0);
                    localctx.attrs.insert("expression");
                    break;

                case 3:
                    this.state = 725;
                    if (!( !localctx.attrs.count("hierarchical"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$attrs.count(\"hierarchical\")");
                    }
                    this.state = 726;
                    this.match(ClickHouseParser.HIERARCHICAL);
                    localctx.attrs.insert("hierarchical");
                    break;

                case 4:
                    this.state = 728;
                    if (!( !localctx.attrs.count("injective"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$attrs.count(\"injective\")");
                    }
                    this.state = 729;
                    this.match(ClickHouseParser.INJECTIVE);
                    localctx.attrs.insert("injective");
                    break;

                case 5:
                    this.state = 731;
                    if (!( !localctx.attrs.count("is_object_id"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$attrs.count(\"is_object_id\")");
                    }
                    this.state = 732;
                    this.match(ClickHouseParser.IS_OBJECT_ID);
                    localctx.attrs.insert("is_object_id");
                    break;

                } 
            }
            this.state = 738;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,80,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DictionaryEngineClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_dictionaryEngineClause;
    this.clauses = null
    return this;
}

DictionaryEngineClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryEngineClauseContext.prototype.constructor = DictionaryEngineClauseContext;

DictionaryEngineClauseContext.prototype.dictionaryPrimaryKeyClause = function() {
    return this.getTypedRuleContext(DictionaryPrimaryKeyClauseContext,0);
};

DictionaryEngineClauseContext.prototype.sourceClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SourceClauseContext);
    } else {
        return this.getTypedRuleContext(SourceClauseContext,i);
    }
};

DictionaryEngineClauseContext.prototype.lifetimeClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LifetimeClauseContext);
    } else {
        return this.getTypedRuleContext(LifetimeClauseContext,i);
    }
};

DictionaryEngineClauseContext.prototype.layoutClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(LayoutClauseContext);
    } else {
        return this.getTypedRuleContext(LayoutClauseContext,i);
    }
};

DictionaryEngineClauseContext.prototype.rangeClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RangeClauseContext);
    } else {
        return this.getTypedRuleContext(RangeClauseContext,i);
    }
};

DictionaryEngineClauseContext.prototype.dictionarySettingsClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DictionarySettingsClauseContext);
    } else {
        return this.getTypedRuleContext(DictionarySettingsClauseContext,i);
    }
};

DictionaryEngineClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDictionaryEngineClause(this);
	}
};

DictionaryEngineClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDictionaryEngineClause(this);
	}
};

DictionaryEngineClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDictionaryEngineClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.DictionaryEngineClauseContext = DictionaryEngineClauseContext;

ClickHouseParser.prototype.dictionaryEngineClause = function() {

    var localctx = new DictionaryEngineClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 28, ClickHouseParser.RULE_dictionaryEngineClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 740;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,81,this._ctx);
        if(la_===1) {
            this.state = 739;
            this.dictionaryPrimaryKeyClause();

        }
        this.state = 764;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,83,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 762;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,82,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 742;
                    if (!( !localctx.clauses.count("source"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"source\")");
                    }
                    this.state = 743;
                    this.sourceClause();
                    localctx.clauses.insert("source");
                    break;

                case 2:
                    this.state = 746;
                    if (!( !localctx.clauses.count("lifetime"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"lifetime\")");
                    }
                    this.state = 747;
                    this.lifetimeClause();
                    localctx.clauses.insert("lifetime");
                    break;

                case 3:
                    this.state = 750;
                    if (!( !localctx.clauses.count("layout"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"layout\")");
                    }
                    this.state = 751;
                    this.layoutClause();
                    localctx.clauses.insert("layout");
                    break;

                case 4:
                    this.state = 754;
                    if (!( !localctx.clauses.count("range"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"range\")");
                    }
                    this.state = 755;
                    this.rangeClause();
                    localctx.clauses.insert("range");
                    break;

                case 5:
                    this.state = 758;
                    if (!( !localctx.clauses.count("settings"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"settings\")");
                    }
                    this.state = 759;
                    this.dictionarySettingsClause();
                    localctx.clauses.insert("settings");
                    break;

                } 
            }
            this.state = 766;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,83,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DictionaryPrimaryKeyClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_dictionaryPrimaryKeyClause;
    return this;
}

DictionaryPrimaryKeyClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryPrimaryKeyClauseContext.prototype.constructor = DictionaryPrimaryKeyClauseContext;

DictionaryPrimaryKeyClauseContext.prototype.PRIMARY = function() {
    return this.getToken(ClickHouseParser.PRIMARY, 0);
};

DictionaryPrimaryKeyClauseContext.prototype.KEY = function() {
    return this.getToken(ClickHouseParser.KEY, 0);
};

DictionaryPrimaryKeyClauseContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

DictionaryPrimaryKeyClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDictionaryPrimaryKeyClause(this);
	}
};

DictionaryPrimaryKeyClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDictionaryPrimaryKeyClause(this);
	}
};

DictionaryPrimaryKeyClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDictionaryPrimaryKeyClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.DictionaryPrimaryKeyClauseContext = DictionaryPrimaryKeyClauseContext;

ClickHouseParser.prototype.dictionaryPrimaryKeyClause = function() {

    var localctx = new DictionaryPrimaryKeyClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 30, ClickHouseParser.RULE_dictionaryPrimaryKeyClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 767;
        this.match(ClickHouseParser.PRIMARY);
        this.state = 768;
        this.match(ClickHouseParser.KEY);
        this.state = 769;
        this.columnExprList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DictionaryArgExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_dictionaryArgExpr;
    return this;
}

DictionaryArgExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionaryArgExprContext.prototype.constructor = DictionaryArgExprContext;

DictionaryArgExprContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

DictionaryArgExprContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

DictionaryArgExprContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

DictionaryArgExprContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

DictionaryArgExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDictionaryArgExpr(this);
	}
};

DictionaryArgExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDictionaryArgExpr(this);
	}
};

DictionaryArgExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDictionaryArgExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.DictionaryArgExprContext = DictionaryArgExprContext;

ClickHouseParser.prototype.dictionaryArgExpr = function() {

    var localctx = new DictionaryArgExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 32, ClickHouseParser.RULE_dictionaryArgExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 771;
        this.identifier();
        this.state = 778;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.AFTER:
        case ClickHouseParser.ALIAS:
        case ClickHouseParser.ALL:
        case ClickHouseParser.ALTER:
        case ClickHouseParser.AND:
        case ClickHouseParser.ANTI:
        case ClickHouseParser.ANY:
        case ClickHouseParser.ARRAY:
        case ClickHouseParser.AS:
        case ClickHouseParser.ASCENDING:
        case ClickHouseParser.ASOF:
        case ClickHouseParser.AST:
        case ClickHouseParser.ASYNC:
        case ClickHouseParser.ATTACH:
        case ClickHouseParser.BETWEEN:
        case ClickHouseParser.BOTH:
        case ClickHouseParser.BY:
        case ClickHouseParser.CASE:
        case ClickHouseParser.CAST:
        case ClickHouseParser.CHECK:
        case ClickHouseParser.CLEAR:
        case ClickHouseParser.CLUSTER:
        case ClickHouseParser.CODEC:
        case ClickHouseParser.COLLATE:
        case ClickHouseParser.COLUMN:
        case ClickHouseParser.COMMENT:
        case ClickHouseParser.CONSTRAINT:
        case ClickHouseParser.CREATE:
        case ClickHouseParser.CROSS:
        case ClickHouseParser.CUBE:
        case ClickHouseParser.CURRENT:
        case ClickHouseParser.DATABASE:
        case ClickHouseParser.DATABASES:
        case ClickHouseParser.DATE:
        case ClickHouseParser.DAY:
        case ClickHouseParser.DEDUPLICATE:
        case ClickHouseParser.DEFAULT:
        case ClickHouseParser.DELAY:
        case ClickHouseParser.DELETE:
        case ClickHouseParser.DESC:
        case ClickHouseParser.DESCENDING:
        case ClickHouseParser.DESCRIBE:
        case ClickHouseParser.DETACH:
        case ClickHouseParser.DICTIONARIES:
        case ClickHouseParser.DICTIONARY:
        case ClickHouseParser.DISK:
        case ClickHouseParser.DISTINCT:
        case ClickHouseParser.DISTRIBUTED:
        case ClickHouseParser.DROP:
        case ClickHouseParser.ELSE:
        case ClickHouseParser.END:
        case ClickHouseParser.ENGINE:
        case ClickHouseParser.EVENTS:
        case ClickHouseParser.EXISTS:
        case ClickHouseParser.EXPLAIN:
        case ClickHouseParser.EXPRESSION:
        case ClickHouseParser.EXTRACT:
        case ClickHouseParser.FETCHES:
        case ClickHouseParser.FINAL:
        case ClickHouseParser.FIRST:
        case ClickHouseParser.FLUSH:
        case ClickHouseParser.FOLLOWING:
        case ClickHouseParser.FOR:
        case ClickHouseParser.FORMAT:
        case ClickHouseParser.FREEZE:
        case ClickHouseParser.FROM:
        case ClickHouseParser.FULL:
        case ClickHouseParser.FUNCTION:
        case ClickHouseParser.GLOBAL:
        case ClickHouseParser.GRANULARITY:
        case ClickHouseParser.GROUP:
        case ClickHouseParser.HAVING:
        case ClickHouseParser.HIERARCHICAL:
        case ClickHouseParser.HOUR:
        case ClickHouseParser.ID:
        case ClickHouseParser.IF:
        case ClickHouseParser.ILIKE:
        case ClickHouseParser.IN:
        case ClickHouseParser.INDEX:
        case ClickHouseParser.INJECTIVE:
        case ClickHouseParser.INNER:
        case ClickHouseParser.INSERT:
        case ClickHouseParser.INTERVAL:
        case ClickHouseParser.INTO:
        case ClickHouseParser.IS:
        case ClickHouseParser.IS_OBJECT_ID:
        case ClickHouseParser.JOIN:
        case ClickHouseParser.KEY:
        case ClickHouseParser.KILL:
        case ClickHouseParser.LAST:
        case ClickHouseParser.LAYOUT:
        case ClickHouseParser.LEADING:
        case ClickHouseParser.LEFT:
        case ClickHouseParser.LIFETIME:
        case ClickHouseParser.LIKE:
        case ClickHouseParser.LIMIT:
        case ClickHouseParser.LIVE:
        case ClickHouseParser.LOCAL:
        case ClickHouseParser.LOGS:
        case ClickHouseParser.MATERIALIZE:
        case ClickHouseParser.MATERIALIZED:
        case ClickHouseParser.MAX:
        case ClickHouseParser.MERGES:
        case ClickHouseParser.MIN:
        case ClickHouseParser.MINUTE:
        case ClickHouseParser.MODIFY:
        case ClickHouseParser.MONTH:
        case ClickHouseParser.MOVE:
        case ClickHouseParser.MUTATION:
        case ClickHouseParser.NO:
        case ClickHouseParser.NOT:
        case ClickHouseParser.NULLS:
        case ClickHouseParser.OFFSET:
        case ClickHouseParser.ON:
        case ClickHouseParser.OPTIMIZE:
        case ClickHouseParser.OR:
        case ClickHouseParser.ORDER:
        case ClickHouseParser.OUTER:
        case ClickHouseParser.OUTFILE:
        case ClickHouseParser.OVER:
        case ClickHouseParser.PARTITION:
        case ClickHouseParser.POPULATE:
        case ClickHouseParser.PRECEDING:
        case ClickHouseParser.PREWHERE:
        case ClickHouseParser.PRIMARY:
        case ClickHouseParser.QUARTER:
        case ClickHouseParser.RANGE:
        case ClickHouseParser.RELOAD:
        case ClickHouseParser.REMOVE:
        case ClickHouseParser.RENAME:
        case ClickHouseParser.REPLACE:
        case ClickHouseParser.REPLICA:
        case ClickHouseParser.REPLICATED:
        case ClickHouseParser.RIGHT:
        case ClickHouseParser.ROLLUP:
        case ClickHouseParser.ROW:
        case ClickHouseParser.ROWS:
        case ClickHouseParser.SAMPLE:
        case ClickHouseParser.SECOND:
        case ClickHouseParser.SELECT:
        case ClickHouseParser.SEMI:
        case ClickHouseParser.SENDS:
        case ClickHouseParser.SET:
        case ClickHouseParser.SETTINGS:
        case ClickHouseParser.SHOW:
        case ClickHouseParser.SOURCE:
        case ClickHouseParser.START:
        case ClickHouseParser.STOP:
        case ClickHouseParser.SUBSTRING:
        case ClickHouseParser.SYNC:
        case ClickHouseParser.SYNTAX:
        case ClickHouseParser.SYSTEM:
        case ClickHouseParser.TABLE:
        case ClickHouseParser.TABLES:
        case ClickHouseParser.TEMPORARY:
        case ClickHouseParser.TEST:
        case ClickHouseParser.THEN:
        case ClickHouseParser.TIES:
        case ClickHouseParser.TIMEOUT:
        case ClickHouseParser.TIMESTAMP:
        case ClickHouseParser.TO:
        case ClickHouseParser.TOP:
        case ClickHouseParser.TOTALS:
        case ClickHouseParser.TRAILING:
        case ClickHouseParser.TRIM:
        case ClickHouseParser.TRUNCATE:
        case ClickHouseParser.TTL:
        case ClickHouseParser.TYPE:
        case ClickHouseParser.UNBOUNDED:
        case ClickHouseParser.UNION:
        case ClickHouseParser.UPDATE:
        case ClickHouseParser.USE:
        case ClickHouseParser.USING:
        case ClickHouseParser.UUID:
        case ClickHouseParser.VALUES:
        case ClickHouseParser.VIEW:
        case ClickHouseParser.VOLUME:
        case ClickHouseParser.WATCH:
        case ClickHouseParser.WEEK:
        case ClickHouseParser.WHEN:
        case ClickHouseParser.WHERE:
        case ClickHouseParser.WINDOW:
        case ClickHouseParser.WITH:
        case ClickHouseParser.YEAR:
        case ClickHouseParser.JSON_FALSE:
        case ClickHouseParser.JSON_TRUE:
        case ClickHouseParser.IDENTIFIER:
            this.state = 772;
            this.identifier();
            this.state = 775;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.LPAREN) {
                this.state = 773;
                this.match(ClickHouseParser.LPAREN);
                this.state = 774;
                this.match(ClickHouseParser.RPAREN);
            }

            break;
        case ClickHouseParser.INF:
        case ClickHouseParser.NAN_SQL:
        case ClickHouseParser.NULL_SQL:
        case ClickHouseParser.FLOATING_LITERAL:
        case ClickHouseParser.OCTAL_LITERAL:
        case ClickHouseParser.DECIMAL_LITERAL:
        case ClickHouseParser.HEXADECIMAL_LITERAL:
        case ClickHouseParser.STRING_LITERAL:
        case ClickHouseParser.DASH:
        case ClickHouseParser.DOT:
        case ClickHouseParser.PLUS:
            this.state = 777;
            this.literal();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SourceClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_sourceClause;
    return this;
}

SourceClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SourceClauseContext.prototype.constructor = SourceClauseContext;

SourceClauseContext.prototype.SOURCE = function() {
    return this.getToken(ClickHouseParser.SOURCE, 0);
};

SourceClauseContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.LPAREN);
    } else {
        return this.getToken(ClickHouseParser.LPAREN, i);
    }
};


SourceClauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SourceClauseContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.RPAREN);
    } else {
        return this.getToken(ClickHouseParser.RPAREN, i);
    }
};


SourceClauseContext.prototype.dictionaryArgExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DictionaryArgExprContext);
    } else {
        return this.getTypedRuleContext(DictionaryArgExprContext,i);
    }
};

SourceClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSourceClause(this);
	}
};

SourceClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSourceClause(this);
	}
};

SourceClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSourceClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SourceClauseContext = SourceClauseContext;

ClickHouseParser.prototype.sourceClause = function() {

    var localctx = new SourceClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 34, ClickHouseParser.RULE_sourceClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 780;
        this.match(ClickHouseParser.SOURCE);
        this.state = 781;
        this.match(ClickHouseParser.LPAREN);
        this.state = 782;
        this.identifier();
        this.state = 783;
        this.match(ClickHouseParser.LPAREN);
        this.state = 787;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ClickHouseParser.DATABASES - 34)) | (1 << (ClickHouseParser.DATE - 34)) | (1 << (ClickHouseParser.DAY - 34)) | (1 << (ClickHouseParser.DEDUPLICATE - 34)) | (1 << (ClickHouseParser.DEFAULT - 34)) | (1 << (ClickHouseParser.DELAY - 34)) | (1 << (ClickHouseParser.DELETE - 34)) | (1 << (ClickHouseParser.DESC - 34)) | (1 << (ClickHouseParser.DESCENDING - 34)) | (1 << (ClickHouseParser.DESCRIBE - 34)) | (1 << (ClickHouseParser.DETACH - 34)) | (1 << (ClickHouseParser.DICTIONARIES - 34)) | (1 << (ClickHouseParser.DICTIONARY - 34)) | (1 << (ClickHouseParser.DISK - 34)) | (1 << (ClickHouseParser.DISTINCT - 34)) | (1 << (ClickHouseParser.DISTRIBUTED - 34)) | (1 << (ClickHouseParser.DROP - 34)) | (1 << (ClickHouseParser.ELSE - 34)) | (1 << (ClickHouseParser.END - 34)) | (1 << (ClickHouseParser.ENGINE - 34)) | (1 << (ClickHouseParser.EVENTS - 34)) | (1 << (ClickHouseParser.EXISTS - 34)) | (1 << (ClickHouseParser.EXPLAIN - 34)) | (1 << (ClickHouseParser.EXPRESSION - 34)) | (1 << (ClickHouseParser.EXTRACT - 34)) | (1 << (ClickHouseParser.FETCHES - 34)) | (1 << (ClickHouseParser.FINAL - 34)) | (1 << (ClickHouseParser.FIRST - 34)) | (1 << (ClickHouseParser.FLUSH - 34)) | (1 << (ClickHouseParser.FOLLOWING - 34)) | (1 << (ClickHouseParser.FOR - 34)) | (1 << (ClickHouseParser.FORMAT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ClickHouseParser.LIMIT - 98)) | (1 << (ClickHouseParser.LIVE - 98)) | (1 << (ClickHouseParser.LOCAL - 98)) | (1 << (ClickHouseParser.LOGS - 98)) | (1 << (ClickHouseParser.MATERIALIZE - 98)) | (1 << (ClickHouseParser.MATERIALIZED - 98)) | (1 << (ClickHouseParser.MAX - 98)) | (1 << (ClickHouseParser.MERGES - 98)) | (1 << (ClickHouseParser.MIN - 98)) | (1 << (ClickHouseParser.MINUTE - 98)) | (1 << (ClickHouseParser.MODIFY - 98)) | (1 << (ClickHouseParser.MONTH - 98)) | (1 << (ClickHouseParser.MOVE - 98)) | (1 << (ClickHouseParser.MUTATION - 98)) | (1 << (ClickHouseParser.NO - 98)) | (1 << (ClickHouseParser.NOT - 98)) | (1 << (ClickHouseParser.NULLS - 98)) | (1 << (ClickHouseParser.OFFSET - 98)) | (1 << (ClickHouseParser.ON - 98)) | (1 << (ClickHouseParser.OPTIMIZE - 98)) | (1 << (ClickHouseParser.OR - 98)) | (1 << (ClickHouseParser.ORDER - 98)) | (1 << (ClickHouseParser.OUTER - 98)) | (1 << (ClickHouseParser.OUTFILE - 98)) | (1 << (ClickHouseParser.OVER - 98)) | (1 << (ClickHouseParser.PARTITION - 98)) | (1 << (ClickHouseParser.POPULATE - 98)) | (1 << (ClickHouseParser.PRECEDING - 98)) | (1 << (ClickHouseParser.PREWHERE - 98)) | (1 << (ClickHouseParser.PRIMARY - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (ClickHouseParser.TIES - 163)) | (1 << (ClickHouseParser.TIMEOUT - 163)) | (1 << (ClickHouseParser.TIMESTAMP - 163)) | (1 << (ClickHouseParser.TO - 163)) | (1 << (ClickHouseParser.TOP - 163)) | (1 << (ClickHouseParser.TOTALS - 163)) | (1 << (ClickHouseParser.TRAILING - 163)) | (1 << (ClickHouseParser.TRIM - 163)) | (1 << (ClickHouseParser.TRUNCATE - 163)) | (1 << (ClickHouseParser.TTL - 163)) | (1 << (ClickHouseParser.TYPE - 163)) | (1 << (ClickHouseParser.UNBOUNDED - 163)) | (1 << (ClickHouseParser.UNION - 163)) | (1 << (ClickHouseParser.UPDATE - 163)) | (1 << (ClickHouseParser.USE - 163)) | (1 << (ClickHouseParser.USING - 163)) | (1 << (ClickHouseParser.UUID - 163)) | (1 << (ClickHouseParser.VALUES - 163)) | (1 << (ClickHouseParser.VIEW - 163)) | (1 << (ClickHouseParser.VOLUME - 163)) | (1 << (ClickHouseParser.WATCH - 163)) | (1 << (ClickHouseParser.WEEK - 163)) | (1 << (ClickHouseParser.WHEN - 163)) | (1 << (ClickHouseParser.WHERE - 163)) | (1 << (ClickHouseParser.WINDOW - 163)) | (1 << (ClickHouseParser.WITH - 163)) | (1 << (ClickHouseParser.YEAR - 163)) | (1 << (ClickHouseParser.JSON_FALSE - 163)) | (1 << (ClickHouseParser.JSON_TRUE - 163)) | (1 << (ClickHouseParser.IDENTIFIER - 163)))) !== 0)) {
            this.state = 784;
            this.dictionaryArgExpr();
            this.state = 789;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 790;
        this.match(ClickHouseParser.RPAREN);
        this.state = 791;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LifetimeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_lifetimeClause;
    return this;
}

LifetimeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LifetimeClauseContext.prototype.constructor = LifetimeClauseContext;

LifetimeClauseContext.prototype.LIFETIME = function() {
    return this.getToken(ClickHouseParser.LIFETIME, 0);
};

LifetimeClauseContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

LifetimeClauseContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

LifetimeClauseContext.prototype.DECIMAL_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
    } else {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
    }
};


LifetimeClauseContext.prototype.MIN = function() {
    return this.getToken(ClickHouseParser.MIN, 0);
};

LifetimeClauseContext.prototype.MAX = function() {
    return this.getToken(ClickHouseParser.MAX, 0);
};

LifetimeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterLifetimeClause(this);
	}
};

LifetimeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitLifetimeClause(this);
	}
};

LifetimeClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitLifetimeClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.LifetimeClauseContext = LifetimeClauseContext;

ClickHouseParser.prototype.lifetimeClause = function() {

    var localctx = new LifetimeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 36, ClickHouseParser.RULE_lifetimeClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 793;
        this.match(ClickHouseParser.LIFETIME);
        this.state = 794;
        this.match(ClickHouseParser.LPAREN);
        this.state = 804;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.DECIMAL_LITERAL:
            this.state = 795;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            break;
        case ClickHouseParser.MIN:
            this.state = 796;
            this.match(ClickHouseParser.MIN);
            this.state = 797;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            this.state = 798;
            this.match(ClickHouseParser.MAX);
            this.state = 799;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            break;
        case ClickHouseParser.MAX:
            this.state = 800;
            this.match(ClickHouseParser.MAX);
            this.state = 801;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            this.state = 802;
            this.match(ClickHouseParser.MIN);
            this.state = 803;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 806;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LayoutClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_layoutClause;
    return this;
}

LayoutClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LayoutClauseContext.prototype.constructor = LayoutClauseContext;

LayoutClauseContext.prototype.LAYOUT = function() {
    return this.getToken(ClickHouseParser.LAYOUT, 0);
};

LayoutClauseContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.LPAREN);
    } else {
        return this.getToken(ClickHouseParser.LPAREN, i);
    }
};


LayoutClauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

LayoutClauseContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.RPAREN);
    } else {
        return this.getToken(ClickHouseParser.RPAREN, i);
    }
};


LayoutClauseContext.prototype.dictionaryArgExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(DictionaryArgExprContext);
    } else {
        return this.getTypedRuleContext(DictionaryArgExprContext,i);
    }
};

LayoutClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterLayoutClause(this);
	}
};

LayoutClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitLayoutClause(this);
	}
};

LayoutClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitLayoutClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.LayoutClauseContext = LayoutClauseContext;

ClickHouseParser.prototype.layoutClause = function() {

    var localctx = new LayoutClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 38, ClickHouseParser.RULE_layoutClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 808;
        this.match(ClickHouseParser.LAYOUT);
        this.state = 809;
        this.match(ClickHouseParser.LPAREN);
        this.state = 810;
        this.identifier();
        this.state = 811;
        this.match(ClickHouseParser.LPAREN);
        this.state = 815;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ClickHouseParser.DATABASES - 34)) | (1 << (ClickHouseParser.DATE - 34)) | (1 << (ClickHouseParser.DAY - 34)) | (1 << (ClickHouseParser.DEDUPLICATE - 34)) | (1 << (ClickHouseParser.DEFAULT - 34)) | (1 << (ClickHouseParser.DELAY - 34)) | (1 << (ClickHouseParser.DELETE - 34)) | (1 << (ClickHouseParser.DESC - 34)) | (1 << (ClickHouseParser.DESCENDING - 34)) | (1 << (ClickHouseParser.DESCRIBE - 34)) | (1 << (ClickHouseParser.DETACH - 34)) | (1 << (ClickHouseParser.DICTIONARIES - 34)) | (1 << (ClickHouseParser.DICTIONARY - 34)) | (1 << (ClickHouseParser.DISK - 34)) | (1 << (ClickHouseParser.DISTINCT - 34)) | (1 << (ClickHouseParser.DISTRIBUTED - 34)) | (1 << (ClickHouseParser.DROP - 34)) | (1 << (ClickHouseParser.ELSE - 34)) | (1 << (ClickHouseParser.END - 34)) | (1 << (ClickHouseParser.ENGINE - 34)) | (1 << (ClickHouseParser.EVENTS - 34)) | (1 << (ClickHouseParser.EXISTS - 34)) | (1 << (ClickHouseParser.EXPLAIN - 34)) | (1 << (ClickHouseParser.EXPRESSION - 34)) | (1 << (ClickHouseParser.EXTRACT - 34)) | (1 << (ClickHouseParser.FETCHES - 34)) | (1 << (ClickHouseParser.FINAL - 34)) | (1 << (ClickHouseParser.FIRST - 34)) | (1 << (ClickHouseParser.FLUSH - 34)) | (1 << (ClickHouseParser.FOLLOWING - 34)) | (1 << (ClickHouseParser.FOR - 34)) | (1 << (ClickHouseParser.FORMAT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ClickHouseParser.LIMIT - 98)) | (1 << (ClickHouseParser.LIVE - 98)) | (1 << (ClickHouseParser.LOCAL - 98)) | (1 << (ClickHouseParser.LOGS - 98)) | (1 << (ClickHouseParser.MATERIALIZE - 98)) | (1 << (ClickHouseParser.MATERIALIZED - 98)) | (1 << (ClickHouseParser.MAX - 98)) | (1 << (ClickHouseParser.MERGES - 98)) | (1 << (ClickHouseParser.MIN - 98)) | (1 << (ClickHouseParser.MINUTE - 98)) | (1 << (ClickHouseParser.MODIFY - 98)) | (1 << (ClickHouseParser.MONTH - 98)) | (1 << (ClickHouseParser.MOVE - 98)) | (1 << (ClickHouseParser.MUTATION - 98)) | (1 << (ClickHouseParser.NO - 98)) | (1 << (ClickHouseParser.NOT - 98)) | (1 << (ClickHouseParser.NULLS - 98)) | (1 << (ClickHouseParser.OFFSET - 98)) | (1 << (ClickHouseParser.ON - 98)) | (1 << (ClickHouseParser.OPTIMIZE - 98)) | (1 << (ClickHouseParser.OR - 98)) | (1 << (ClickHouseParser.ORDER - 98)) | (1 << (ClickHouseParser.OUTER - 98)) | (1 << (ClickHouseParser.OUTFILE - 98)) | (1 << (ClickHouseParser.OVER - 98)) | (1 << (ClickHouseParser.PARTITION - 98)) | (1 << (ClickHouseParser.POPULATE - 98)) | (1 << (ClickHouseParser.PRECEDING - 98)) | (1 << (ClickHouseParser.PREWHERE - 98)) | (1 << (ClickHouseParser.PRIMARY - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (ClickHouseParser.TIES - 163)) | (1 << (ClickHouseParser.TIMEOUT - 163)) | (1 << (ClickHouseParser.TIMESTAMP - 163)) | (1 << (ClickHouseParser.TO - 163)) | (1 << (ClickHouseParser.TOP - 163)) | (1 << (ClickHouseParser.TOTALS - 163)) | (1 << (ClickHouseParser.TRAILING - 163)) | (1 << (ClickHouseParser.TRIM - 163)) | (1 << (ClickHouseParser.TRUNCATE - 163)) | (1 << (ClickHouseParser.TTL - 163)) | (1 << (ClickHouseParser.TYPE - 163)) | (1 << (ClickHouseParser.UNBOUNDED - 163)) | (1 << (ClickHouseParser.UNION - 163)) | (1 << (ClickHouseParser.UPDATE - 163)) | (1 << (ClickHouseParser.USE - 163)) | (1 << (ClickHouseParser.USING - 163)) | (1 << (ClickHouseParser.UUID - 163)) | (1 << (ClickHouseParser.VALUES - 163)) | (1 << (ClickHouseParser.VIEW - 163)) | (1 << (ClickHouseParser.VOLUME - 163)) | (1 << (ClickHouseParser.WATCH - 163)) | (1 << (ClickHouseParser.WEEK - 163)) | (1 << (ClickHouseParser.WHEN - 163)) | (1 << (ClickHouseParser.WHERE - 163)) | (1 << (ClickHouseParser.WINDOW - 163)) | (1 << (ClickHouseParser.WITH - 163)) | (1 << (ClickHouseParser.YEAR - 163)) | (1 << (ClickHouseParser.JSON_FALSE - 163)) | (1 << (ClickHouseParser.JSON_TRUE - 163)) | (1 << (ClickHouseParser.IDENTIFIER - 163)))) !== 0)) {
            this.state = 812;
            this.dictionaryArgExpr();
            this.state = 817;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 818;
        this.match(ClickHouseParser.RPAREN);
        this.state = 819;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RangeClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_rangeClause;
    return this;
}

RangeClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RangeClauseContext.prototype.constructor = RangeClauseContext;

RangeClauseContext.prototype.RANGE = function() {
    return this.getToken(ClickHouseParser.RANGE, 0);
};

RangeClauseContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

RangeClauseContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

RangeClauseContext.prototype.MIN = function() {
    return this.getToken(ClickHouseParser.MIN, 0);
};

RangeClauseContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

RangeClauseContext.prototype.MAX = function() {
    return this.getToken(ClickHouseParser.MAX, 0);
};

RangeClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterRangeClause(this);
	}
};

RangeClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitRangeClause(this);
	}
};

RangeClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitRangeClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.RangeClauseContext = RangeClauseContext;

ClickHouseParser.prototype.rangeClause = function() {

    var localctx = new RangeClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 40, ClickHouseParser.RULE_rangeClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 821;
        this.match(ClickHouseParser.RANGE);
        this.state = 822;
        this.match(ClickHouseParser.LPAREN);
        this.state = 833;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.MIN:
            this.state = 823;
            this.match(ClickHouseParser.MIN);
            this.state = 824;
            this.identifier();
            this.state = 825;
            this.match(ClickHouseParser.MAX);
            this.state = 826;
            this.identifier();
            break;
        case ClickHouseParser.MAX:
            this.state = 828;
            this.match(ClickHouseParser.MAX);
            this.state = 829;
            this.identifier();
            this.state = 830;
            this.match(ClickHouseParser.MIN);
            this.state = 831;
            this.identifier();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 835;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DictionarySettingsClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_dictionarySettingsClause;
    return this;
}

DictionarySettingsClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DictionarySettingsClauseContext.prototype.constructor = DictionarySettingsClauseContext;

DictionarySettingsClauseContext.prototype.SETTINGS = function() {
    return this.getToken(ClickHouseParser.SETTINGS, 0);
};

DictionarySettingsClauseContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

DictionarySettingsClauseContext.prototype.settingExprList = function() {
    return this.getTypedRuleContext(SettingExprListContext,0);
};

DictionarySettingsClauseContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

DictionarySettingsClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDictionarySettingsClause(this);
	}
};

DictionarySettingsClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDictionarySettingsClause(this);
	}
};

DictionarySettingsClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDictionarySettingsClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.DictionarySettingsClauseContext = DictionarySettingsClauseContext;

ClickHouseParser.prototype.dictionarySettingsClause = function() {

    var localctx = new DictionarySettingsClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 42, ClickHouseParser.RULE_dictionarySettingsClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 837;
        this.match(ClickHouseParser.SETTINGS);
        this.state = 838;
        this.match(ClickHouseParser.LPAREN);
        this.state = 839;
        this.settingExprList();
        this.state = 840;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ClusterClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_clusterClause;
    return this;
}

ClusterClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ClusterClauseContext.prototype.constructor = ClusterClauseContext;

ClusterClauseContext.prototype.ON = function() {
    return this.getToken(ClickHouseParser.ON, 0);
};

ClusterClauseContext.prototype.CLUSTER = function() {
    return this.getToken(ClickHouseParser.CLUSTER, 0);
};

ClusterClauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ClusterClauseContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

ClusterClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterClusterClause(this);
	}
};

ClusterClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitClusterClause(this);
	}
};

ClusterClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitClusterClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.ClusterClauseContext = ClusterClauseContext;

ClickHouseParser.prototype.clusterClause = function() {

    var localctx = new ClusterClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 44, ClickHouseParser.RULE_clusterClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 842;
        this.match(ClickHouseParser.ON);
        this.state = 843;
        this.match(ClickHouseParser.CLUSTER);
        this.state = 846;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.AFTER:
        case ClickHouseParser.ALIAS:
        case ClickHouseParser.ALL:
        case ClickHouseParser.ALTER:
        case ClickHouseParser.AND:
        case ClickHouseParser.ANTI:
        case ClickHouseParser.ANY:
        case ClickHouseParser.ARRAY:
        case ClickHouseParser.AS:
        case ClickHouseParser.ASCENDING:
        case ClickHouseParser.ASOF:
        case ClickHouseParser.AST:
        case ClickHouseParser.ASYNC:
        case ClickHouseParser.ATTACH:
        case ClickHouseParser.BETWEEN:
        case ClickHouseParser.BOTH:
        case ClickHouseParser.BY:
        case ClickHouseParser.CASE:
        case ClickHouseParser.CAST:
        case ClickHouseParser.CHECK:
        case ClickHouseParser.CLEAR:
        case ClickHouseParser.CLUSTER:
        case ClickHouseParser.CODEC:
        case ClickHouseParser.COLLATE:
        case ClickHouseParser.COLUMN:
        case ClickHouseParser.COMMENT:
        case ClickHouseParser.CONSTRAINT:
        case ClickHouseParser.CREATE:
        case ClickHouseParser.CROSS:
        case ClickHouseParser.CUBE:
        case ClickHouseParser.CURRENT:
        case ClickHouseParser.DATABASE:
        case ClickHouseParser.DATABASES:
        case ClickHouseParser.DATE:
        case ClickHouseParser.DAY:
        case ClickHouseParser.DEDUPLICATE:
        case ClickHouseParser.DEFAULT:
        case ClickHouseParser.DELAY:
        case ClickHouseParser.DELETE:
        case ClickHouseParser.DESC:
        case ClickHouseParser.DESCENDING:
        case ClickHouseParser.DESCRIBE:
        case ClickHouseParser.DETACH:
        case ClickHouseParser.DICTIONARIES:
        case ClickHouseParser.DICTIONARY:
        case ClickHouseParser.DISK:
        case ClickHouseParser.DISTINCT:
        case ClickHouseParser.DISTRIBUTED:
        case ClickHouseParser.DROP:
        case ClickHouseParser.ELSE:
        case ClickHouseParser.END:
        case ClickHouseParser.ENGINE:
        case ClickHouseParser.EVENTS:
        case ClickHouseParser.EXISTS:
        case ClickHouseParser.EXPLAIN:
        case ClickHouseParser.EXPRESSION:
        case ClickHouseParser.EXTRACT:
        case ClickHouseParser.FETCHES:
        case ClickHouseParser.FINAL:
        case ClickHouseParser.FIRST:
        case ClickHouseParser.FLUSH:
        case ClickHouseParser.FOLLOWING:
        case ClickHouseParser.FOR:
        case ClickHouseParser.FORMAT:
        case ClickHouseParser.FREEZE:
        case ClickHouseParser.FROM:
        case ClickHouseParser.FULL:
        case ClickHouseParser.FUNCTION:
        case ClickHouseParser.GLOBAL:
        case ClickHouseParser.GRANULARITY:
        case ClickHouseParser.GROUP:
        case ClickHouseParser.HAVING:
        case ClickHouseParser.HIERARCHICAL:
        case ClickHouseParser.HOUR:
        case ClickHouseParser.ID:
        case ClickHouseParser.IF:
        case ClickHouseParser.ILIKE:
        case ClickHouseParser.IN:
        case ClickHouseParser.INDEX:
        case ClickHouseParser.INJECTIVE:
        case ClickHouseParser.INNER:
        case ClickHouseParser.INSERT:
        case ClickHouseParser.INTERVAL:
        case ClickHouseParser.INTO:
        case ClickHouseParser.IS:
        case ClickHouseParser.IS_OBJECT_ID:
        case ClickHouseParser.JOIN:
        case ClickHouseParser.KEY:
        case ClickHouseParser.KILL:
        case ClickHouseParser.LAST:
        case ClickHouseParser.LAYOUT:
        case ClickHouseParser.LEADING:
        case ClickHouseParser.LEFT:
        case ClickHouseParser.LIFETIME:
        case ClickHouseParser.LIKE:
        case ClickHouseParser.LIMIT:
        case ClickHouseParser.LIVE:
        case ClickHouseParser.LOCAL:
        case ClickHouseParser.LOGS:
        case ClickHouseParser.MATERIALIZE:
        case ClickHouseParser.MATERIALIZED:
        case ClickHouseParser.MAX:
        case ClickHouseParser.MERGES:
        case ClickHouseParser.MIN:
        case ClickHouseParser.MINUTE:
        case ClickHouseParser.MODIFY:
        case ClickHouseParser.MONTH:
        case ClickHouseParser.MOVE:
        case ClickHouseParser.MUTATION:
        case ClickHouseParser.NO:
        case ClickHouseParser.NOT:
        case ClickHouseParser.NULLS:
        case ClickHouseParser.OFFSET:
        case ClickHouseParser.ON:
        case ClickHouseParser.OPTIMIZE:
        case ClickHouseParser.OR:
        case ClickHouseParser.ORDER:
        case ClickHouseParser.OUTER:
        case ClickHouseParser.OUTFILE:
        case ClickHouseParser.OVER:
        case ClickHouseParser.PARTITION:
        case ClickHouseParser.POPULATE:
        case ClickHouseParser.PRECEDING:
        case ClickHouseParser.PREWHERE:
        case ClickHouseParser.PRIMARY:
        case ClickHouseParser.QUARTER:
        case ClickHouseParser.RANGE:
        case ClickHouseParser.RELOAD:
        case ClickHouseParser.REMOVE:
        case ClickHouseParser.RENAME:
        case ClickHouseParser.REPLACE:
        case ClickHouseParser.REPLICA:
        case ClickHouseParser.REPLICATED:
        case ClickHouseParser.RIGHT:
        case ClickHouseParser.ROLLUP:
        case ClickHouseParser.ROW:
        case ClickHouseParser.ROWS:
        case ClickHouseParser.SAMPLE:
        case ClickHouseParser.SECOND:
        case ClickHouseParser.SELECT:
        case ClickHouseParser.SEMI:
        case ClickHouseParser.SENDS:
        case ClickHouseParser.SET:
        case ClickHouseParser.SETTINGS:
        case ClickHouseParser.SHOW:
        case ClickHouseParser.SOURCE:
        case ClickHouseParser.START:
        case ClickHouseParser.STOP:
        case ClickHouseParser.SUBSTRING:
        case ClickHouseParser.SYNC:
        case ClickHouseParser.SYNTAX:
        case ClickHouseParser.SYSTEM:
        case ClickHouseParser.TABLE:
        case ClickHouseParser.TABLES:
        case ClickHouseParser.TEMPORARY:
        case ClickHouseParser.TEST:
        case ClickHouseParser.THEN:
        case ClickHouseParser.TIES:
        case ClickHouseParser.TIMEOUT:
        case ClickHouseParser.TIMESTAMP:
        case ClickHouseParser.TO:
        case ClickHouseParser.TOP:
        case ClickHouseParser.TOTALS:
        case ClickHouseParser.TRAILING:
        case ClickHouseParser.TRIM:
        case ClickHouseParser.TRUNCATE:
        case ClickHouseParser.TTL:
        case ClickHouseParser.TYPE:
        case ClickHouseParser.UNBOUNDED:
        case ClickHouseParser.UNION:
        case ClickHouseParser.UPDATE:
        case ClickHouseParser.USE:
        case ClickHouseParser.USING:
        case ClickHouseParser.UUID:
        case ClickHouseParser.VALUES:
        case ClickHouseParser.VIEW:
        case ClickHouseParser.VOLUME:
        case ClickHouseParser.WATCH:
        case ClickHouseParser.WEEK:
        case ClickHouseParser.WHEN:
        case ClickHouseParser.WHERE:
        case ClickHouseParser.WINDOW:
        case ClickHouseParser.WITH:
        case ClickHouseParser.YEAR:
        case ClickHouseParser.JSON_FALSE:
        case ClickHouseParser.JSON_TRUE:
        case ClickHouseParser.IDENTIFIER:
            this.state = 844;
            this.identifier();
            break;
        case ClickHouseParser.STRING_LITERAL:
            this.state = 845;
            this.match(ClickHouseParser.STRING_LITERAL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UuidClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_uuidClause;
    return this;
}

UuidClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UuidClauseContext.prototype.constructor = UuidClauseContext;

UuidClauseContext.prototype.UUID = function() {
    return this.getToken(ClickHouseParser.UUID, 0);
};

UuidClauseContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

UuidClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterUuidClause(this);
	}
};

UuidClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitUuidClause(this);
	}
};

UuidClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitUuidClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.UuidClauseContext = UuidClauseContext;

ClickHouseParser.prototype.uuidClause = function() {

    var localctx = new UuidClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 46, ClickHouseParser.RULE_uuidClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 848;
        this.match(ClickHouseParser.UUID);
        this.state = 849;
        this.match(ClickHouseParser.STRING_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DestinationClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_destinationClause;
    return this;
}

DestinationClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DestinationClauseContext.prototype.constructor = DestinationClauseContext;

DestinationClauseContext.prototype.TO = function() {
    return this.getToken(ClickHouseParser.TO, 0);
};

DestinationClauseContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

DestinationClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDestinationClause(this);
	}
};

DestinationClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDestinationClause(this);
	}
};

DestinationClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDestinationClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.DestinationClauseContext = DestinationClauseContext;

ClickHouseParser.prototype.destinationClause = function() {

    var localctx = new DestinationClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 48, ClickHouseParser.RULE_destinationClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 851;
        this.match(ClickHouseParser.TO);
        this.state = 852;
        this.tableIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SubqueryClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_subqueryClause;
    return this;
}

SubqueryClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SubqueryClauseContext.prototype.constructor = SubqueryClauseContext;

SubqueryClauseContext.prototype.AS = function() {
    return this.getToken(ClickHouseParser.AS, 0);
};

SubqueryClauseContext.prototype.selectUnionStmt = function() {
    return this.getTypedRuleContext(SelectUnionStmtContext,0);
};

SubqueryClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSubqueryClause(this);
	}
};

SubqueryClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSubqueryClause(this);
	}
};

SubqueryClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSubqueryClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SubqueryClauseContext = SubqueryClauseContext;

ClickHouseParser.prototype.subqueryClause = function() {

    var localctx = new SubqueryClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 50, ClickHouseParser.RULE_subqueryClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 854;
        this.match(ClickHouseParser.AS);
        this.state = 855;
        this.selectUnionStmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableSchemaClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableSchemaClause;
    return this;
}

TableSchemaClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableSchemaClauseContext.prototype.constructor = TableSchemaClauseContext;


 
TableSchemaClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function SchemaAsTableClauseContext(parser, ctx) {
	TableSchemaClauseContext.call(this, parser);
    TableSchemaClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaAsTableClauseContext.prototype = Object.create(TableSchemaClauseContext.prototype);
SchemaAsTableClauseContext.prototype.constructor = SchemaAsTableClauseContext;

ClickHouseParser.SchemaAsTableClauseContext = SchemaAsTableClauseContext;

SchemaAsTableClauseContext.prototype.AS = function() {
    return this.getToken(ClickHouseParser.AS, 0);
};

SchemaAsTableClauseContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};
SchemaAsTableClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSchemaAsTableClause(this);
	}
};

SchemaAsTableClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSchemaAsTableClause(this);
	}
};

SchemaAsTableClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSchemaAsTableClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SchemaAsFunctionClauseContext(parser, ctx) {
	TableSchemaClauseContext.call(this, parser);
    TableSchemaClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaAsFunctionClauseContext.prototype = Object.create(TableSchemaClauseContext.prototype);
SchemaAsFunctionClauseContext.prototype.constructor = SchemaAsFunctionClauseContext;

ClickHouseParser.SchemaAsFunctionClauseContext = SchemaAsFunctionClauseContext;

SchemaAsFunctionClauseContext.prototype.AS = function() {
    return this.getToken(ClickHouseParser.AS, 0);
};

SchemaAsFunctionClauseContext.prototype.tableFunctionExpr = function() {
    return this.getTypedRuleContext(TableFunctionExprContext,0);
};
SchemaAsFunctionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSchemaAsFunctionClause(this);
	}
};

SchemaAsFunctionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSchemaAsFunctionClause(this);
	}
};

SchemaAsFunctionClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSchemaAsFunctionClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function SchemaDescriptionClauseContext(parser, ctx) {
	TableSchemaClauseContext.call(this, parser);
    TableSchemaClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

SchemaDescriptionClauseContext.prototype = Object.create(TableSchemaClauseContext.prototype);
SchemaDescriptionClauseContext.prototype.constructor = SchemaDescriptionClauseContext;

ClickHouseParser.SchemaDescriptionClauseContext = SchemaDescriptionClauseContext;

SchemaDescriptionClauseContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

SchemaDescriptionClauseContext.prototype.tableElementExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableElementExprContext);
    } else {
        return this.getTypedRuleContext(TableElementExprContext,i);
    }
};

SchemaDescriptionClauseContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

SchemaDescriptionClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};

SchemaDescriptionClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSchemaDescriptionClause(this);
	}
};

SchemaDescriptionClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSchemaDescriptionClause(this);
	}
};

SchemaDescriptionClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSchemaDescriptionClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.TableSchemaClauseContext = TableSchemaClauseContext;

ClickHouseParser.prototype.tableSchemaClause = function() {

    var localctx = new TableSchemaClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 52, ClickHouseParser.RULE_tableSchemaClause);
    var _la = 0; // Token type
    try {
        this.state = 872;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,92,this._ctx);
        switch(la_) {
        case 1:
            localctx = new SchemaDescriptionClauseContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 857;
            this.match(ClickHouseParser.LPAREN);
            this.state = 858;
            this.tableElementExpr();
            this.state = 863;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ClickHouseParser.COMMA) {
                this.state = 859;
                this.match(ClickHouseParser.COMMA);
                this.state = 860;
                this.tableElementExpr();
                this.state = 865;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 866;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 2:
            localctx = new SchemaAsTableClauseContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 868;
            this.match(ClickHouseParser.AS);
            this.state = 869;
            this.tableIdentifier();
            break;

        case 3:
            localctx = new SchemaAsFunctionClauseContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 870;
            this.match(ClickHouseParser.AS);
            this.state = 871;
            this.tableFunctionExpr();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EngineClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_engineClause;
    this.clauses = null
    return this;
}

EngineClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EngineClauseContext.prototype.constructor = EngineClauseContext;

EngineClauseContext.prototype.engineExpr = function() {
    return this.getTypedRuleContext(EngineExprContext,0);
};

EngineClauseContext.prototype.orderByClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderByClauseContext);
    } else {
        return this.getTypedRuleContext(OrderByClauseContext,i);
    }
};

EngineClauseContext.prototype.partitionByClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PartitionByClauseContext);
    } else {
        return this.getTypedRuleContext(PartitionByClauseContext,i);
    }
};

EngineClauseContext.prototype.primaryKeyClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(PrimaryKeyClauseContext);
    } else {
        return this.getTypedRuleContext(PrimaryKeyClauseContext,i);
    }
};

EngineClauseContext.prototype.sampleByClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SampleByClauseContext);
    } else {
        return this.getTypedRuleContext(SampleByClauseContext,i);
    }
};

EngineClauseContext.prototype.ttlClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TtlClauseContext);
    } else {
        return this.getTypedRuleContext(TtlClauseContext,i);
    }
};

EngineClauseContext.prototype.settingsClause = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SettingsClauseContext);
    } else {
        return this.getTypedRuleContext(SettingsClauseContext,i);
    }
};

EngineClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterEngineClause(this);
	}
};

EngineClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitEngineClause(this);
	}
};

EngineClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitEngineClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.EngineClauseContext = EngineClauseContext;

ClickHouseParser.prototype.engineClause = function() {

    var localctx = new EngineClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 54, ClickHouseParser.RULE_engineClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 874;
        this.engineExpr();
        this.state = 901;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,94,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 899;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,93,this._ctx);
                switch(la_) {
                case 1:
                    this.state = 875;
                    if (!( !localctx.clauses.count("orderByClause"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"orderByClause\")");
                    }
                    this.state = 876;
                    this.orderByClause();
                    localctx.clauses.insert("orderByClause");
                    break;

                case 2:
                    this.state = 879;
                    if (!( !localctx.clauses.count("partitionByClause"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"partitionByClause\")");
                    }
                    this.state = 880;
                    this.partitionByClause();
                    localctx.clauses.insert("partitionByClause");
                    break;

                case 3:
                    this.state = 883;
                    if (!( !localctx.clauses.count("primaryKeyClause"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"primaryKeyClause\")");
                    }
                    this.state = 884;
                    this.primaryKeyClause();
                    localctx.clauses.insert("primaryKeyClause");
                    break;

                case 4:
                    this.state = 887;
                    if (!( !localctx.clauses.count("sampleByClause"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"sampleByClause\")");
                    }
                    this.state = 888;
                    this.sampleByClause();
                    localctx.clauses.insert("sampleByClause");
                    break;

                case 5:
                    this.state = 891;
                    if (!( !localctx.clauses.count("ttlClause"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"ttlClause\")");
                    }
                    this.state = 892;
                    this.ttlClause();
                    localctx.clauses.insert("ttlClause");
                    break;

                case 6:
                    this.state = 895;
                    if (!( !localctx.clauses.count("settingsClause"))) {
                        throw new antlr4.error.FailedPredicateException(this, "!$clauses.count(\"settingsClause\")");
                    }
                    this.state = 896;
                    this.settingsClause();
                    localctx.clauses.insert("settingsClause");
                    break;

                } 
            }
            this.state = 903;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,94,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PartitionByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_partitionByClause;
    return this;
}

PartitionByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PartitionByClauseContext.prototype.constructor = PartitionByClauseContext;

PartitionByClauseContext.prototype.PARTITION = function() {
    return this.getToken(ClickHouseParser.PARTITION, 0);
};

PartitionByClauseContext.prototype.BY = function() {
    return this.getToken(ClickHouseParser.BY, 0);
};

PartitionByClauseContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

PartitionByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterPartitionByClause(this);
	}
};

PartitionByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitPartitionByClause(this);
	}
};

PartitionByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitPartitionByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.PartitionByClauseContext = PartitionByClauseContext;

ClickHouseParser.prototype.partitionByClause = function() {

    var localctx = new PartitionByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 56, ClickHouseParser.RULE_partitionByClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 904;
        this.match(ClickHouseParser.PARTITION);
        this.state = 905;
        this.match(ClickHouseParser.BY);
        this.state = 906;
        this.columnExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrimaryKeyClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_primaryKeyClause;
    return this;
}

PrimaryKeyClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrimaryKeyClauseContext.prototype.constructor = PrimaryKeyClauseContext;

PrimaryKeyClauseContext.prototype.PRIMARY = function() {
    return this.getToken(ClickHouseParser.PRIMARY, 0);
};

PrimaryKeyClauseContext.prototype.KEY = function() {
    return this.getToken(ClickHouseParser.KEY, 0);
};

PrimaryKeyClauseContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

PrimaryKeyClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterPrimaryKeyClause(this);
	}
};

PrimaryKeyClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitPrimaryKeyClause(this);
	}
};

PrimaryKeyClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitPrimaryKeyClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.PrimaryKeyClauseContext = PrimaryKeyClauseContext;

ClickHouseParser.prototype.primaryKeyClause = function() {

    var localctx = new PrimaryKeyClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 58, ClickHouseParser.RULE_primaryKeyClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 908;
        this.match(ClickHouseParser.PRIMARY);
        this.state = 909;
        this.match(ClickHouseParser.KEY);
        this.state = 910;
        this.columnExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SampleByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_sampleByClause;
    return this;
}

SampleByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleByClauseContext.prototype.constructor = SampleByClauseContext;

SampleByClauseContext.prototype.SAMPLE = function() {
    return this.getToken(ClickHouseParser.SAMPLE, 0);
};

SampleByClauseContext.prototype.BY = function() {
    return this.getToken(ClickHouseParser.BY, 0);
};

SampleByClauseContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

SampleByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSampleByClause(this);
	}
};

SampleByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSampleByClause(this);
	}
};

SampleByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSampleByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SampleByClauseContext = SampleByClauseContext;

ClickHouseParser.prototype.sampleByClause = function() {

    var localctx = new SampleByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 60, ClickHouseParser.RULE_sampleByClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 912;
        this.match(ClickHouseParser.SAMPLE);
        this.state = 913;
        this.match(ClickHouseParser.BY);
        this.state = 914;
        this.columnExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TtlClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_ttlClause;
    return this;
}

TtlClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TtlClauseContext.prototype.constructor = TtlClauseContext;

TtlClauseContext.prototype.TTL = function() {
    return this.getToken(ClickHouseParser.TTL, 0);
};

TtlClauseContext.prototype.ttlExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TtlExprContext);
    } else {
        return this.getTypedRuleContext(TtlExprContext,i);
    }
};

TtlClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


TtlClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTtlClause(this);
	}
};

TtlClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTtlClause(this);
	}
};

TtlClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTtlClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TtlClauseContext = TtlClauseContext;

ClickHouseParser.prototype.ttlClause = function() {

    var localctx = new TtlClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 62, ClickHouseParser.RULE_ttlClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 916;
        this.match(ClickHouseParser.TTL);
        this.state = 917;
        this.ttlExpr();
        this.state = 922;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,95,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 918;
                this.match(ClickHouseParser.COMMA);
                this.state = 919;
                this.ttlExpr(); 
            }
            this.state = 924;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,95,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EngineExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_engineExpr;
    return this;
}

EngineExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EngineExprContext.prototype.constructor = EngineExprContext;

EngineExprContext.prototype.ENGINE = function() {
    return this.getToken(ClickHouseParser.ENGINE, 0);
};

EngineExprContext.prototype.identifierOrNull = function() {
    return this.getTypedRuleContext(IdentifierOrNullContext,0);
};

EngineExprContext.prototype.EQ_SINGLE = function() {
    return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
};

EngineExprContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

EngineExprContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

EngineExprContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

EngineExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterEngineExpr(this);
	}
};

EngineExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitEngineExpr(this);
	}
};

EngineExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitEngineExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.EngineExprContext = EngineExprContext;

ClickHouseParser.prototype.engineExpr = function() {

    var localctx = new EngineExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 64, ClickHouseParser.RULE_engineExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 925;
        this.match(ClickHouseParser.ENGINE);
        this.state = 927;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.EQ_SINGLE) {
            this.state = 926;
            this.match(ClickHouseParser.EQ_SINGLE);
        }

        this.state = 929;
        this.identifierOrNull();
        this.state = 935;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,98,this._ctx);
        if(la_===1) {
            this.state = 930;
            this.match(ClickHouseParser.LPAREN);
            this.state = 932;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
                this.state = 931;
                this.columnExprList();
            }

            this.state = 934;
            this.match(ClickHouseParser.RPAREN);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableElementExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableElementExpr;
    return this;
}

TableElementExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableElementExprContext.prototype.constructor = TableElementExprContext;


 
TableElementExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function TableElementExprProjectionContext(parser, ctx) {
	TableElementExprContext.call(this, parser);
    TableElementExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableElementExprProjectionContext.prototype = Object.create(TableElementExprContext.prototype);
TableElementExprProjectionContext.prototype.constructor = TableElementExprProjectionContext;

ClickHouseParser.TableElementExprProjectionContext = TableElementExprProjectionContext;

TableElementExprProjectionContext.prototype.PROJECTION = function() {
    return this.getToken(ClickHouseParser.PROJECTION, 0);
};

TableElementExprProjectionContext.prototype.tableProjectionDfnt = function() {
    return this.getTypedRuleContext(TableProjectionDfntContext,0);
};
TableElementExprProjectionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableElementExprProjection(this);
	}
};

TableElementExprProjectionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableElementExprProjection(this);
	}
};

TableElementExprProjectionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableElementExprProjection(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableElementExprConstraintContext(parser, ctx) {
	TableElementExprContext.call(this, parser);
    TableElementExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableElementExprConstraintContext.prototype = Object.create(TableElementExprContext.prototype);
TableElementExprConstraintContext.prototype.constructor = TableElementExprConstraintContext;

ClickHouseParser.TableElementExprConstraintContext = TableElementExprConstraintContext;

TableElementExprConstraintContext.prototype.CONSTRAINT = function() {
    return this.getToken(ClickHouseParser.CONSTRAINT, 0);
};

TableElementExprConstraintContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TableElementExprConstraintContext.prototype.CHECK = function() {
    return this.getToken(ClickHouseParser.CHECK, 0);
};

TableElementExprConstraintContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};
TableElementExprConstraintContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableElementExprConstraint(this);
	}
};

TableElementExprConstraintContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableElementExprConstraint(this);
	}
};

TableElementExprConstraintContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableElementExprConstraint(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableElementExprColumnContext(parser, ctx) {
	TableElementExprContext.call(this, parser);
    TableElementExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableElementExprColumnContext.prototype = Object.create(TableElementExprContext.prototype);
TableElementExprColumnContext.prototype.constructor = TableElementExprColumnContext;

ClickHouseParser.TableElementExprColumnContext = TableElementExprColumnContext;

TableElementExprColumnContext.prototype.tableColumnDfnt = function() {
    return this.getTypedRuleContext(TableColumnDfntContext,0);
};
TableElementExprColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableElementExprColumn(this);
	}
};

TableElementExprColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableElementExprColumn(this);
	}
};

TableElementExprColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableElementExprColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableElementExprIndexContext(parser, ctx) {
	TableElementExprContext.call(this, parser);
    TableElementExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableElementExprIndexContext.prototype = Object.create(TableElementExprContext.prototype);
TableElementExprIndexContext.prototype.constructor = TableElementExprIndexContext;

ClickHouseParser.TableElementExprIndexContext = TableElementExprIndexContext;

TableElementExprIndexContext.prototype.INDEX = function() {
    return this.getToken(ClickHouseParser.INDEX, 0);
};

TableElementExprIndexContext.prototype.tableIndexDfnt = function() {
    return this.getTypedRuleContext(TableIndexDfntContext,0);
};
TableElementExprIndexContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableElementExprIndex(this);
	}
};

TableElementExprIndexContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableElementExprIndex(this);
	}
};

TableElementExprIndexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableElementExprIndex(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.TableElementExprContext = TableElementExprContext;

ClickHouseParser.prototype.tableElementExpr = function() {

    var localctx = new TableElementExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 66, ClickHouseParser.RULE_tableElementExpr);
    try {
        this.state = 947;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,99,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableElementExprColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 937;
            this.tableColumnDfnt();
            break;

        case 2:
            localctx = new TableElementExprConstraintContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 938;
            this.match(ClickHouseParser.CONSTRAINT);
            this.state = 939;
            this.identifier();
            this.state = 940;
            this.match(ClickHouseParser.CHECK);
            this.state = 941;
            this.columnExpr(0);
            break;

        case 3:
            localctx = new TableElementExprIndexContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 943;
            this.match(ClickHouseParser.INDEX);
            this.state = 944;
            this.tableIndexDfnt();
            break;

        case 4:
            localctx = new TableElementExprProjectionContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 945;
            this.match(ClickHouseParser.PROJECTION);
            this.state = 946;
            this.tableProjectionDfnt();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableColumnDfntContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableColumnDfnt;
    return this;
}

TableColumnDfntContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableColumnDfntContext.prototype.constructor = TableColumnDfntContext;

TableColumnDfntContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

TableColumnDfntContext.prototype.columnTypeExpr = function() {
    return this.getTypedRuleContext(ColumnTypeExprContext,0);
};

TableColumnDfntContext.prototype.tableColumnPropertyExpr = function() {
    return this.getTypedRuleContext(TableColumnPropertyExprContext,0);
};

TableColumnDfntContext.prototype.COMMENT = function() {
    return this.getToken(ClickHouseParser.COMMENT, 0);
};

TableColumnDfntContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

TableColumnDfntContext.prototype.codecExpr = function() {
    return this.getTypedRuleContext(CodecExprContext,0);
};

TableColumnDfntContext.prototype.TTL = function() {
    return this.getToken(ClickHouseParser.TTL, 0);
};

TableColumnDfntContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

TableColumnDfntContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableColumnDfnt(this);
	}
};

TableColumnDfntContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableColumnDfnt(this);
	}
};

TableColumnDfntContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableColumnDfnt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TableColumnDfntContext = TableColumnDfntContext;

ClickHouseParser.prototype.tableColumnDfnt = function() {

    var localctx = new TableColumnDfntContext(this, this._ctx, this.state);
    this.enterRule(localctx, 68, ClickHouseParser.RULE_tableColumnDfnt);
    var _la = 0; // Token type
    try {
        this.state = 981;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,108,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 949;
            this.nestedIdentifier();
            this.state = 950;
            this.columnTypeExpr();
            this.state = 952;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ALIAS || _la===ClickHouseParser.DEFAULT || _la===ClickHouseParser.MATERIALIZED) {
                this.state = 951;
                this.tableColumnPropertyExpr();
            }

            this.state = 956;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.COMMENT) {
                this.state = 954;
                this.match(ClickHouseParser.COMMENT);
                this.state = 955;
                this.match(ClickHouseParser.STRING_LITERAL);
            }

            this.state = 959;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.CODEC) {
                this.state = 958;
                this.codecExpr();
            }

            this.state = 963;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.TTL) {
                this.state = 961;
                this.match(ClickHouseParser.TTL);
                this.state = 962;
                this.columnExpr(0);
            }

            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 965;
            this.nestedIdentifier();
            this.state = 967;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,104,this._ctx);
            if(la_===1) {
                this.state = 966;
                this.columnTypeExpr();

            }
            this.state = 969;
            this.tableColumnPropertyExpr();
            this.state = 972;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.COMMENT) {
                this.state = 970;
                this.match(ClickHouseParser.COMMENT);
                this.state = 971;
                this.match(ClickHouseParser.STRING_LITERAL);
            }

            this.state = 975;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.CODEC) {
                this.state = 974;
                this.codecExpr();
            }

            this.state = 979;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.TTL) {
                this.state = 977;
                this.match(ClickHouseParser.TTL);
                this.state = 978;
                this.columnExpr(0);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableColumnPropertyExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableColumnPropertyExpr;
    return this;
}

TableColumnPropertyExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableColumnPropertyExprContext.prototype.constructor = TableColumnPropertyExprContext;

TableColumnPropertyExprContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

TableColumnPropertyExprContext.prototype.DEFAULT = function() {
    return this.getToken(ClickHouseParser.DEFAULT, 0);
};

TableColumnPropertyExprContext.prototype.MATERIALIZED = function() {
    return this.getToken(ClickHouseParser.MATERIALIZED, 0);
};

TableColumnPropertyExprContext.prototype.ALIAS = function() {
    return this.getToken(ClickHouseParser.ALIAS, 0);
};

TableColumnPropertyExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableColumnPropertyExpr(this);
	}
};

TableColumnPropertyExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableColumnPropertyExpr(this);
	}
};

TableColumnPropertyExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableColumnPropertyExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TableColumnPropertyExprContext = TableColumnPropertyExprContext;

ClickHouseParser.prototype.tableColumnPropertyExpr = function() {

    var localctx = new TableColumnPropertyExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 70, ClickHouseParser.RULE_tableColumnPropertyExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 983;
        _la = this._input.LA(1);
        if(!(_la===ClickHouseParser.ALIAS || _la===ClickHouseParser.DEFAULT || _la===ClickHouseParser.MATERIALIZED)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 984;
        this.columnExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableIndexDfntContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableIndexDfnt;
    return this;
}

TableIndexDfntContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableIndexDfntContext.prototype.constructor = TableIndexDfntContext;

TableIndexDfntContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

TableIndexDfntContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

TableIndexDfntContext.prototype.TYPE = function() {
    return this.getToken(ClickHouseParser.TYPE, 0);
};

TableIndexDfntContext.prototype.columnTypeExpr = function() {
    return this.getTypedRuleContext(ColumnTypeExprContext,0);
};

TableIndexDfntContext.prototype.GRANULARITY = function() {
    return this.getToken(ClickHouseParser.GRANULARITY, 0);
};

TableIndexDfntContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
};

TableIndexDfntContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableIndexDfnt(this);
	}
};

TableIndexDfntContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableIndexDfnt(this);
	}
};

TableIndexDfntContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableIndexDfnt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TableIndexDfntContext = TableIndexDfntContext;

ClickHouseParser.prototype.tableIndexDfnt = function() {

    var localctx = new TableIndexDfntContext(this, this._ctx, this.state);
    this.enterRule(localctx, 72, ClickHouseParser.RULE_tableIndexDfnt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 986;
        this.nestedIdentifier();
        this.state = 987;
        this.columnExpr(0);
        this.state = 988;
        this.match(ClickHouseParser.TYPE);
        this.state = 989;
        this.columnTypeExpr();
        this.state = 990;
        this.match(ClickHouseParser.GRANULARITY);
        this.state = 991;
        this.match(ClickHouseParser.DECIMAL_LITERAL);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableProjectionDfntContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableProjectionDfnt;
    return this;
}

TableProjectionDfntContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableProjectionDfntContext.prototype.constructor = TableProjectionDfntContext;

TableProjectionDfntContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

TableProjectionDfntContext.prototype.projectionSelectStmt = function() {
    return this.getTypedRuleContext(ProjectionSelectStmtContext,0);
};

TableProjectionDfntContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableProjectionDfnt(this);
	}
};

TableProjectionDfntContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableProjectionDfnt(this);
	}
};

TableProjectionDfntContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableProjectionDfnt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TableProjectionDfntContext = TableProjectionDfntContext;

ClickHouseParser.prototype.tableProjectionDfnt = function() {

    var localctx = new TableProjectionDfntContext(this, this._ctx, this.state);
    this.enterRule(localctx, 74, ClickHouseParser.RULE_tableProjectionDfnt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 993;
        this.nestedIdentifier();
        this.state = 994;
        this.projectionSelectStmt();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodecExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_codecExpr;
    return this;
}

CodecExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodecExprContext.prototype.constructor = CodecExprContext;

CodecExprContext.prototype.CODEC = function() {
    return this.getToken(ClickHouseParser.CODEC, 0);
};

CodecExprContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

CodecExprContext.prototype.codecArgExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(CodecArgExprContext);
    } else {
        return this.getTypedRuleContext(CodecArgExprContext,i);
    }
};

CodecExprContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

CodecExprContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


CodecExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterCodecExpr(this);
	}
};

CodecExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitCodecExpr(this);
	}
};

CodecExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitCodecExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.CodecExprContext = CodecExprContext;

ClickHouseParser.prototype.codecExpr = function() {

    var localctx = new CodecExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 76, ClickHouseParser.RULE_codecExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 996;
        this.match(ClickHouseParser.CODEC);
        this.state = 997;
        this.match(ClickHouseParser.LPAREN);
        this.state = 998;
        this.codecArgExpr();
        this.state = 1003;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ClickHouseParser.COMMA) {
            this.state = 999;
            this.match(ClickHouseParser.COMMA);
            this.state = 1000;
            this.codecArgExpr();
            this.state = 1005;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1006;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function CodecArgExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_codecArgExpr;
    return this;
}

CodecArgExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
CodecArgExprContext.prototype.constructor = CodecArgExprContext;

CodecArgExprContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

CodecArgExprContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

CodecArgExprContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

CodecArgExprContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

CodecArgExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterCodecArgExpr(this);
	}
};

CodecArgExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitCodecArgExpr(this);
	}
};

CodecArgExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitCodecArgExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.CodecArgExprContext = CodecArgExprContext;

ClickHouseParser.prototype.codecArgExpr = function() {

    var localctx = new CodecArgExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 78, ClickHouseParser.RULE_codecArgExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1008;
        this.identifier();
        this.state = 1014;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.LPAREN) {
            this.state = 1009;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1011;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
                this.state = 1010;
                this.columnExprList();
            }

            this.state = 1013;
            this.match(ClickHouseParser.RPAREN);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TtlExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_ttlExpr;
    return this;
}

TtlExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TtlExprContext.prototype.constructor = TtlExprContext;

TtlExprContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

TtlExprContext.prototype.DELETE = function() {
    return this.getToken(ClickHouseParser.DELETE, 0);
};

TtlExprContext.prototype.TO = function() {
    return this.getToken(ClickHouseParser.TO, 0);
};

TtlExprContext.prototype.DISK = function() {
    return this.getToken(ClickHouseParser.DISK, 0);
};

TtlExprContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

TtlExprContext.prototype.VOLUME = function() {
    return this.getToken(ClickHouseParser.VOLUME, 0);
};

TtlExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTtlExpr(this);
	}
};

TtlExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTtlExpr(this);
	}
};

TtlExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTtlExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TtlExprContext = TtlExprContext;

ClickHouseParser.prototype.ttlExpr = function() {

    var localctx = new TtlExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 80, ClickHouseParser.RULE_ttlExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1016;
        this.columnExpr(0);
        this.state = 1024;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,112,this._ctx);
        if(la_===1) {
            this.state = 1017;
            this.match(ClickHouseParser.DELETE);

        } else if(la_===2) {
            this.state = 1018;
            this.match(ClickHouseParser.TO);
            this.state = 1019;
            this.match(ClickHouseParser.DISK);
            this.state = 1020;
            this.match(ClickHouseParser.STRING_LITERAL);

        } else if(la_===3) {
            this.state = 1021;
            this.match(ClickHouseParser.TO);
            this.state = 1022;
            this.match(ClickHouseParser.VOLUME);
            this.state = 1023;
            this.match(ClickHouseParser.STRING_LITERAL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DescribeStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_describeStmt;
    return this;
}

DescribeStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DescribeStmtContext.prototype.constructor = DescribeStmtContext;

DescribeStmtContext.prototype.tableExpr = function() {
    return this.getTypedRuleContext(TableExprContext,0);
};

DescribeStmtContext.prototype.DESCRIBE = function() {
    return this.getToken(ClickHouseParser.DESCRIBE, 0);
};

DescribeStmtContext.prototype.DESC = function() {
    return this.getToken(ClickHouseParser.DESC, 0);
};

DescribeStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

DescribeStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDescribeStmt(this);
	}
};

DescribeStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDescribeStmt(this);
	}
};

DescribeStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDescribeStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.DescribeStmtContext = DescribeStmtContext;

ClickHouseParser.prototype.describeStmt = function() {

    var localctx = new DescribeStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 82, ClickHouseParser.RULE_describeStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1026;
        _la = this._input.LA(1);
        if(!(_la===ClickHouseParser.DESC || _la===ClickHouseParser.DESCRIBE)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1028;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,113,this._ctx);
        if(la_===1) {
            this.state = 1027;
            this.match(ClickHouseParser.TABLE);

        }
        this.state = 1030;
        this.tableExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DropStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_dropStmt;
    return this;
}

DropStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DropStmtContext.prototype.constructor = DropStmtContext;


 
DropStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DropDatabaseStmtContext(parser, ctx) {
	DropStmtContext.call(this, parser);
    DropStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropDatabaseStmtContext.prototype = Object.create(DropStmtContext.prototype);
DropDatabaseStmtContext.prototype.constructor = DropDatabaseStmtContext;

ClickHouseParser.DropDatabaseStmtContext = DropDatabaseStmtContext;

DropDatabaseStmtContext.prototype.DATABASE = function() {
    return this.getToken(ClickHouseParser.DATABASE, 0);
};

DropDatabaseStmtContext.prototype.databaseIdentifier = function() {
    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
};

DropDatabaseStmtContext.prototype.DETACH = function() {
    return this.getToken(ClickHouseParser.DETACH, 0);
};

DropDatabaseStmtContext.prototype.DROP = function() {
    return this.getToken(ClickHouseParser.DROP, 0);
};

DropDatabaseStmtContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

DropDatabaseStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

DropDatabaseStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};
DropDatabaseStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDropDatabaseStmt(this);
	}
};

DropDatabaseStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDropDatabaseStmt(this);
	}
};

DropDatabaseStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDropDatabaseStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DropTableStmtContext(parser, ctx) {
	DropStmtContext.call(this, parser);
    DropStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DropTableStmtContext.prototype = Object.create(DropStmtContext.prototype);
DropTableStmtContext.prototype.constructor = DropTableStmtContext;

ClickHouseParser.DropTableStmtContext = DropTableStmtContext;

DropTableStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

DropTableStmtContext.prototype.DETACH = function() {
    return this.getToken(ClickHouseParser.DETACH, 0);
};

DropTableStmtContext.prototype.DROP = function() {
    return this.getToken(ClickHouseParser.DROP, 0);
};

DropTableStmtContext.prototype.DICTIONARY = function() {
    return this.getToken(ClickHouseParser.DICTIONARY, 0);
};

DropTableStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

DropTableStmtContext.prototype.VIEW = function() {
    return this.getToken(ClickHouseParser.VIEW, 0);
};

DropTableStmtContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

DropTableStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

DropTableStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

DropTableStmtContext.prototype.NO = function() {
    return this.getToken(ClickHouseParser.NO, 0);
};

DropTableStmtContext.prototype.DELAY = function() {
    return this.getToken(ClickHouseParser.DELAY, 0);
};

DropTableStmtContext.prototype.TEMPORARY = function() {
    return this.getToken(ClickHouseParser.TEMPORARY, 0);
};
DropTableStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDropTableStmt(this);
	}
};

DropTableStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDropTableStmt(this);
	}
};

DropTableStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDropTableStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.DropStmtContext = DropStmtContext;

ClickHouseParser.prototype.dropStmt = function() {

    var localctx = new DropStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 84, ClickHouseParser.RULE_dropStmt);
    var _la = 0; // Token type
    try {
        this.state = 1063;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,121,this._ctx);
        switch(la_) {
        case 1:
            localctx = new DropDatabaseStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1032;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.DETACH || _la===ClickHouseParser.DROP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1033;
            this.match(ClickHouseParser.DATABASE);
            this.state = 1036;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,114,this._ctx);
            if(la_===1) {
                this.state = 1034;
                this.match(ClickHouseParser.IF);
                this.state = 1035;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 1038;
            this.databaseIdentifier();
            this.state = 1040;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ON) {
                this.state = 1039;
                this.clusterClause();
            }

            break;

        case 2:
            localctx = new DropTableStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1042;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.DETACH || _la===ClickHouseParser.DROP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1049;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ClickHouseParser.DICTIONARY:
                this.state = 1043;
                this.match(ClickHouseParser.DICTIONARY);
                break;
            case ClickHouseParser.TABLE:
            case ClickHouseParser.TEMPORARY:
                this.state = 1045;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.TEMPORARY) {
                    this.state = 1044;
                    this.match(ClickHouseParser.TEMPORARY);
                }

                this.state = 1047;
                this.match(ClickHouseParser.TABLE);
                break;
            case ClickHouseParser.VIEW:
                this.state = 1048;
                this.match(ClickHouseParser.VIEW);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1053;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,118,this._ctx);
            if(la_===1) {
                this.state = 1051;
                this.match(ClickHouseParser.IF);
                this.state = 1052;
                this.match(ClickHouseParser.EXISTS);

            }
            this.state = 1055;
            this.tableIdentifier();
            this.state = 1057;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ON) {
                this.state = 1056;
                this.clusterClause();
            }

            this.state = 1061;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.NO) {
                this.state = 1059;
                this.match(ClickHouseParser.NO);
                this.state = 1060;
                this.match(ClickHouseParser.DELAY);
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExistsStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_existsStmt;
    return this;
}

ExistsStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExistsStmtContext.prototype.constructor = ExistsStmtContext;


 
ExistsStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExistsTableStmtContext(parser, ctx) {
	ExistsStmtContext.call(this, parser);
    ExistsStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsTableStmtContext.prototype = Object.create(ExistsStmtContext.prototype);
ExistsTableStmtContext.prototype.constructor = ExistsTableStmtContext;

ClickHouseParser.ExistsTableStmtContext = ExistsTableStmtContext;

ExistsTableStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

ExistsTableStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ExistsTableStmtContext.prototype.DICTIONARY = function() {
    return this.getToken(ClickHouseParser.DICTIONARY, 0);
};

ExistsTableStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

ExistsTableStmtContext.prototype.VIEW = function() {
    return this.getToken(ClickHouseParser.VIEW, 0);
};

ExistsTableStmtContext.prototype.TEMPORARY = function() {
    return this.getToken(ClickHouseParser.TEMPORARY, 0);
};
ExistsTableStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterExistsTableStmt(this);
	}
};

ExistsTableStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitExistsTableStmt(this);
	}
};

ExistsTableStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitExistsTableStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExistsDatabaseStmtContext(parser, ctx) {
	ExistsStmtContext.call(this, parser);
    ExistsStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExistsDatabaseStmtContext.prototype = Object.create(ExistsStmtContext.prototype);
ExistsDatabaseStmtContext.prototype.constructor = ExistsDatabaseStmtContext;

ClickHouseParser.ExistsDatabaseStmtContext = ExistsDatabaseStmtContext;

ExistsDatabaseStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

ExistsDatabaseStmtContext.prototype.DATABASE = function() {
    return this.getToken(ClickHouseParser.DATABASE, 0);
};

ExistsDatabaseStmtContext.prototype.databaseIdentifier = function() {
    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
};
ExistsDatabaseStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterExistsDatabaseStmt(this);
	}
};

ExistsDatabaseStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitExistsDatabaseStmt(this);
	}
};

ExistsDatabaseStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitExistsDatabaseStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.ExistsStmtContext = ExistsStmtContext;

ClickHouseParser.prototype.existsStmt = function() {

    var localctx = new ExistsStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 86, ClickHouseParser.RULE_existsStmt);
    var _la = 0; // Token type
    try {
        this.state = 1078;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,124,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ExistsDatabaseStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1065;
            this.match(ClickHouseParser.EXISTS);
            this.state = 1066;
            this.match(ClickHouseParser.DATABASE);
            this.state = 1067;
            this.databaseIdentifier();
            break;

        case 2:
            localctx = new ExistsTableStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1068;
            this.match(ClickHouseParser.EXISTS);
            this.state = 1075;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,123,this._ctx);
            if(la_===1) {
                this.state = 1069;
                this.match(ClickHouseParser.DICTIONARY);

            } else if(la_===2) {
                this.state = 1071;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.TEMPORARY) {
                    this.state = 1070;
                    this.match(ClickHouseParser.TEMPORARY);
                }

                this.state = 1073;
                this.match(ClickHouseParser.TABLE);

            } else if(la_===3) {
                this.state = 1074;
                this.match(ClickHouseParser.VIEW);

            }
            this.state = 1077;
            this.tableIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ExplainStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_explainStmt;
    return this;
}

ExplainStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ExplainStmtContext.prototype.constructor = ExplainStmtContext;


 
ExplainStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ExplainSyntaxStmtContext(parser, ctx) {
	ExplainStmtContext.call(this, parser);
    ExplainStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainSyntaxStmtContext.prototype = Object.create(ExplainStmtContext.prototype);
ExplainSyntaxStmtContext.prototype.constructor = ExplainSyntaxStmtContext;

ClickHouseParser.ExplainSyntaxStmtContext = ExplainSyntaxStmtContext;

ExplainSyntaxStmtContext.prototype.EXPLAIN = function() {
    return this.getToken(ClickHouseParser.EXPLAIN, 0);
};

ExplainSyntaxStmtContext.prototype.SYNTAX = function() {
    return this.getToken(ClickHouseParser.SYNTAX, 0);
};

ExplainSyntaxStmtContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
ExplainSyntaxStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterExplainSyntaxStmt(this);
	}
};

ExplainSyntaxStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitExplainSyntaxStmt(this);
	}
};

ExplainSyntaxStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitExplainSyntaxStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ExplainASTStmtContext(parser, ctx) {
	ExplainStmtContext.call(this, parser);
    ExplainStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ExplainASTStmtContext.prototype = Object.create(ExplainStmtContext.prototype);
ExplainASTStmtContext.prototype.constructor = ExplainASTStmtContext;

ClickHouseParser.ExplainASTStmtContext = ExplainASTStmtContext;

ExplainASTStmtContext.prototype.EXPLAIN = function() {
    return this.getToken(ClickHouseParser.EXPLAIN, 0);
};

ExplainASTStmtContext.prototype.AST = function() {
    return this.getToken(ClickHouseParser.AST, 0);
};

ExplainASTStmtContext.prototype.query = function() {
    return this.getTypedRuleContext(QueryContext,0);
};
ExplainASTStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterExplainASTStmt(this);
	}
};

ExplainASTStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitExplainASTStmt(this);
	}
};

ExplainASTStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitExplainASTStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.ExplainStmtContext = ExplainStmtContext;

ClickHouseParser.prototype.explainStmt = function() {

    var localctx = new ExplainStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 88, ClickHouseParser.RULE_explainStmt);
    try {
        this.state = 1086;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,125,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ExplainASTStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1080;
            this.match(ClickHouseParser.EXPLAIN);
            this.state = 1081;
            this.match(ClickHouseParser.AST);
            this.state = 1082;
            this.query();
            break;

        case 2:
            localctx = new ExplainSyntaxStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1083;
            this.match(ClickHouseParser.EXPLAIN);
            this.state = 1084;
            this.match(ClickHouseParser.SYNTAX);
            this.state = 1085;
            this.query();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function InsertStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_insertStmt;
    return this;
}

InsertStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
InsertStmtContext.prototype.constructor = InsertStmtContext;

InsertStmtContext.prototype.INSERT = function() {
    return this.getToken(ClickHouseParser.INSERT, 0);
};

InsertStmtContext.prototype.INTO = function() {
    return this.getToken(ClickHouseParser.INTO, 0);
};

InsertStmtContext.prototype.dataClause = function() {
    return this.getTypedRuleContext(DataClauseContext,0);
};

InsertStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

InsertStmtContext.prototype.FUNCTION = function() {
    return this.getToken(ClickHouseParser.FUNCTION, 0);
};

InsertStmtContext.prototype.tableFunctionExpr = function() {
    return this.getTypedRuleContext(TableFunctionExprContext,0);
};

InsertStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

InsertStmtContext.prototype.columnsClause = function() {
    return this.getTypedRuleContext(ColumnsClauseContext,0);
};

InsertStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterInsertStmt(this);
	}
};

InsertStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitInsertStmt(this);
	}
};

InsertStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitInsertStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.InsertStmtContext = InsertStmtContext;

ClickHouseParser.prototype.insertStmt = function() {

    var localctx = new InsertStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 90, ClickHouseParser.RULE_insertStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1088;
        this.match(ClickHouseParser.INSERT);
        this.state = 1089;
        this.match(ClickHouseParser.INTO);
        this.state = 1091;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,126,this._ctx);
        if(la_===1) {
            this.state = 1090;
            this.match(ClickHouseParser.TABLE);

        }
        this.state = 1096;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,127,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1093;
            this.tableIdentifier();
            break;

        case 2:
            this.state = 1094;
            this.match(ClickHouseParser.FUNCTION);
            this.state = 1095;
            this.tableFunctionExpr();
            break;

        }
        this.state = 1099;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,128,this._ctx);
        if(la_===1) {
            this.state = 1098;
            this.columnsClause();

        }
        this.state = 1101;
        this.dataClause();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnsClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_columnsClause;
    return this;
}

ColumnsClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnsClauseContext.prototype.constructor = ColumnsClauseContext;

ColumnsClauseContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnsClauseContext.prototype.nestedIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NestedIdentifierContext);
    } else {
        return this.getTypedRuleContext(NestedIdentifierContext,i);
    }
};

ColumnsClauseContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

ColumnsClauseContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


ColumnsClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnsClause(this);
	}
};

ColumnsClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnsClause(this);
	}
};

ColumnsClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnsClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.ColumnsClauseContext = ColumnsClauseContext;

ClickHouseParser.prototype.columnsClause = function() {

    var localctx = new ColumnsClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 92, ClickHouseParser.RULE_columnsClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1103;
        this.match(ClickHouseParser.LPAREN);
        this.state = 1104;
        this.nestedIdentifier();
        this.state = 1109;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ClickHouseParser.COMMA) {
            this.state = 1105;
            this.match(ClickHouseParser.COMMA);
            this.state = 1106;
            this.nestedIdentifier();
            this.state = 1111;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1112;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DataClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_dataClause;
    return this;
}

DataClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DataClauseContext.prototype.constructor = DataClauseContext;


 
DataClauseContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function DataClauseValuesContext(parser, ctx) {
	DataClauseContext.call(this, parser);
    DataClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DataClauseValuesContext.prototype = Object.create(DataClauseContext.prototype);
DataClauseValuesContext.prototype.constructor = DataClauseValuesContext;

ClickHouseParser.DataClauseValuesContext = DataClauseValuesContext;

DataClauseValuesContext.prototype.VALUES = function() {
    return this.getToken(ClickHouseParser.VALUES, 0);
};
DataClauseValuesContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDataClauseValues(this);
	}
};

DataClauseValuesContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDataClauseValues(this);
	}
};

DataClauseValuesContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDataClauseValues(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DataClauseFormatContext(parser, ctx) {
	DataClauseContext.call(this, parser);
    DataClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DataClauseFormatContext.prototype = Object.create(DataClauseContext.prototype);
DataClauseFormatContext.prototype.constructor = DataClauseFormatContext;

ClickHouseParser.DataClauseFormatContext = DataClauseFormatContext;

DataClauseFormatContext.prototype.FORMAT = function() {
    return this.getToken(ClickHouseParser.FORMAT, 0);
};

DataClauseFormatContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
DataClauseFormatContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDataClauseFormat(this);
	}
};

DataClauseFormatContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDataClauseFormat(this);
	}
};

DataClauseFormatContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDataClauseFormat(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function DataClauseSelectContext(parser, ctx) {
	DataClauseContext.call(this, parser);
    DataClauseContext.prototype.copyFrom.call(this, ctx);
    return this;
}

DataClauseSelectContext.prototype = Object.create(DataClauseContext.prototype);
DataClauseSelectContext.prototype.constructor = DataClauseSelectContext;

ClickHouseParser.DataClauseSelectContext = DataClauseSelectContext;

DataClauseSelectContext.prototype.selectUnionStmt = function() {
    return this.getTypedRuleContext(SelectUnionStmtContext,0);
};

DataClauseSelectContext.prototype.EOF = function() {
    return this.getToken(ClickHouseParser.EOF, 0);
};

DataClauseSelectContext.prototype.SEMICOLON = function() {
    return this.getToken(ClickHouseParser.SEMICOLON, 0);
};
DataClauseSelectContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDataClauseSelect(this);
	}
};

DataClauseSelectContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDataClauseSelect(this);
	}
};

DataClauseSelectContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDataClauseSelect(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.DataClauseContext = DataClauseContext;

ClickHouseParser.prototype.dataClause = function() {

    var localctx = new DataClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 94, ClickHouseParser.RULE_dataClause);
    var _la = 0; // Token type
    try {
        this.state = 1123;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.FORMAT:
            localctx = new DataClauseFormatContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1114;
            this.match(ClickHouseParser.FORMAT);
            this.state = 1115;
            this.identifier();
            break;
        case ClickHouseParser.VALUES:
            localctx = new DataClauseValuesContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1116;
            this.match(ClickHouseParser.VALUES);
            break;
        case ClickHouseParser.SELECT:
        case ClickHouseParser.WITH:
        case ClickHouseParser.LPAREN:
            localctx = new DataClauseSelectContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1117;
            this.selectUnionStmt();
            this.state = 1119;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.SEMICOLON) {
                this.state = 1118;
                this.match(ClickHouseParser.SEMICOLON);
            }

            this.state = 1121;
            this.match(ClickHouseParser.EOF);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KillStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_killStmt;
    return this;
}

KillStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KillStmtContext.prototype.constructor = KillStmtContext;


 
KillStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function KillMutationStmtContext(parser, ctx) {
	KillStmtContext.call(this, parser);
    KillStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

KillMutationStmtContext.prototype = Object.create(KillStmtContext.prototype);
KillMutationStmtContext.prototype.constructor = KillMutationStmtContext;

ClickHouseParser.KillMutationStmtContext = KillMutationStmtContext;

KillMutationStmtContext.prototype.KILL = function() {
    return this.getToken(ClickHouseParser.KILL, 0);
};

KillMutationStmtContext.prototype.MUTATION = function() {
    return this.getToken(ClickHouseParser.MUTATION, 0);
};

KillMutationStmtContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

KillMutationStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

KillMutationStmtContext.prototype.SYNC = function() {
    return this.getToken(ClickHouseParser.SYNC, 0);
};

KillMutationStmtContext.prototype.ASYNC = function() {
    return this.getToken(ClickHouseParser.ASYNC, 0);
};

KillMutationStmtContext.prototype.TEST = function() {
    return this.getToken(ClickHouseParser.TEST, 0);
};
KillMutationStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterKillMutationStmt(this);
	}
};

KillMutationStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitKillMutationStmt(this);
	}
};

KillMutationStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitKillMutationStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.KillStmtContext = KillStmtContext;

ClickHouseParser.prototype.killStmt = function() {

    var localctx = new KillStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 96, ClickHouseParser.RULE_killStmt);
    var _la = 0; // Token type
    try {
        localctx = new KillMutationStmtContext(this, localctx);
        this.enterOuterAlt(localctx, 1);
        this.state = 1125;
        this.match(ClickHouseParser.KILL);
        this.state = 1126;
        this.match(ClickHouseParser.MUTATION);
        this.state = 1128;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ON) {
            this.state = 1127;
            this.clusterClause();
        }

        this.state = 1130;
        this.whereClause();
        this.state = 1132;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ASYNC || _la===ClickHouseParser.SYNC || _la===ClickHouseParser.TEST) {
            this.state = 1131;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.ASYNC || _la===ClickHouseParser.SYNC || _la===ClickHouseParser.TEST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OptimizeStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_optimizeStmt;
    return this;
}

OptimizeStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OptimizeStmtContext.prototype.constructor = OptimizeStmtContext;

OptimizeStmtContext.prototype.OPTIMIZE = function() {
    return this.getToken(ClickHouseParser.OPTIMIZE, 0);
};

OptimizeStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

OptimizeStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

OptimizeStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

OptimizeStmtContext.prototype.partitionClause = function() {
    return this.getTypedRuleContext(PartitionClauseContext,0);
};

OptimizeStmtContext.prototype.FINAL = function() {
    return this.getToken(ClickHouseParser.FINAL, 0);
};

OptimizeStmtContext.prototype.DEDUPLICATE = function() {
    return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
};

OptimizeStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterOptimizeStmt(this);
	}
};

OptimizeStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitOptimizeStmt(this);
	}
};

OptimizeStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitOptimizeStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.OptimizeStmtContext = OptimizeStmtContext;

ClickHouseParser.prototype.optimizeStmt = function() {

    var localctx = new OptimizeStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 98, ClickHouseParser.RULE_optimizeStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1134;
        this.match(ClickHouseParser.OPTIMIZE);
        this.state = 1135;
        this.match(ClickHouseParser.TABLE);
        this.state = 1136;
        this.tableIdentifier();
        this.state = 1138;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ON) {
            this.state = 1137;
            this.clusterClause();
        }

        this.state = 1141;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.PARTITION) {
            this.state = 1140;
            this.partitionClause();
        }

        this.state = 1144;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.FINAL) {
            this.state = 1143;
            this.match(ClickHouseParser.FINAL);
        }

        this.state = 1147;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.DEDUPLICATE) {
            this.state = 1146;
            this.match(ClickHouseParser.DEDUPLICATE);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RenameStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_renameStmt;
    return this;
}

RenameStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RenameStmtContext.prototype.constructor = RenameStmtContext;

RenameStmtContext.prototype.RENAME = function() {
    return this.getToken(ClickHouseParser.RENAME, 0);
};

RenameStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

RenameStmtContext.prototype.tableIdentifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableIdentifierContext);
    } else {
        return this.getTypedRuleContext(TableIdentifierContext,i);
    }
};

RenameStmtContext.prototype.TO = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.TO);
    } else {
        return this.getToken(ClickHouseParser.TO, i);
    }
};


RenameStmtContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


RenameStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

RenameStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterRenameStmt(this);
	}
};

RenameStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitRenameStmt(this);
	}
};

RenameStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitRenameStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.RenameStmtContext = RenameStmtContext;

ClickHouseParser.prototype.renameStmt = function() {

    var localctx = new RenameStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 100, ClickHouseParser.RULE_renameStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1149;
        this.match(ClickHouseParser.RENAME);
        this.state = 1150;
        this.match(ClickHouseParser.TABLE);
        this.state = 1151;
        this.tableIdentifier();
        this.state = 1152;
        this.match(ClickHouseParser.TO);
        this.state = 1153;
        this.tableIdentifier();
        this.state = 1161;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ClickHouseParser.COMMA) {
            this.state = 1154;
            this.match(ClickHouseParser.COMMA);
            this.state = 1155;
            this.tableIdentifier();
            this.state = 1156;
            this.match(ClickHouseParser.TO);
            this.state = 1157;
            this.tableIdentifier();
            this.state = 1163;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
        this.state = 1165;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ON) {
            this.state = 1164;
            this.clusterClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectionSelectStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_projectionSelectStmt;
    return this;
}

ProjectionSelectStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionSelectStmtContext.prototype.constructor = ProjectionSelectStmtContext;

ProjectionSelectStmtContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ProjectionSelectStmtContext.prototype.SELECT = function() {
    return this.getToken(ClickHouseParser.SELECT, 0);
};

ProjectionSelectStmtContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

ProjectionSelectStmtContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

ProjectionSelectStmtContext.prototype.withClause = function() {
    return this.getTypedRuleContext(WithClauseContext,0);
};

ProjectionSelectStmtContext.prototype.groupByClause = function() {
    return this.getTypedRuleContext(GroupByClauseContext,0);
};

ProjectionSelectStmtContext.prototype.projectionOrderByClause = function() {
    return this.getTypedRuleContext(ProjectionOrderByClauseContext,0);
};

ProjectionSelectStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterProjectionSelectStmt(this);
	}
};

ProjectionSelectStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitProjectionSelectStmt(this);
	}
};

ProjectionSelectStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitProjectionSelectStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.ProjectionSelectStmtContext = ProjectionSelectStmtContext;

ClickHouseParser.prototype.projectionSelectStmt = function() {

    var localctx = new ProjectionSelectStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 102, ClickHouseParser.RULE_projectionSelectStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1167;
        this.match(ClickHouseParser.LPAREN);
        this.state = 1169;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.WITH) {
            this.state = 1168;
            this.withClause();
        }

        this.state = 1171;
        this.match(ClickHouseParser.SELECT);
        this.state = 1172;
        this.columnExprList();
        this.state = 1174;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.GROUP) {
            this.state = 1173;
            this.groupByClause();
        }

        this.state = 1177;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ORDER) {
            this.state = 1176;
            this.projectionOrderByClause();
        }

        this.state = 1179;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectUnionStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_selectUnionStmt;
    return this;
}

SelectUnionStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectUnionStmtContext.prototype.constructor = SelectUnionStmtContext;

SelectUnionStmtContext.prototype.selectStmtWithParens = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SelectStmtWithParensContext);
    } else {
        return this.getTypedRuleContext(SelectStmtWithParensContext,i);
    }
};

SelectUnionStmtContext.prototype.UNION = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.UNION);
    } else {
        return this.getToken(ClickHouseParser.UNION, i);
    }
};


SelectUnionStmtContext.prototype.ALL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.ALL);
    } else {
        return this.getToken(ClickHouseParser.ALL, i);
    }
};


SelectUnionStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSelectUnionStmt(this);
	}
};

SelectUnionStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSelectUnionStmt(this);
	}
};

SelectUnionStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSelectUnionStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SelectUnionStmtContext = SelectUnionStmtContext;

ClickHouseParser.prototype.selectUnionStmt = function() {

    var localctx = new SelectUnionStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 104, ClickHouseParser.RULE_selectUnionStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1181;
        this.selectStmtWithParens();
        this.state = 1187;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ClickHouseParser.UNION) {
            this.state = 1182;
            this.match(ClickHouseParser.UNION);
            this.state = 1183;
            this.match(ClickHouseParser.ALL);
            this.state = 1184;
            this.selectStmtWithParens();
            this.state = 1189;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectStmtWithParensContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_selectStmtWithParens;
    return this;
}

SelectStmtWithParensContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStmtWithParensContext.prototype.constructor = SelectStmtWithParensContext;

SelectStmtWithParensContext.prototype.selectStmt = function() {
    return this.getTypedRuleContext(SelectStmtContext,0);
};

SelectStmtWithParensContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

SelectStmtWithParensContext.prototype.selectUnionStmt = function() {
    return this.getTypedRuleContext(SelectUnionStmtContext,0);
};

SelectStmtWithParensContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

SelectStmtWithParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSelectStmtWithParens(this);
	}
};

SelectStmtWithParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSelectStmtWithParens(this);
	}
};

SelectStmtWithParensContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSelectStmtWithParens(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SelectStmtWithParensContext = SelectStmtWithParensContext;

ClickHouseParser.prototype.selectStmtWithParens = function() {

    var localctx = new SelectStmtWithParensContext(this, this._ctx, this.state);
    this.enterRule(localctx, 106, ClickHouseParser.RULE_selectStmtWithParens);
    try {
        this.state = 1195;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.SELECT:
        case ClickHouseParser.WITH:
            this.enterOuterAlt(localctx, 1);
            this.state = 1190;
            this.selectStmt();
            break;
        case ClickHouseParser.LPAREN:
            this.enterOuterAlt(localctx, 2);
            this.state = 1191;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1192;
            this.selectUnionStmt();
            this.state = 1193;
            this.match(ClickHouseParser.RPAREN);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SelectStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_selectStmt;
    return this;
}

SelectStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SelectStmtContext.prototype.constructor = SelectStmtContext;

SelectStmtContext.prototype.SELECT = function() {
    return this.getToken(ClickHouseParser.SELECT, 0);
};

SelectStmtContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

SelectStmtContext.prototype.withClause = function() {
    return this.getTypedRuleContext(WithClauseContext,0);
};

SelectStmtContext.prototype.DISTINCT = function() {
    return this.getToken(ClickHouseParser.DISTINCT, 0);
};

SelectStmtContext.prototype.topClause = function() {
    return this.getTypedRuleContext(TopClauseContext,0);
};

SelectStmtContext.prototype.fromClause = function() {
    return this.getTypedRuleContext(FromClauseContext,0);
};

SelectStmtContext.prototype.arrayJoinClause = function() {
    return this.getTypedRuleContext(ArrayJoinClauseContext,0);
};

SelectStmtContext.prototype.windowClause = function() {
    return this.getTypedRuleContext(WindowClauseContext,0);
};

SelectStmtContext.prototype.prewhereClause = function() {
    return this.getTypedRuleContext(PrewhereClauseContext,0);
};

SelectStmtContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

SelectStmtContext.prototype.groupByClause = function() {
    return this.getTypedRuleContext(GroupByClauseContext,0);
};

SelectStmtContext.prototype.WITH = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.WITH);
    } else {
        return this.getToken(ClickHouseParser.WITH, i);
    }
};


SelectStmtContext.prototype.TOTALS = function() {
    return this.getToken(ClickHouseParser.TOTALS, 0);
};

SelectStmtContext.prototype.havingClause = function() {
    return this.getTypedRuleContext(HavingClauseContext,0);
};

SelectStmtContext.prototype.orderByClause = function() {
    return this.getTypedRuleContext(OrderByClauseContext,0);
};

SelectStmtContext.prototype.limitByClause = function() {
    return this.getTypedRuleContext(LimitByClauseContext,0);
};

SelectStmtContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

SelectStmtContext.prototype.settingsClause = function() {
    return this.getTypedRuleContext(SettingsClauseContext,0);
};

SelectStmtContext.prototype.CUBE = function() {
    return this.getToken(ClickHouseParser.CUBE, 0);
};

SelectStmtContext.prototype.ROLLUP = function() {
    return this.getToken(ClickHouseParser.ROLLUP, 0);
};

SelectStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSelectStmt(this);
	}
};

SelectStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSelectStmt(this);
	}
};

SelectStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSelectStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SelectStmtContext = SelectStmtContext;

ClickHouseParser.prototype.selectStmt = function() {

    var localctx = new SelectStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 108, ClickHouseParser.RULE_selectStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1198;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.WITH) {
            this.state = 1197;
            this.withClause();
        }

        this.state = 1200;
        this.match(ClickHouseParser.SELECT);
        this.state = 1202;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,146,this._ctx);
        if(la_===1) {
            this.state = 1201;
            this.match(ClickHouseParser.DISTINCT);

        }
        this.state = 1205;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,147,this._ctx);
        if(la_===1) {
            this.state = 1204;
            this.topClause();

        }
        this.state = 1207;
        this.columnExprList();
        this.state = 1209;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.FROM) {
            this.state = 1208;
            this.fromClause();
        }

        this.state = 1212;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ARRAY || _la===ClickHouseParser.INNER || _la===ClickHouseParser.LEFT) {
            this.state = 1211;
            this.arrayJoinClause();
        }

        this.state = 1215;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.WINDOW) {
            this.state = 1214;
            this.windowClause();
        }

        this.state = 1218;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.PREWHERE) {
            this.state = 1217;
            this.prewhereClause();
        }

        this.state = 1221;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.WHERE) {
            this.state = 1220;
            this.whereClause();
        }

        this.state = 1224;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.GROUP) {
            this.state = 1223;
            this.groupByClause();
        }

        this.state = 1228;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,154,this._ctx);
        if(la_===1) {
            this.state = 1226;
            this.match(ClickHouseParser.WITH);
            this.state = 1227;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.CUBE || _la===ClickHouseParser.ROLLUP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1232;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,155,this._ctx);
        if(la_===1) {
            this.state = 1230;
            this.match(ClickHouseParser.WITH);
            this.state = 1231;
            this.match(ClickHouseParser.TOTALS);

        }
        this.state = 1235;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.HAVING) {
            this.state = 1234;
            this.havingClause();
        }

        this.state = 1238;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ORDER) {
            this.state = 1237;
            this.orderByClause();
        }

        this.state = 1241;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,158,this._ctx);
        if(la_===1) {
            this.state = 1240;
            this.limitByClause();

        }
        this.state = 1244;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.LIMIT) {
            this.state = 1243;
            this.limitClause();
        }

        this.state = 1247;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.SETTINGS) {
            this.state = 1246;
            this.settingsClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WithClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_withClause;
    return this;
}

WithClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WithClauseContext.prototype.constructor = WithClauseContext;

WithClauseContext.prototype.WITH = function() {
    return this.getToken(ClickHouseParser.WITH, 0);
};

WithClauseContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

WithClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterWithClause(this);
	}
};

WithClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitWithClause(this);
	}
};

WithClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitWithClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.WithClauseContext = WithClauseContext;

ClickHouseParser.prototype.withClause = function() {

    var localctx = new WithClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 110, ClickHouseParser.RULE_withClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1249;
        this.match(ClickHouseParser.WITH);
        this.state = 1250;
        this.columnExprList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TopClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_topClause;
    return this;
}

TopClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TopClauseContext.prototype.constructor = TopClauseContext;

TopClauseContext.prototype.TOP = function() {
    return this.getToken(ClickHouseParser.TOP, 0);
};

TopClauseContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
};

TopClauseContext.prototype.WITH = function() {
    return this.getToken(ClickHouseParser.WITH, 0);
};

TopClauseContext.prototype.TIES = function() {
    return this.getToken(ClickHouseParser.TIES, 0);
};

TopClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTopClause(this);
	}
};

TopClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTopClause(this);
	}
};

TopClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTopClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TopClauseContext = TopClauseContext;

ClickHouseParser.prototype.topClause = function() {

    var localctx = new TopClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 112, ClickHouseParser.RULE_topClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1252;
        this.match(ClickHouseParser.TOP);
        this.state = 1253;
        this.match(ClickHouseParser.DECIMAL_LITERAL);
        this.state = 1256;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,161,this._ctx);
        if(la_===1) {
            this.state = 1254;
            this.match(ClickHouseParser.WITH);
            this.state = 1255;
            this.match(ClickHouseParser.TIES);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FromClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_fromClause;
    return this;
}

FromClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FromClauseContext.prototype.constructor = FromClauseContext;

FromClauseContext.prototype.FROM = function() {
    return this.getToken(ClickHouseParser.FROM, 0);
};

FromClauseContext.prototype.joinExpr = function() {
    return this.getTypedRuleContext(JoinExprContext,0);
};

FromClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterFromClause(this);
	}
};

FromClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitFromClause(this);
	}
};

FromClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitFromClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.FromClauseContext = FromClauseContext;

ClickHouseParser.prototype.fromClause = function() {

    var localctx = new FromClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 114, ClickHouseParser.RULE_fromClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1258;
        this.match(ClickHouseParser.FROM);
        this.state = 1259;
        this.joinExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ArrayJoinClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_arrayJoinClause;
    return this;
}

ArrayJoinClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ArrayJoinClauseContext.prototype.constructor = ArrayJoinClauseContext;

ArrayJoinClauseContext.prototype.ARRAY = function() {
    return this.getToken(ClickHouseParser.ARRAY, 0);
};

ArrayJoinClauseContext.prototype.JOIN = function() {
    return this.getToken(ClickHouseParser.JOIN, 0);
};

ArrayJoinClauseContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

ArrayJoinClauseContext.prototype.LEFT = function() {
    return this.getToken(ClickHouseParser.LEFT, 0);
};

ArrayJoinClauseContext.prototype.INNER = function() {
    return this.getToken(ClickHouseParser.INNER, 0);
};

ArrayJoinClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterArrayJoinClause(this);
	}
};

ArrayJoinClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitArrayJoinClause(this);
	}
};

ArrayJoinClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitArrayJoinClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.ArrayJoinClauseContext = ArrayJoinClauseContext;

ClickHouseParser.prototype.arrayJoinClause = function() {

    var localctx = new ArrayJoinClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 116, ClickHouseParser.RULE_arrayJoinClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1262;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.INNER || _la===ClickHouseParser.LEFT) {
            this.state = 1261;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.INNER || _la===ClickHouseParser.LEFT)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 1264;
        this.match(ClickHouseParser.ARRAY);
        this.state = 1265;
        this.match(ClickHouseParser.JOIN);
        this.state = 1266;
        this.columnExprList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_windowClause;
    return this;
}

WindowClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowClauseContext.prototype.constructor = WindowClauseContext;

WindowClauseContext.prototype.WINDOW = function() {
    return this.getToken(ClickHouseParser.WINDOW, 0);
};

WindowClauseContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

WindowClauseContext.prototype.AS = function() {
    return this.getToken(ClickHouseParser.AS, 0);
};

WindowClauseContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

WindowClauseContext.prototype.windowExpr = function() {
    return this.getTypedRuleContext(WindowExprContext,0);
};

WindowClauseContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

WindowClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterWindowClause(this);
	}
};

WindowClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitWindowClause(this);
	}
};

WindowClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitWindowClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.WindowClauseContext = WindowClauseContext;

ClickHouseParser.prototype.windowClause = function() {

    var localctx = new WindowClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 118, ClickHouseParser.RULE_windowClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1268;
        this.match(ClickHouseParser.WINDOW);
        this.state = 1269;
        this.identifier();
        this.state = 1270;
        this.match(ClickHouseParser.AS);
        this.state = 1271;
        this.match(ClickHouseParser.LPAREN);
        this.state = 1272;
        this.windowExpr();
        this.state = 1273;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function PrewhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_prewhereClause;
    return this;
}

PrewhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
PrewhereClauseContext.prototype.constructor = PrewhereClauseContext;

PrewhereClauseContext.prototype.PREWHERE = function() {
    return this.getToken(ClickHouseParser.PREWHERE, 0);
};

PrewhereClauseContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

PrewhereClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterPrewhereClause(this);
	}
};

PrewhereClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitPrewhereClause(this);
	}
};

PrewhereClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitPrewhereClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.PrewhereClauseContext = PrewhereClauseContext;

ClickHouseParser.prototype.prewhereClause = function() {

    var localctx = new PrewhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 120, ClickHouseParser.RULE_prewhereClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1275;
        this.match(ClickHouseParser.PREWHERE);
        this.state = 1276;
        this.columnExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WhereClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_whereClause;
    return this;
}

WhereClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WhereClauseContext.prototype.constructor = WhereClauseContext;

WhereClauseContext.prototype.WHERE = function() {
    return this.getToken(ClickHouseParser.WHERE, 0);
};

WhereClauseContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

WhereClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterWhereClause(this);
	}
};

WhereClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitWhereClause(this);
	}
};

WhereClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitWhereClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.WhereClauseContext = WhereClauseContext;

ClickHouseParser.prototype.whereClause = function() {

    var localctx = new WhereClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 122, ClickHouseParser.RULE_whereClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1278;
        this.match(ClickHouseParser.WHERE);
        this.state = 1279;
        this.columnExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function GroupByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_groupByClause;
    return this;
}

GroupByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
GroupByClauseContext.prototype.constructor = GroupByClauseContext;

GroupByClauseContext.prototype.GROUP = function() {
    return this.getToken(ClickHouseParser.GROUP, 0);
};

GroupByClauseContext.prototype.BY = function() {
    return this.getToken(ClickHouseParser.BY, 0);
};

GroupByClauseContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

GroupByClauseContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

GroupByClauseContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

GroupByClauseContext.prototype.CUBE = function() {
    return this.getToken(ClickHouseParser.CUBE, 0);
};

GroupByClauseContext.prototype.ROLLUP = function() {
    return this.getToken(ClickHouseParser.ROLLUP, 0);
};

GroupByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterGroupByClause(this);
	}
};

GroupByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitGroupByClause(this);
	}
};

GroupByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitGroupByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.GroupByClauseContext = GroupByClauseContext;

ClickHouseParser.prototype.groupByClause = function() {

    var localctx = new GroupByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 124, ClickHouseParser.RULE_groupByClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1281;
        this.match(ClickHouseParser.GROUP);
        this.state = 1282;
        this.match(ClickHouseParser.BY);
        this.state = 1289;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,163,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1283;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.CUBE || _la===ClickHouseParser.ROLLUP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1284;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1285;
            this.columnExprList();
            this.state = 1286;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 2:
            this.state = 1288;
            this.columnExprList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function HavingClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_havingClause;
    return this;
}

HavingClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
HavingClauseContext.prototype.constructor = HavingClauseContext;

HavingClauseContext.prototype.HAVING = function() {
    return this.getToken(ClickHouseParser.HAVING, 0);
};

HavingClauseContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

HavingClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterHavingClause(this);
	}
};

HavingClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitHavingClause(this);
	}
};

HavingClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitHavingClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.HavingClauseContext = HavingClauseContext;

ClickHouseParser.prototype.havingClause = function() {

    var localctx = new HavingClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 126, ClickHouseParser.RULE_havingClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1291;
        this.match(ClickHouseParser.HAVING);
        this.state = 1292;
        this.columnExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_orderByClause;
    return this;
}

OrderByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderByClauseContext.prototype.constructor = OrderByClauseContext;

OrderByClauseContext.prototype.ORDER = function() {
    return this.getToken(ClickHouseParser.ORDER, 0);
};

OrderByClauseContext.prototype.BY = function() {
    return this.getToken(ClickHouseParser.BY, 0);
};

OrderByClauseContext.prototype.orderExprList = function() {
    return this.getTypedRuleContext(OrderExprListContext,0);
};

OrderByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterOrderByClause(this);
	}
};

OrderByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitOrderByClause(this);
	}
};

OrderByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitOrderByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.OrderByClauseContext = OrderByClauseContext;

ClickHouseParser.prototype.orderByClause = function() {

    var localctx = new OrderByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 128, ClickHouseParser.RULE_orderByClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1294;
        this.match(ClickHouseParser.ORDER);
        this.state = 1295;
        this.match(ClickHouseParser.BY);
        this.state = 1296;
        this.orderExprList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ProjectionOrderByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_projectionOrderByClause;
    return this;
}

ProjectionOrderByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ProjectionOrderByClauseContext.prototype.constructor = ProjectionOrderByClauseContext;

ProjectionOrderByClauseContext.prototype.ORDER = function() {
    return this.getToken(ClickHouseParser.ORDER, 0);
};

ProjectionOrderByClauseContext.prototype.BY = function() {
    return this.getToken(ClickHouseParser.BY, 0);
};

ProjectionOrderByClauseContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

ProjectionOrderByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterProjectionOrderByClause(this);
	}
};

ProjectionOrderByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitProjectionOrderByClause(this);
	}
};

ProjectionOrderByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitProjectionOrderByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.ProjectionOrderByClauseContext = ProjectionOrderByClauseContext;

ClickHouseParser.prototype.projectionOrderByClause = function() {

    var localctx = new ProjectionOrderByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 130, ClickHouseParser.RULE_projectionOrderByClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1298;
        this.match(ClickHouseParser.ORDER);
        this.state = 1299;
        this.match(ClickHouseParser.BY);
        this.state = 1300;
        this.columnExprList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_limitByClause;
    return this;
}

LimitByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitByClauseContext.prototype.constructor = LimitByClauseContext;

LimitByClauseContext.prototype.LIMIT = function() {
    return this.getToken(ClickHouseParser.LIMIT, 0);
};

LimitByClauseContext.prototype.limitExpr = function() {
    return this.getTypedRuleContext(LimitExprContext,0);
};

LimitByClauseContext.prototype.BY = function() {
    return this.getToken(ClickHouseParser.BY, 0);
};

LimitByClauseContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

LimitByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterLimitByClause(this);
	}
};

LimitByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitLimitByClause(this);
	}
};

LimitByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitLimitByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.LimitByClauseContext = LimitByClauseContext;

ClickHouseParser.prototype.limitByClause = function() {

    var localctx = new LimitByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 132, ClickHouseParser.RULE_limitByClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1302;
        this.match(ClickHouseParser.LIMIT);
        this.state = 1303;
        this.limitExpr();
        this.state = 1304;
        this.match(ClickHouseParser.BY);
        this.state = 1305;
        this.columnExprList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_limitClause;
    return this;
}

LimitClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitClauseContext.prototype.constructor = LimitClauseContext;

LimitClauseContext.prototype.LIMIT = function() {
    return this.getToken(ClickHouseParser.LIMIT, 0);
};

LimitClauseContext.prototype.limitExpr = function() {
    return this.getTypedRuleContext(LimitExprContext,0);
};

LimitClauseContext.prototype.WITH = function() {
    return this.getToken(ClickHouseParser.WITH, 0);
};

LimitClauseContext.prototype.TIES = function() {
    return this.getToken(ClickHouseParser.TIES, 0);
};

LimitClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterLimitClause(this);
	}
};

LimitClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitLimitClause(this);
	}
};

LimitClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitLimitClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.LimitClauseContext = LimitClauseContext;

ClickHouseParser.prototype.limitClause = function() {

    var localctx = new LimitClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 134, ClickHouseParser.RULE_limitClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1307;
        this.match(ClickHouseParser.LIMIT);
        this.state = 1308;
        this.limitExpr();
        this.state = 1311;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,164,this._ctx);
        if(la_===1) {
            this.state = 1309;
            this.match(ClickHouseParser.WITH);
            this.state = 1310;
            this.match(ClickHouseParser.TIES);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SettingsClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_settingsClause;
    return this;
}

SettingsClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SettingsClauseContext.prototype.constructor = SettingsClauseContext;

SettingsClauseContext.prototype.SETTINGS = function() {
    return this.getToken(ClickHouseParser.SETTINGS, 0);
};

SettingsClauseContext.prototype.settingExprList = function() {
    return this.getTypedRuleContext(SettingExprListContext,0);
};

SettingsClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSettingsClause(this);
	}
};

SettingsClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSettingsClause(this);
	}
};

SettingsClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSettingsClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SettingsClauseContext = SettingsClauseContext;

ClickHouseParser.prototype.settingsClause = function() {

    var localctx = new SettingsClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 136, ClickHouseParser.RULE_settingsClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1313;
        this.match(ClickHouseParser.SETTINGS);
        this.state = 1314;
        this.settingExprList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_joinExpr;
    return this;
}

JoinExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinExprContext.prototype.constructor = JoinExprContext;


 
JoinExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function JoinExprOpContext(parser, ctx) {
	JoinExprContext.call(this, parser);
    JoinExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinExprOpContext.prototype = Object.create(JoinExprContext.prototype);
JoinExprOpContext.prototype.constructor = JoinExprOpContext;

ClickHouseParser.JoinExprOpContext = JoinExprOpContext;

JoinExprOpContext.prototype.joinExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinExprContext);
    } else {
        return this.getTypedRuleContext(JoinExprContext,i);
    }
};

JoinExprOpContext.prototype.JOIN = function() {
    return this.getToken(ClickHouseParser.JOIN, 0);
};

JoinExprOpContext.prototype.joinConstraintClause = function() {
    return this.getTypedRuleContext(JoinConstraintClauseContext,0);
};

JoinExprOpContext.prototype.joinOp = function() {
    return this.getTypedRuleContext(JoinOpContext,0);
};

JoinExprOpContext.prototype.GLOBAL = function() {
    return this.getToken(ClickHouseParser.GLOBAL, 0);
};

JoinExprOpContext.prototype.LOCAL = function() {
    return this.getToken(ClickHouseParser.LOCAL, 0);
};
JoinExprOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterJoinExprOp(this);
	}
};

JoinExprOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitJoinExprOp(this);
	}
};

JoinExprOpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitJoinExprOp(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function JoinExprTableContext(parser, ctx) {
	JoinExprContext.call(this, parser);
    JoinExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinExprTableContext.prototype = Object.create(JoinExprContext.prototype);
JoinExprTableContext.prototype.constructor = JoinExprTableContext;

ClickHouseParser.JoinExprTableContext = JoinExprTableContext;

JoinExprTableContext.prototype.tableExpr = function() {
    return this.getTypedRuleContext(TableExprContext,0);
};

JoinExprTableContext.prototype.FINAL = function() {
    return this.getToken(ClickHouseParser.FINAL, 0);
};

JoinExprTableContext.prototype.sampleClause = function() {
    return this.getTypedRuleContext(SampleClauseContext,0);
};
JoinExprTableContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterJoinExprTable(this);
	}
};

JoinExprTableContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitJoinExprTable(this);
	}
};

JoinExprTableContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitJoinExprTable(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function JoinExprParensContext(parser, ctx) {
	JoinExprContext.call(this, parser);
    JoinExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinExprParensContext.prototype = Object.create(JoinExprContext.prototype);
JoinExprParensContext.prototype.constructor = JoinExprParensContext;

ClickHouseParser.JoinExprParensContext = JoinExprParensContext;

JoinExprParensContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

JoinExprParensContext.prototype.joinExpr = function() {
    return this.getTypedRuleContext(JoinExprContext,0);
};

JoinExprParensContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};
JoinExprParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterJoinExprParens(this);
	}
};

JoinExprParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitJoinExprParens(this);
	}
};

JoinExprParensContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitJoinExprParens(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function JoinExprCrossOpContext(parser, ctx) {
	JoinExprContext.call(this, parser);
    JoinExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinExprCrossOpContext.prototype = Object.create(JoinExprContext.prototype);
JoinExprCrossOpContext.prototype.constructor = JoinExprCrossOpContext;

ClickHouseParser.JoinExprCrossOpContext = JoinExprCrossOpContext;

JoinExprCrossOpContext.prototype.joinExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(JoinExprContext);
    } else {
        return this.getTypedRuleContext(JoinExprContext,i);
    }
};

JoinExprCrossOpContext.prototype.joinOpCross = function() {
    return this.getTypedRuleContext(JoinOpCrossContext,0);
};
JoinExprCrossOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterJoinExprCrossOp(this);
	}
};

JoinExprCrossOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitJoinExprCrossOp(this);
	}
};

JoinExprCrossOpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitJoinExprCrossOp(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.prototype.joinExpr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new JoinExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 138;
    this.enterRecursionRule(localctx, 138, ClickHouseParser.RULE_joinExpr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1328;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,167,this._ctx);
        switch(la_) {
        case 1:
            localctx = new JoinExprTableContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1317;
            this.tableExpr(0);
            this.state = 1319;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,165,this._ctx);
            if(la_===1) {
                this.state = 1318;
                this.match(ClickHouseParser.FINAL);

            }
            this.state = 1322;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,166,this._ctx);
            if(la_===1) {
                this.state = 1321;
                this.sampleClause();

            }
            break;

        case 2:
            localctx = new JoinExprParensContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1324;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1325;
            this.joinExpr(0);
            this.state = 1326;
            this.match(ClickHouseParser.RPAREN);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1347;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,171,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1345;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,170,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new JoinExprCrossOpContext(this, new JoinExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_joinExpr);
                    this.state = 1330;
                    if (!( this.precpred(this._ctx, 3))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 3)");
                    }
                    this.state = 1331;
                    this.joinOpCross();
                    this.state = 1332;
                    this.joinExpr(4);
                    break;

                case 2:
                    localctx = new JoinExprOpContext(this, new JoinExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_joinExpr);
                    this.state = 1334;
                    if (!( this.precpred(this._ctx, 4))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 4)");
                    }
                    this.state = 1336;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ClickHouseParser.GLOBAL || _la===ClickHouseParser.LOCAL) {
                        this.state = 1335;
                        _la = this._input.LA(1);
                        if(!(_la===ClickHouseParser.GLOBAL || _la===ClickHouseParser.LOCAL)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                    }

                    this.state = 1339;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0) || ((((_la - 68)) & ~0x1f) == 0 && ((1 << (_la - 68)) & ((1 << (ClickHouseParser.FULL - 68)) | (1 << (ClickHouseParser.INNER - 68)) | (1 << (ClickHouseParser.LEFT - 68)))) !== 0) || _la===ClickHouseParser.RIGHT || _la===ClickHouseParser.SEMI) {
                        this.state = 1338;
                        this.joinOp();
                    }

                    this.state = 1341;
                    this.match(ClickHouseParser.JOIN);
                    this.state = 1342;
                    this.joinExpr(0);
                    this.state = 1343;
                    this.joinConstraintClause();
                    break;

                } 
            }
            this.state = 1349;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,171,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function JoinOpContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_joinOp;
    return this;
}

JoinOpContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinOpContext.prototype.constructor = JoinOpContext;


 
JoinOpContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function JoinOpFullContext(parser, ctx) {
	JoinOpContext.call(this, parser);
    JoinOpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinOpFullContext.prototype = Object.create(JoinOpContext.prototype);
JoinOpFullContext.prototype.constructor = JoinOpFullContext;

ClickHouseParser.JoinOpFullContext = JoinOpFullContext;

JoinOpFullContext.prototype.FULL = function() {
    return this.getToken(ClickHouseParser.FULL, 0);
};

JoinOpFullContext.prototype.OUTER = function() {
    return this.getToken(ClickHouseParser.OUTER, 0);
};

JoinOpFullContext.prototype.ALL = function() {
    return this.getToken(ClickHouseParser.ALL, 0);
};

JoinOpFullContext.prototype.ANY = function() {
    return this.getToken(ClickHouseParser.ANY, 0);
};
JoinOpFullContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterJoinOpFull(this);
	}
};

JoinOpFullContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitJoinOpFull(this);
	}
};

JoinOpFullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitJoinOpFull(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function JoinOpInnerContext(parser, ctx) {
	JoinOpContext.call(this, parser);
    JoinOpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinOpInnerContext.prototype = Object.create(JoinOpContext.prototype);
JoinOpInnerContext.prototype.constructor = JoinOpInnerContext;

ClickHouseParser.JoinOpInnerContext = JoinOpInnerContext;

JoinOpInnerContext.prototype.INNER = function() {
    return this.getToken(ClickHouseParser.INNER, 0);
};

JoinOpInnerContext.prototype.ALL = function() {
    return this.getToken(ClickHouseParser.ALL, 0);
};

JoinOpInnerContext.prototype.ANY = function() {
    return this.getToken(ClickHouseParser.ANY, 0);
};

JoinOpInnerContext.prototype.ASOF = function() {
    return this.getToken(ClickHouseParser.ASOF, 0);
};
JoinOpInnerContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterJoinOpInner(this);
	}
};

JoinOpInnerContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitJoinOpInner(this);
	}
};

JoinOpInnerContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitJoinOpInner(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function JoinOpLeftRightContext(parser, ctx) {
	JoinOpContext.call(this, parser);
    JoinOpContext.prototype.copyFrom.call(this, ctx);
    return this;
}

JoinOpLeftRightContext.prototype = Object.create(JoinOpContext.prototype);
JoinOpLeftRightContext.prototype.constructor = JoinOpLeftRightContext;

ClickHouseParser.JoinOpLeftRightContext = JoinOpLeftRightContext;

JoinOpLeftRightContext.prototype.LEFT = function() {
    return this.getToken(ClickHouseParser.LEFT, 0);
};

JoinOpLeftRightContext.prototype.RIGHT = function() {
    return this.getToken(ClickHouseParser.RIGHT, 0);
};

JoinOpLeftRightContext.prototype.OUTER = function() {
    return this.getToken(ClickHouseParser.OUTER, 0);
};

JoinOpLeftRightContext.prototype.SEMI = function() {
    return this.getToken(ClickHouseParser.SEMI, 0);
};

JoinOpLeftRightContext.prototype.ALL = function() {
    return this.getToken(ClickHouseParser.ALL, 0);
};

JoinOpLeftRightContext.prototype.ANTI = function() {
    return this.getToken(ClickHouseParser.ANTI, 0);
};

JoinOpLeftRightContext.prototype.ANY = function() {
    return this.getToken(ClickHouseParser.ANY, 0);
};

JoinOpLeftRightContext.prototype.ASOF = function() {
    return this.getToken(ClickHouseParser.ASOF, 0);
};
JoinOpLeftRightContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterJoinOpLeftRight(this);
	}
};

JoinOpLeftRightContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitJoinOpLeftRight(this);
	}
};

JoinOpLeftRightContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitJoinOpLeftRight(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.JoinOpContext = JoinOpContext;

ClickHouseParser.prototype.joinOp = function() {

    var localctx = new JoinOpContext(this, this._ctx, this.state);
    this.enterRule(localctx, 140, ClickHouseParser.RULE_joinOp);
    var _la = 0; // Token type
    try {
        this.state = 1393;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,185,this._ctx);
        switch(la_) {
        case 1:
            localctx = new JoinOpInnerContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1359;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,174,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1351;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0)) {
                    this.state = 1350;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 1353;
                this.match(ClickHouseParser.INNER);
                break;

            case 2:
                this.state = 1354;
                this.match(ClickHouseParser.INNER);
                this.state = 1356;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0)) {
                    this.state = 1355;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                break;

            case 3:
                this.state = 1358;
                _la = this._input.LA(1);
                if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0))) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                break;

            }
            break;

        case 2:
            localctx = new JoinOpLeftRightContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1375;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,179,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1362;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0) || _la===ClickHouseParser.SEMI) {
                    this.state = 1361;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0) || _la===ClickHouseParser.SEMI)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 1364;
                _la = this._input.LA(1);
                if(!(_la===ClickHouseParser.LEFT || _la===ClickHouseParser.RIGHT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1366;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.OUTER) {
                    this.state = 1365;
                    this.match(ClickHouseParser.OUTER);
                }

                break;

            case 2:
                this.state = 1368;
                _la = this._input.LA(1);
                if(!(_la===ClickHouseParser.LEFT || _la===ClickHouseParser.RIGHT)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1370;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.OUTER) {
                    this.state = 1369;
                    this.match(ClickHouseParser.OUTER);
                }

                this.state = 1373;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0) || _la===ClickHouseParser.SEMI) {
                    this.state = 1372;
                    _la = this._input.LA(1);
                    if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ASOF))) !== 0) || _la===ClickHouseParser.SEMI)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                break;

            }
            break;

        case 3:
            localctx = new JoinOpFullContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1391;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,184,this._ctx);
            switch(la_) {
            case 1:
                this.state = 1378;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.ALL || _la===ClickHouseParser.ANY) {
                    this.state = 1377;
                    _la = this._input.LA(1);
                    if(!(_la===ClickHouseParser.ALL || _la===ClickHouseParser.ANY)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                this.state = 1380;
                this.match(ClickHouseParser.FULL);
                this.state = 1382;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.OUTER) {
                    this.state = 1381;
                    this.match(ClickHouseParser.OUTER);
                }

                break;

            case 2:
                this.state = 1384;
                this.match(ClickHouseParser.FULL);
                this.state = 1386;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.OUTER) {
                    this.state = 1385;
                    this.match(ClickHouseParser.OUTER);
                }

                this.state = 1389;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.ALL || _la===ClickHouseParser.ANY) {
                    this.state = 1388;
                    _la = this._input.LA(1);
                    if(!(_la===ClickHouseParser.ALL || _la===ClickHouseParser.ANY)) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                }

                break;

            }
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinOpCrossContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_joinOpCross;
    return this;
}

JoinOpCrossContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinOpCrossContext.prototype.constructor = JoinOpCrossContext;

JoinOpCrossContext.prototype.CROSS = function() {
    return this.getToken(ClickHouseParser.CROSS, 0);
};

JoinOpCrossContext.prototype.JOIN = function() {
    return this.getToken(ClickHouseParser.JOIN, 0);
};

JoinOpCrossContext.prototype.GLOBAL = function() {
    return this.getToken(ClickHouseParser.GLOBAL, 0);
};

JoinOpCrossContext.prototype.LOCAL = function() {
    return this.getToken(ClickHouseParser.LOCAL, 0);
};

JoinOpCrossContext.prototype.COMMA = function() {
    return this.getToken(ClickHouseParser.COMMA, 0);
};

JoinOpCrossContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterJoinOpCross(this);
	}
};

JoinOpCrossContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitJoinOpCross(this);
	}
};

JoinOpCrossContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitJoinOpCross(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.JoinOpCrossContext = JoinOpCrossContext;

ClickHouseParser.prototype.joinOpCross = function() {

    var localctx = new JoinOpCrossContext(this, this._ctx, this.state);
    this.enterRule(localctx, 142, ClickHouseParser.RULE_joinOpCross);
    var _la = 0; // Token type
    try {
        this.state = 1401;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.CROSS:
        case ClickHouseParser.GLOBAL:
        case ClickHouseParser.LOCAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1396;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.GLOBAL || _la===ClickHouseParser.LOCAL) {
                this.state = 1395;
                _la = this._input.LA(1);
                if(!(_la===ClickHouseParser.GLOBAL || _la===ClickHouseParser.LOCAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
            }

            this.state = 1398;
            this.match(ClickHouseParser.CROSS);
            this.state = 1399;
            this.match(ClickHouseParser.JOIN);
            break;
        case ClickHouseParser.COMMA:
            this.enterOuterAlt(localctx, 2);
            this.state = 1400;
            this.match(ClickHouseParser.COMMA);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function JoinConstraintClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_joinConstraintClause;
    return this;
}

JoinConstraintClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
JoinConstraintClauseContext.prototype.constructor = JoinConstraintClauseContext;

JoinConstraintClauseContext.prototype.ON = function() {
    return this.getToken(ClickHouseParser.ON, 0);
};

JoinConstraintClauseContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

JoinConstraintClauseContext.prototype.USING = function() {
    return this.getToken(ClickHouseParser.USING, 0);
};

JoinConstraintClauseContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

JoinConstraintClauseContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

JoinConstraintClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterJoinConstraintClause(this);
	}
};

JoinConstraintClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitJoinConstraintClause(this);
	}
};

JoinConstraintClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitJoinConstraintClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.JoinConstraintClauseContext = JoinConstraintClauseContext;

ClickHouseParser.prototype.joinConstraintClause = function() {

    var localctx = new JoinConstraintClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 144, ClickHouseParser.RULE_joinConstraintClause);
    try {
        this.state = 1412;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,188,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1403;
            this.match(ClickHouseParser.ON);
            this.state = 1404;
            this.columnExprList();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1405;
            this.match(ClickHouseParser.USING);
            this.state = 1406;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1407;
            this.columnExprList();
            this.state = 1408;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1410;
            this.match(ClickHouseParser.USING);
            this.state = 1411;
            this.columnExprList();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SampleClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_sampleClause;
    return this;
}

SampleClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SampleClauseContext.prototype.constructor = SampleClauseContext;

SampleClauseContext.prototype.SAMPLE = function() {
    return this.getToken(ClickHouseParser.SAMPLE, 0);
};

SampleClauseContext.prototype.ratioExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(RatioExprContext);
    } else {
        return this.getTypedRuleContext(RatioExprContext,i);
    }
};

SampleClauseContext.prototype.OFFSET = function() {
    return this.getToken(ClickHouseParser.OFFSET, 0);
};

SampleClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSampleClause(this);
	}
};

SampleClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSampleClause(this);
	}
};

SampleClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSampleClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SampleClauseContext = SampleClauseContext;

ClickHouseParser.prototype.sampleClause = function() {

    var localctx = new SampleClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 146, ClickHouseParser.RULE_sampleClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1414;
        this.match(ClickHouseParser.SAMPLE);
        this.state = 1415;
        this.ratioExpr();
        this.state = 1418;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,189,this._ctx);
        if(la_===1) {
            this.state = 1416;
            this.match(ClickHouseParser.OFFSET);
            this.state = 1417;
            this.ratioExpr();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LimitExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_limitExpr;
    return this;
}

LimitExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LimitExprContext.prototype.constructor = LimitExprContext;

LimitExprContext.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

LimitExprContext.prototype.COMMA = function() {
    return this.getToken(ClickHouseParser.COMMA, 0);
};

LimitExprContext.prototype.OFFSET = function() {
    return this.getToken(ClickHouseParser.OFFSET, 0);
};

LimitExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterLimitExpr(this);
	}
};

LimitExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitLimitExpr(this);
	}
};

LimitExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitLimitExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.LimitExprContext = LimitExprContext;

ClickHouseParser.prototype.limitExpr = function() {

    var localctx = new LimitExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 148, ClickHouseParser.RULE_limitExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1420;
        this.columnExpr(0);
        this.state = 1423;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.OFFSET || _la===ClickHouseParser.COMMA) {
            this.state = 1421;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.OFFSET || _la===ClickHouseParser.COMMA)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1422;
            this.columnExpr(0);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderExprListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_orderExprList;
    return this;
}

OrderExprListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderExprListContext.prototype.constructor = OrderExprListContext;

OrderExprListContext.prototype.orderExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(OrderExprContext);
    } else {
        return this.getTypedRuleContext(OrderExprContext,i);
    }
};

OrderExprListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


OrderExprListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterOrderExprList(this);
	}
};

OrderExprListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitOrderExprList(this);
	}
};

OrderExprListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitOrderExprList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.OrderExprListContext = OrderExprListContext;

ClickHouseParser.prototype.orderExprList = function() {

    var localctx = new OrderExprListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 150, ClickHouseParser.RULE_orderExprList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1425;
        this.orderExpr();
        this.state = 1430;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,191,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1426;
                this.match(ClickHouseParser.COMMA);
                this.state = 1427;
                this.orderExpr(); 
            }
            this.state = 1432;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,191,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function OrderExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_orderExpr;
    return this;
}

OrderExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
OrderExprContext.prototype.constructor = OrderExprContext;

OrderExprContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

OrderExprContext.prototype.NULLS = function() {
    return this.getToken(ClickHouseParser.NULLS, 0);
};

OrderExprContext.prototype.COLLATE = function() {
    return this.getToken(ClickHouseParser.COLLATE, 0);
};

OrderExprContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

OrderExprContext.prototype.ASCENDING = function() {
    return this.getToken(ClickHouseParser.ASCENDING, 0);
};

OrderExprContext.prototype.DESCENDING = function() {
    return this.getToken(ClickHouseParser.DESCENDING, 0);
};

OrderExprContext.prototype.DESC = function() {
    return this.getToken(ClickHouseParser.DESC, 0);
};

OrderExprContext.prototype.FIRST = function() {
    return this.getToken(ClickHouseParser.FIRST, 0);
};

OrderExprContext.prototype.LAST = function() {
    return this.getToken(ClickHouseParser.LAST, 0);
};

OrderExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterOrderExpr(this);
	}
};

OrderExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitOrderExpr(this);
	}
};

OrderExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitOrderExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.OrderExprContext = OrderExprContext;

ClickHouseParser.prototype.orderExpr = function() {

    var localctx = new OrderExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 152, ClickHouseParser.RULE_orderExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1433;
        this.columnExpr(0);
        this.state = 1435;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,192,this._ctx);
        if(la_===1) {
            this.state = 1434;
            _la = this._input.LA(1);
            if(!(((((_la - 11)) & ~0x1f) == 0 && ((1 << (_la - 11)) & ((1 << (ClickHouseParser.ASCENDING - 11)) | (1 << (ClickHouseParser.DESC - 11)) | (1 << (ClickHouseParser.DESCENDING - 11)))) !== 0))) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1439;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,193,this._ctx);
        if(la_===1) {
            this.state = 1437;
            this.match(ClickHouseParser.NULLS);
            this.state = 1438;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.FIRST || _la===ClickHouseParser.LAST)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }

        }
        this.state = 1443;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,194,this._ctx);
        if(la_===1) {
            this.state = 1441;
            this.match(ClickHouseParser.COLLATE);
            this.state = 1442;
            this.match(ClickHouseParser.STRING_LITERAL);

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function RatioExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_ratioExpr;
    return this;
}

RatioExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
RatioExprContext.prototype.constructor = RatioExprContext;

RatioExprContext.prototype.numberLiteral = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(NumberLiteralContext);
    } else {
        return this.getTypedRuleContext(NumberLiteralContext,i);
    }
};

RatioExprContext.prototype.SLASH = function() {
    return this.getToken(ClickHouseParser.SLASH, 0);
};

RatioExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterRatioExpr(this);
	}
};

RatioExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitRatioExpr(this);
	}
};

RatioExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitRatioExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.RatioExprContext = RatioExprContext;

ClickHouseParser.prototype.ratioExpr = function() {

    var localctx = new RatioExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 154, ClickHouseParser.RULE_ratioExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1445;
        this.numberLiteral();
        this.state = 1448;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,195,this._ctx);
        if(la_===1) {
            this.state = 1446;
            this.match(ClickHouseParser.SLASH);
            this.state = 1447;
            this.numberLiteral();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SettingExprListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_settingExprList;
    return this;
}

SettingExprListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SettingExprListContext.prototype.constructor = SettingExprListContext;

SettingExprListContext.prototype.settingExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(SettingExprContext);
    } else {
        return this.getTypedRuleContext(SettingExprContext,i);
    }
};

SettingExprListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


SettingExprListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSettingExprList(this);
	}
};

SettingExprListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSettingExprList(this);
	}
};

SettingExprListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSettingExprList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SettingExprListContext = SettingExprListContext;

ClickHouseParser.prototype.settingExprList = function() {

    var localctx = new SettingExprListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 156, ClickHouseParser.RULE_settingExprList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1450;
        this.settingExpr();
        this.state = 1455;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,196,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1451;
                this.match(ClickHouseParser.COMMA);
                this.state = 1452;
                this.settingExpr(); 
            }
            this.state = 1457;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,196,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SettingExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_settingExpr;
    return this;
}

SettingExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SettingExprContext.prototype.constructor = SettingExprContext;

SettingExprContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

SettingExprContext.prototype.EQ_SINGLE = function() {
    return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
};

SettingExprContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

SettingExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSettingExpr(this);
	}
};

SettingExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSettingExpr(this);
	}
};

SettingExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSettingExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SettingExprContext = SettingExprContext;

ClickHouseParser.prototype.settingExpr = function() {

    var localctx = new SettingExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 158, ClickHouseParser.RULE_settingExpr);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1458;
        this.identifier();
        this.state = 1459;
        this.match(ClickHouseParser.EQ_SINGLE);
        this.state = 1460;
        this.literal();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WindowExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_windowExpr;
    return this;
}

WindowExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WindowExprContext.prototype.constructor = WindowExprContext;

WindowExprContext.prototype.winPartitionByClause = function() {
    return this.getTypedRuleContext(WinPartitionByClauseContext,0);
};

WindowExprContext.prototype.winOrderByClause = function() {
    return this.getTypedRuleContext(WinOrderByClauseContext,0);
};

WindowExprContext.prototype.winFrameClause = function() {
    return this.getTypedRuleContext(WinFrameClauseContext,0);
};

WindowExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterWindowExpr(this);
	}
};

WindowExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitWindowExpr(this);
	}
};

WindowExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitWindowExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.WindowExprContext = WindowExprContext;

ClickHouseParser.prototype.windowExpr = function() {

    var localctx = new WindowExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 160, ClickHouseParser.RULE_windowExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1463;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.PARTITION) {
            this.state = 1462;
            this.winPartitionByClause();
        }

        this.state = 1466;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ORDER) {
            this.state = 1465;
            this.winOrderByClause();
        }

        this.state = 1469;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.RANGE || _la===ClickHouseParser.ROWS) {
            this.state = 1468;
            this.winFrameClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WinPartitionByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_winPartitionByClause;
    return this;
}

WinPartitionByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WinPartitionByClauseContext.prototype.constructor = WinPartitionByClauseContext;

WinPartitionByClauseContext.prototype.PARTITION = function() {
    return this.getToken(ClickHouseParser.PARTITION, 0);
};

WinPartitionByClauseContext.prototype.BY = function() {
    return this.getToken(ClickHouseParser.BY, 0);
};

WinPartitionByClauseContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

WinPartitionByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterWinPartitionByClause(this);
	}
};

WinPartitionByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitWinPartitionByClause(this);
	}
};

WinPartitionByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitWinPartitionByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.WinPartitionByClauseContext = WinPartitionByClauseContext;

ClickHouseParser.prototype.winPartitionByClause = function() {

    var localctx = new WinPartitionByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 162, ClickHouseParser.RULE_winPartitionByClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1471;
        this.match(ClickHouseParser.PARTITION);
        this.state = 1472;
        this.match(ClickHouseParser.BY);
        this.state = 1473;
        this.columnExprList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WinOrderByClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_winOrderByClause;
    return this;
}

WinOrderByClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WinOrderByClauseContext.prototype.constructor = WinOrderByClauseContext;

WinOrderByClauseContext.prototype.ORDER = function() {
    return this.getToken(ClickHouseParser.ORDER, 0);
};

WinOrderByClauseContext.prototype.BY = function() {
    return this.getToken(ClickHouseParser.BY, 0);
};

WinOrderByClauseContext.prototype.orderExprList = function() {
    return this.getTypedRuleContext(OrderExprListContext,0);
};

WinOrderByClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterWinOrderByClause(this);
	}
};

WinOrderByClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitWinOrderByClause(this);
	}
};

WinOrderByClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitWinOrderByClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.WinOrderByClauseContext = WinOrderByClauseContext;

ClickHouseParser.prototype.winOrderByClause = function() {

    var localctx = new WinOrderByClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 164, ClickHouseParser.RULE_winOrderByClause);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1475;
        this.match(ClickHouseParser.ORDER);
        this.state = 1476;
        this.match(ClickHouseParser.BY);
        this.state = 1477;
        this.orderExprList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WinFrameClauseContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_winFrameClause;
    return this;
}

WinFrameClauseContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WinFrameClauseContext.prototype.constructor = WinFrameClauseContext;

WinFrameClauseContext.prototype.winFrameExtend = function() {
    return this.getTypedRuleContext(WinFrameExtendContext,0);
};

WinFrameClauseContext.prototype.ROWS = function() {
    return this.getToken(ClickHouseParser.ROWS, 0);
};

WinFrameClauseContext.prototype.RANGE = function() {
    return this.getToken(ClickHouseParser.RANGE, 0);
};

WinFrameClauseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterWinFrameClause(this);
	}
};

WinFrameClauseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitWinFrameClause(this);
	}
};

WinFrameClauseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitWinFrameClause(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.WinFrameClauseContext = WinFrameClauseContext;

ClickHouseParser.prototype.winFrameClause = function() {

    var localctx = new WinFrameClauseContext(this, this._ctx, this.state);
    this.enterRule(localctx, 166, ClickHouseParser.RULE_winFrameClause);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1479;
        _la = this._input.LA(1);
        if(!(_la===ClickHouseParser.RANGE || _la===ClickHouseParser.ROWS)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
        this.state = 1480;
        this.winFrameExtend();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WinFrameExtendContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_winFrameExtend;
    return this;
}

WinFrameExtendContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WinFrameExtendContext.prototype.constructor = WinFrameExtendContext;


 
WinFrameExtendContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function FrameStartContext(parser, ctx) {
	WinFrameExtendContext.call(this, parser);
    WinFrameExtendContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FrameStartContext.prototype = Object.create(WinFrameExtendContext.prototype);
FrameStartContext.prototype.constructor = FrameStartContext;

ClickHouseParser.FrameStartContext = FrameStartContext;

FrameStartContext.prototype.winFrameBound = function() {
    return this.getTypedRuleContext(WinFrameBoundContext,0);
};
FrameStartContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterFrameStart(this);
	}
};

FrameStartContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitFrameStart(this);
	}
};

FrameStartContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitFrameStart(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function FrameBetweenContext(parser, ctx) {
	WinFrameExtendContext.call(this, parser);
    WinFrameExtendContext.prototype.copyFrom.call(this, ctx);
    return this;
}

FrameBetweenContext.prototype = Object.create(WinFrameExtendContext.prototype);
FrameBetweenContext.prototype.constructor = FrameBetweenContext;

ClickHouseParser.FrameBetweenContext = FrameBetweenContext;

FrameBetweenContext.prototype.BETWEEN = function() {
    return this.getToken(ClickHouseParser.BETWEEN, 0);
};

FrameBetweenContext.prototype.winFrameBound = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(WinFrameBoundContext);
    } else {
        return this.getTypedRuleContext(WinFrameBoundContext,i);
    }
};

FrameBetweenContext.prototype.AND = function() {
    return this.getToken(ClickHouseParser.AND, 0);
};
FrameBetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterFrameBetween(this);
	}
};

FrameBetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitFrameBetween(this);
	}
};

FrameBetweenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitFrameBetween(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.WinFrameExtendContext = WinFrameExtendContext;

ClickHouseParser.prototype.winFrameExtend = function() {

    var localctx = new WinFrameExtendContext(this, this._ctx, this.state);
    this.enterRule(localctx, 168, ClickHouseParser.RULE_winFrameExtend);
    try {
        this.state = 1488;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.CURRENT:
        case ClickHouseParser.INF:
        case ClickHouseParser.NAN_SQL:
        case ClickHouseParser.UNBOUNDED:
        case ClickHouseParser.FLOATING_LITERAL:
        case ClickHouseParser.OCTAL_LITERAL:
        case ClickHouseParser.DECIMAL_LITERAL:
        case ClickHouseParser.HEXADECIMAL_LITERAL:
        case ClickHouseParser.DASH:
        case ClickHouseParser.DOT:
        case ClickHouseParser.PLUS:
            localctx = new FrameStartContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1482;
            this.winFrameBound();
            break;
        case ClickHouseParser.BETWEEN:
            localctx = new FrameBetweenContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1483;
            this.match(ClickHouseParser.BETWEEN);
            this.state = 1484;
            this.winFrameBound();
            this.state = 1485;
            this.match(ClickHouseParser.AND);
            this.state = 1486;
            this.winFrameBound();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WinFrameBoundContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_winFrameBound;
    return this;
}

WinFrameBoundContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WinFrameBoundContext.prototype.constructor = WinFrameBoundContext;

WinFrameBoundContext.prototype.CURRENT = function() {
    return this.getToken(ClickHouseParser.CURRENT, 0);
};

WinFrameBoundContext.prototype.ROW = function() {
    return this.getToken(ClickHouseParser.ROW, 0);
};

WinFrameBoundContext.prototype.UNBOUNDED = function() {
    return this.getToken(ClickHouseParser.UNBOUNDED, 0);
};

WinFrameBoundContext.prototype.PRECEDING = function() {
    return this.getToken(ClickHouseParser.PRECEDING, 0);
};

WinFrameBoundContext.prototype.FOLLOWING = function() {
    return this.getToken(ClickHouseParser.FOLLOWING, 0);
};

WinFrameBoundContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

WinFrameBoundContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterWinFrameBound(this);
	}
};

WinFrameBoundContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitWinFrameBound(this);
	}
};

WinFrameBoundContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitWinFrameBound(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.WinFrameBoundContext = WinFrameBoundContext;

ClickHouseParser.prototype.winFrameBound = function() {

    var localctx = new WinFrameBoundContext(this, this._ctx, this.state);
    this.enterRule(localctx, 170, ClickHouseParser.RULE_winFrameBound);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1502;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,201,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1490;
            this.match(ClickHouseParser.CURRENT);
            this.state = 1491;
            this.match(ClickHouseParser.ROW);
            break;

        case 2:
            this.state = 1492;
            this.match(ClickHouseParser.UNBOUNDED);
            this.state = 1493;
            this.match(ClickHouseParser.PRECEDING);
            break;

        case 3:
            this.state = 1494;
            this.match(ClickHouseParser.UNBOUNDED);
            this.state = 1495;
            this.match(ClickHouseParser.FOLLOWING);
            break;

        case 4:
            this.state = 1496;
            this.numberLiteral();
            this.state = 1497;
            this.match(ClickHouseParser.PRECEDING);
            break;

        case 5:
            this.state = 1499;
            this.numberLiteral();
            this.state = 1500;
            this.match(ClickHouseParser.FOLLOWING);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SetStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_setStmt;
    return this;
}

SetStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SetStmtContext.prototype.constructor = SetStmtContext;

SetStmtContext.prototype.SET = function() {
    return this.getToken(ClickHouseParser.SET, 0);
};

SetStmtContext.prototype.settingExprList = function() {
    return this.getTypedRuleContext(SettingExprListContext,0);
};

SetStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSetStmt(this);
	}
};

SetStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSetStmt(this);
	}
};

SetStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSetStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SetStmtContext = SetStmtContext;

ClickHouseParser.prototype.setStmt = function() {

    var localctx = new SetStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 172, ClickHouseParser.RULE_setStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1504;
        this.match(ClickHouseParser.SET);
        this.state = 1505;
        this.settingExprList();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ShowStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_showStmt;
    return this;
}

ShowStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ShowStmtContext.prototype.constructor = ShowStmtContext;


 
ShowStmtContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ShowCreateDatabaseStmtContext(parser, ctx) {
	ShowStmtContext.call(this, parser);
    ShowStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCreateDatabaseStmtContext.prototype = Object.create(ShowStmtContext.prototype);
ShowCreateDatabaseStmtContext.prototype.constructor = ShowCreateDatabaseStmtContext;

ClickHouseParser.ShowCreateDatabaseStmtContext = ShowCreateDatabaseStmtContext;

ShowCreateDatabaseStmtContext.prototype.SHOW = function() {
    return this.getToken(ClickHouseParser.SHOW, 0);
};

ShowCreateDatabaseStmtContext.prototype.CREATE = function() {
    return this.getToken(ClickHouseParser.CREATE, 0);
};

ShowCreateDatabaseStmtContext.prototype.DATABASE = function() {
    return this.getToken(ClickHouseParser.DATABASE, 0);
};

ShowCreateDatabaseStmtContext.prototype.databaseIdentifier = function() {
    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
};
ShowCreateDatabaseStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterShowCreateDatabaseStmt(this);
	}
};

ShowCreateDatabaseStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitShowCreateDatabaseStmt(this);
	}
};

ShowCreateDatabaseStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitShowCreateDatabaseStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowDatabasesStmtContext(parser, ctx) {
	ShowStmtContext.call(this, parser);
    ShowStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowDatabasesStmtContext.prototype = Object.create(ShowStmtContext.prototype);
ShowDatabasesStmtContext.prototype.constructor = ShowDatabasesStmtContext;

ClickHouseParser.ShowDatabasesStmtContext = ShowDatabasesStmtContext;

ShowDatabasesStmtContext.prototype.SHOW = function() {
    return this.getToken(ClickHouseParser.SHOW, 0);
};

ShowDatabasesStmtContext.prototype.DATABASES = function() {
    return this.getToken(ClickHouseParser.DATABASES, 0);
};
ShowDatabasesStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterShowDatabasesStmt(this);
	}
};

ShowDatabasesStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitShowDatabasesStmt(this);
	}
};

ShowDatabasesStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitShowDatabasesStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowCreateTableStmtContext(parser, ctx) {
	ShowStmtContext.call(this, parser);
    ShowStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCreateTableStmtContext.prototype = Object.create(ShowStmtContext.prototype);
ShowCreateTableStmtContext.prototype.constructor = ShowCreateTableStmtContext;

ClickHouseParser.ShowCreateTableStmtContext = ShowCreateTableStmtContext;

ShowCreateTableStmtContext.prototype.SHOW = function() {
    return this.getToken(ClickHouseParser.SHOW, 0);
};

ShowCreateTableStmtContext.prototype.CREATE = function() {
    return this.getToken(ClickHouseParser.CREATE, 0);
};

ShowCreateTableStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ShowCreateTableStmtContext.prototype.TEMPORARY = function() {
    return this.getToken(ClickHouseParser.TEMPORARY, 0);
};

ShowCreateTableStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};
ShowCreateTableStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterShowCreateTableStmt(this);
	}
};

ShowCreateTableStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitShowCreateTableStmt(this);
	}
};

ShowCreateTableStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitShowCreateTableStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowTablesStmtContext(parser, ctx) {
	ShowStmtContext.call(this, parser);
    ShowStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowTablesStmtContext.prototype = Object.create(ShowStmtContext.prototype);
ShowTablesStmtContext.prototype.constructor = ShowTablesStmtContext;

ClickHouseParser.ShowTablesStmtContext = ShowTablesStmtContext;

ShowTablesStmtContext.prototype.SHOW = function() {
    return this.getToken(ClickHouseParser.SHOW, 0);
};

ShowTablesStmtContext.prototype.TABLES = function() {
    return this.getToken(ClickHouseParser.TABLES, 0);
};

ShowTablesStmtContext.prototype.TEMPORARY = function() {
    return this.getToken(ClickHouseParser.TEMPORARY, 0);
};

ShowTablesStmtContext.prototype.databaseIdentifier = function() {
    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
};

ShowTablesStmtContext.prototype.LIKE = function() {
    return this.getToken(ClickHouseParser.LIKE, 0);
};

ShowTablesStmtContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

ShowTablesStmtContext.prototype.whereClause = function() {
    return this.getTypedRuleContext(WhereClauseContext,0);
};

ShowTablesStmtContext.prototype.limitClause = function() {
    return this.getTypedRuleContext(LimitClauseContext,0);
};

ShowTablesStmtContext.prototype.FROM = function() {
    return this.getToken(ClickHouseParser.FROM, 0);
};

ShowTablesStmtContext.prototype.IN = function() {
    return this.getToken(ClickHouseParser.IN, 0);
};
ShowTablesStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterShowTablesStmt(this);
	}
};

ShowTablesStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitShowTablesStmt(this);
	}
};

ShowTablesStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitShowTablesStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowDictionariesStmtContext(parser, ctx) {
	ShowStmtContext.call(this, parser);
    ShowStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowDictionariesStmtContext.prototype = Object.create(ShowStmtContext.prototype);
ShowDictionariesStmtContext.prototype.constructor = ShowDictionariesStmtContext;

ClickHouseParser.ShowDictionariesStmtContext = ShowDictionariesStmtContext;

ShowDictionariesStmtContext.prototype.SHOW = function() {
    return this.getToken(ClickHouseParser.SHOW, 0);
};

ShowDictionariesStmtContext.prototype.DICTIONARIES = function() {
    return this.getToken(ClickHouseParser.DICTIONARIES, 0);
};

ShowDictionariesStmtContext.prototype.FROM = function() {
    return this.getToken(ClickHouseParser.FROM, 0);
};

ShowDictionariesStmtContext.prototype.databaseIdentifier = function() {
    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
};
ShowDictionariesStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterShowDictionariesStmt(this);
	}
};

ShowDictionariesStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitShowDictionariesStmt(this);
	}
};

ShowDictionariesStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitShowDictionariesStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ShowCreateDictionaryStmtContext(parser, ctx) {
	ShowStmtContext.call(this, parser);
    ShowStmtContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ShowCreateDictionaryStmtContext.prototype = Object.create(ShowStmtContext.prototype);
ShowCreateDictionaryStmtContext.prototype.constructor = ShowCreateDictionaryStmtContext;

ClickHouseParser.ShowCreateDictionaryStmtContext = ShowCreateDictionaryStmtContext;

ShowCreateDictionaryStmtContext.prototype.SHOW = function() {
    return this.getToken(ClickHouseParser.SHOW, 0);
};

ShowCreateDictionaryStmtContext.prototype.CREATE = function() {
    return this.getToken(ClickHouseParser.CREATE, 0);
};

ShowCreateDictionaryStmtContext.prototype.DICTIONARY = function() {
    return this.getToken(ClickHouseParser.DICTIONARY, 0);
};

ShowCreateDictionaryStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};
ShowCreateDictionaryStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterShowCreateDictionaryStmt(this);
	}
};

ShowCreateDictionaryStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitShowCreateDictionaryStmt(this);
	}
};

ShowCreateDictionaryStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitShowCreateDictionaryStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.ShowStmtContext = ShowStmtContext;

ClickHouseParser.prototype.showStmt = function() {

    var localctx = new ShowStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 174, ClickHouseParser.RULE_showStmt);
    var _la = 0; // Token type
    try {
        this.state = 1549;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,209,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ShowCreateDatabaseStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1507;
            this.match(ClickHouseParser.SHOW);
            this.state = 1508;
            this.match(ClickHouseParser.CREATE);
            this.state = 1509;
            this.match(ClickHouseParser.DATABASE);
            this.state = 1510;
            this.databaseIdentifier();
            break;

        case 2:
            localctx = new ShowCreateDictionaryStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1511;
            this.match(ClickHouseParser.SHOW);
            this.state = 1512;
            this.match(ClickHouseParser.CREATE);
            this.state = 1513;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 1514;
            this.tableIdentifier();
            break;

        case 3:
            localctx = new ShowCreateTableStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1515;
            this.match(ClickHouseParser.SHOW);
            this.state = 1516;
            this.match(ClickHouseParser.CREATE);
            this.state = 1518;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,202,this._ctx);
            if(la_===1) {
                this.state = 1517;
                this.match(ClickHouseParser.TEMPORARY);

            }
            this.state = 1521;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,203,this._ctx);
            if(la_===1) {
                this.state = 1520;
                this.match(ClickHouseParser.TABLE);

            }
            this.state = 1523;
            this.tableIdentifier();
            break;

        case 4:
            localctx = new ShowDatabasesStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1524;
            this.match(ClickHouseParser.SHOW);
            this.state = 1525;
            this.match(ClickHouseParser.DATABASES);
            break;

        case 5:
            localctx = new ShowDictionariesStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1526;
            this.match(ClickHouseParser.SHOW);
            this.state = 1527;
            this.match(ClickHouseParser.DICTIONARIES);
            this.state = 1530;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.FROM) {
                this.state = 1528;
                this.match(ClickHouseParser.FROM);
                this.state = 1529;
                this.databaseIdentifier();
            }

            break;

        case 6:
            localctx = new ShowTablesStmtContext(this, localctx);
            this.enterOuterAlt(localctx, 6);
            this.state = 1532;
            this.match(ClickHouseParser.SHOW);
            this.state = 1534;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.TEMPORARY) {
                this.state = 1533;
                this.match(ClickHouseParser.TEMPORARY);
            }

            this.state = 1536;
            this.match(ClickHouseParser.TABLES);
            this.state = 1539;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.FROM || _la===ClickHouseParser.IN) {
                this.state = 1537;
                _la = this._input.LA(1);
                if(!(_la===ClickHouseParser.FROM || _la===ClickHouseParser.IN)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }
                this.state = 1538;
                this.databaseIdentifier();
            }

            this.state = 1544;
            this._errHandler.sync(this);
            switch (this._input.LA(1)) {
            case ClickHouseParser.LIKE:
            	this.state = 1541;
            	this.match(ClickHouseParser.LIKE);
            	this.state = 1542;
            	this.match(ClickHouseParser.STRING_LITERAL);
            	break;
            case ClickHouseParser.WHERE:
            	this.state = 1543;
            	this.whereClause();
            	break;
            case ClickHouseParser.EOF:
            case ClickHouseParser.ALTER:
            case ClickHouseParser.ATTACH:
            case ClickHouseParser.CHECK:
            case ClickHouseParser.CREATE:
            case ClickHouseParser.DESC:
            case ClickHouseParser.DESCRIBE:
            case ClickHouseParser.DETACH:
            case ClickHouseParser.DROP:
            case ClickHouseParser.EXISTS:
            case ClickHouseParser.EXPLAIN:
            case ClickHouseParser.FORMAT:
            case ClickHouseParser.INSERT:
            case ClickHouseParser.INTO:
            case ClickHouseParser.KILL:
            case ClickHouseParser.LIMIT:
            case ClickHouseParser.OPTIMIZE:
            case ClickHouseParser.RENAME:
            case ClickHouseParser.REPLACE:
            case ClickHouseParser.SELECT:
            case ClickHouseParser.SET:
            case ClickHouseParser.SHOW:
            case ClickHouseParser.SYSTEM:
            case ClickHouseParser.TRUNCATE:
            case ClickHouseParser.USE:
            case ClickHouseParser.WATCH:
            case ClickHouseParser.WITH:
            case ClickHouseParser.LPAREN:
            case ClickHouseParser.SEMICOLON:
            	break;
            default:
            	break;
            }
            this.state = 1547;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.LIMIT) {
                this.state = 1546;
                this.limitClause();
            }

            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function SystemStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_systemStmt;
    return this;
}

SystemStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
SystemStmtContext.prototype.constructor = SystemStmtContext;

SystemStmtContext.prototype.SYSTEM = function() {
    return this.getToken(ClickHouseParser.SYSTEM, 0);
};

SystemStmtContext.prototype.FLUSH = function() {
    return this.getToken(ClickHouseParser.FLUSH, 0);
};

SystemStmtContext.prototype.DISTRIBUTED = function() {
    return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
};

SystemStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

SystemStmtContext.prototype.LOGS = function() {
    return this.getToken(ClickHouseParser.LOGS, 0);
};

SystemStmtContext.prototype.RELOAD = function() {
    return this.getToken(ClickHouseParser.RELOAD, 0);
};

SystemStmtContext.prototype.DICTIONARIES = function() {
    return this.getToken(ClickHouseParser.DICTIONARIES, 0);
};

SystemStmtContext.prototype.DICTIONARY = function() {
    return this.getToken(ClickHouseParser.DICTIONARY, 0);
};

SystemStmtContext.prototype.START = function() {
    return this.getToken(ClickHouseParser.START, 0);
};

SystemStmtContext.prototype.STOP = function() {
    return this.getToken(ClickHouseParser.STOP, 0);
};

SystemStmtContext.prototype.SENDS = function() {
    return this.getToken(ClickHouseParser.SENDS, 0);
};

SystemStmtContext.prototype.FETCHES = function() {
    return this.getToken(ClickHouseParser.FETCHES, 0);
};

SystemStmtContext.prototype.MERGES = function() {
    return this.getToken(ClickHouseParser.MERGES, 0);
};

SystemStmtContext.prototype.TTL = function() {
    return this.getToken(ClickHouseParser.TTL, 0);
};

SystemStmtContext.prototype.REPLICATED = function() {
    return this.getToken(ClickHouseParser.REPLICATED, 0);
};

SystemStmtContext.prototype.SYNC = function() {
    return this.getToken(ClickHouseParser.SYNC, 0);
};

SystemStmtContext.prototype.REPLICA = function() {
    return this.getToken(ClickHouseParser.REPLICA, 0);
};

SystemStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterSystemStmt(this);
	}
};

SystemStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitSystemStmt(this);
	}
};

SystemStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitSystemStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.SystemStmtContext = SystemStmtContext;

ClickHouseParser.prototype.systemStmt = function() {

    var localctx = new SystemStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 176, ClickHouseParser.RULE_systemStmt);
    var _la = 0; // Token type
    try {
        this.state = 1585;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,212,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1551;
            this.match(ClickHouseParser.SYSTEM);
            this.state = 1552;
            this.match(ClickHouseParser.FLUSH);
            this.state = 1553;
            this.match(ClickHouseParser.DISTRIBUTED);
            this.state = 1554;
            this.tableIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1555;
            this.match(ClickHouseParser.SYSTEM);
            this.state = 1556;
            this.match(ClickHouseParser.FLUSH);
            this.state = 1557;
            this.match(ClickHouseParser.LOGS);
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1558;
            this.match(ClickHouseParser.SYSTEM);
            this.state = 1559;
            this.match(ClickHouseParser.RELOAD);
            this.state = 1560;
            this.match(ClickHouseParser.DICTIONARIES);
            break;

        case 4:
            this.enterOuterAlt(localctx, 4);
            this.state = 1561;
            this.match(ClickHouseParser.SYSTEM);
            this.state = 1562;
            this.match(ClickHouseParser.RELOAD);
            this.state = 1563;
            this.match(ClickHouseParser.DICTIONARY);
            this.state = 1564;
            this.tableIdentifier();
            break;

        case 5:
            this.enterOuterAlt(localctx, 5);
            this.state = 1565;
            this.match(ClickHouseParser.SYSTEM);
            this.state = 1566;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.START || _la===ClickHouseParser.STOP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1574;
            this._errHandler.sync(this);
            switch(this._input.LA(1)) {
            case ClickHouseParser.DISTRIBUTED:
                this.state = 1567;
                this.match(ClickHouseParser.DISTRIBUTED);
                this.state = 1568;
                this.match(ClickHouseParser.SENDS);
                break;
            case ClickHouseParser.FETCHES:
                this.state = 1569;
                this.match(ClickHouseParser.FETCHES);
                break;
            case ClickHouseParser.MERGES:
            case ClickHouseParser.TTL:
                this.state = 1571;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if(_la===ClickHouseParser.TTL) {
                    this.state = 1570;
                    this.match(ClickHouseParser.TTL);
                }

                this.state = 1573;
                this.match(ClickHouseParser.MERGES);
                break;
            default:
                throw new antlr4.error.NoViableAltException(this);
            }
            this.state = 1576;
            this.tableIdentifier();
            break;

        case 6:
            this.enterOuterAlt(localctx, 6);
            this.state = 1577;
            this.match(ClickHouseParser.SYSTEM);
            this.state = 1578;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.START || _la===ClickHouseParser.STOP)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1579;
            this.match(ClickHouseParser.REPLICATED);
            this.state = 1580;
            this.match(ClickHouseParser.SENDS);
            break;

        case 7:
            this.enterOuterAlt(localctx, 7);
            this.state = 1581;
            this.match(ClickHouseParser.SYSTEM);
            this.state = 1582;
            this.match(ClickHouseParser.SYNC);
            this.state = 1583;
            this.match(ClickHouseParser.REPLICA);
            this.state = 1584;
            this.tableIdentifier();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TruncateStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_truncateStmt;
    return this;
}

TruncateStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TruncateStmtContext.prototype.constructor = TruncateStmtContext;

TruncateStmtContext.prototype.TRUNCATE = function() {
    return this.getToken(ClickHouseParser.TRUNCATE, 0);
};

TruncateStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

TruncateStmtContext.prototype.TEMPORARY = function() {
    return this.getToken(ClickHouseParser.TEMPORARY, 0);
};

TruncateStmtContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

TruncateStmtContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

TruncateStmtContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

TruncateStmtContext.prototype.clusterClause = function() {
    return this.getTypedRuleContext(ClusterClauseContext,0);
};

TruncateStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTruncateStmt(this);
	}
};

TruncateStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTruncateStmt(this);
	}
};

TruncateStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTruncateStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TruncateStmtContext = TruncateStmtContext;

ClickHouseParser.prototype.truncateStmt = function() {

    var localctx = new TruncateStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 178, ClickHouseParser.RULE_truncateStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1587;
        this.match(ClickHouseParser.TRUNCATE);
        this.state = 1589;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,213,this._ctx);
        if(la_===1) {
            this.state = 1588;
            this.match(ClickHouseParser.TEMPORARY);

        }
        this.state = 1592;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,214,this._ctx);
        if(la_===1) {
            this.state = 1591;
            this.match(ClickHouseParser.TABLE);

        }
        this.state = 1596;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,215,this._ctx);
        if(la_===1) {
            this.state = 1594;
            this.match(ClickHouseParser.IF);
            this.state = 1595;
            this.match(ClickHouseParser.EXISTS);

        }
        this.state = 1598;
        this.tableIdentifier();
        this.state = 1600;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.ON) {
            this.state = 1599;
            this.clusterClause();
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function UseStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_useStmt;
    return this;
}

UseStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
UseStmtContext.prototype.constructor = UseStmtContext;

UseStmtContext.prototype.USE = function() {
    return this.getToken(ClickHouseParser.USE, 0);
};

UseStmtContext.prototype.databaseIdentifier = function() {
    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
};

UseStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterUseStmt(this);
	}
};

UseStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitUseStmt(this);
	}
};

UseStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitUseStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.UseStmtContext = UseStmtContext;

ClickHouseParser.prototype.useStmt = function() {

    var localctx = new UseStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 180, ClickHouseParser.RULE_useStmt);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1602;
        this.match(ClickHouseParser.USE);
        this.state = 1603;
        this.databaseIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function WatchStmtContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_watchStmt;
    return this;
}

WatchStmtContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
WatchStmtContext.prototype.constructor = WatchStmtContext;

WatchStmtContext.prototype.WATCH = function() {
    return this.getToken(ClickHouseParser.WATCH, 0);
};

WatchStmtContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

WatchStmtContext.prototype.EVENTS = function() {
    return this.getToken(ClickHouseParser.EVENTS, 0);
};

WatchStmtContext.prototype.LIMIT = function() {
    return this.getToken(ClickHouseParser.LIMIT, 0);
};

WatchStmtContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
};

WatchStmtContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterWatchStmt(this);
	}
};

WatchStmtContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitWatchStmt(this);
	}
};

WatchStmtContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitWatchStmt(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.WatchStmtContext = WatchStmtContext;

ClickHouseParser.prototype.watchStmt = function() {

    var localctx = new WatchStmtContext(this, this._ctx, this.state);
    this.enterRule(localctx, 182, ClickHouseParser.RULE_watchStmt);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1605;
        this.match(ClickHouseParser.WATCH);
        this.state = 1606;
        this.tableIdentifier();
        this.state = 1608;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.EVENTS) {
            this.state = 1607;
            this.match(ClickHouseParser.EVENTS);
        }

        this.state = 1612;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.LIMIT) {
            this.state = 1610;
            this.match(ClickHouseParser.LIMIT);
            this.state = 1611;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnTypeExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_columnTypeExpr;
    return this;
}

ColumnTypeExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnTypeExprContext.prototype.constructor = ColumnTypeExprContext;


 
ColumnTypeExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ColumnTypeExprNestedContext(parser, ctx) {
	ColumnTypeExprContext.call(this, parser);
    ColumnTypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnTypeExprNestedContext.prototype = Object.create(ColumnTypeExprContext.prototype);
ColumnTypeExprNestedContext.prototype.constructor = ColumnTypeExprNestedContext;

ClickHouseParser.ColumnTypeExprNestedContext = ColumnTypeExprNestedContext;

ColumnTypeExprNestedContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ColumnTypeExprNestedContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnTypeExprNestedContext.prototype.columnTypeExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnTypeExprContext);
    } else {
        return this.getTypedRuleContext(ColumnTypeExprContext,i);
    }
};

ColumnTypeExprNestedContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

ColumnTypeExprNestedContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};

ColumnTypeExprNestedContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnTypeExprNested(this);
	}
};

ColumnTypeExprNestedContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnTypeExprNested(this);
	}
};

ColumnTypeExprNestedContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnTypeExprNested(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnTypeExprParamContext(parser, ctx) {
	ColumnTypeExprContext.call(this, parser);
    ColumnTypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnTypeExprParamContext.prototype = Object.create(ColumnTypeExprContext.prototype);
ColumnTypeExprParamContext.prototype.constructor = ColumnTypeExprParamContext;

ClickHouseParser.ColumnTypeExprParamContext = ColumnTypeExprParamContext;

ColumnTypeExprParamContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColumnTypeExprParamContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnTypeExprParamContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

ColumnTypeExprParamContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};
ColumnTypeExprParamContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnTypeExprParam(this);
	}
};

ColumnTypeExprParamContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnTypeExprParam(this);
	}
};

ColumnTypeExprParamContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnTypeExprParam(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnTypeExprSimpleContext(parser, ctx) {
	ColumnTypeExprContext.call(this, parser);
    ColumnTypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnTypeExprSimpleContext.prototype = Object.create(ColumnTypeExprContext.prototype);
ColumnTypeExprSimpleContext.prototype.constructor = ColumnTypeExprSimpleContext;

ClickHouseParser.ColumnTypeExprSimpleContext = ColumnTypeExprSimpleContext;

ColumnTypeExprSimpleContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ColumnTypeExprSimpleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnTypeExprSimple(this);
	}
};

ColumnTypeExprSimpleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnTypeExprSimple(this);
	}
};

ColumnTypeExprSimpleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnTypeExprSimple(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnTypeExprComplexContext(parser, ctx) {
	ColumnTypeExprContext.call(this, parser);
    ColumnTypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnTypeExprComplexContext.prototype = Object.create(ColumnTypeExprContext.prototype);
ColumnTypeExprComplexContext.prototype.constructor = ColumnTypeExprComplexContext;

ClickHouseParser.ColumnTypeExprComplexContext = ColumnTypeExprComplexContext;

ColumnTypeExprComplexContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColumnTypeExprComplexContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnTypeExprComplexContext.prototype.columnTypeExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnTypeExprContext);
    } else {
        return this.getTypedRuleContext(ColumnTypeExprContext,i);
    }
};

ColumnTypeExprComplexContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

ColumnTypeExprComplexContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};

ColumnTypeExprComplexContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnTypeExprComplex(this);
	}
};

ColumnTypeExprComplexContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnTypeExprComplex(this);
	}
};

ColumnTypeExprComplexContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnTypeExprComplex(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnTypeExprEnumContext(parser, ctx) {
	ColumnTypeExprContext.call(this, parser);
    ColumnTypeExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnTypeExprEnumContext.prototype = Object.create(ColumnTypeExprContext.prototype);
ColumnTypeExprEnumContext.prototype.constructor = ColumnTypeExprEnumContext;

ClickHouseParser.ColumnTypeExprEnumContext = ColumnTypeExprEnumContext;

ColumnTypeExprEnumContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColumnTypeExprEnumContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnTypeExprEnumContext.prototype.enumValue = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(EnumValueContext);
    } else {
        return this.getTypedRuleContext(EnumValueContext,i);
    }
};

ColumnTypeExprEnumContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

ColumnTypeExprEnumContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};

ColumnTypeExprEnumContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnTypeExprEnum(this);
	}
};

ColumnTypeExprEnumContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnTypeExprEnum(this);
	}
};

ColumnTypeExprEnumContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnTypeExprEnum(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.ColumnTypeExprContext = ColumnTypeExprContext;

ClickHouseParser.prototype.columnTypeExpr = function() {

    var localctx = new ColumnTypeExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 184, ClickHouseParser.RULE_columnTypeExpr);
    var _la = 0; // Token type
    try {
        this.state = 1661;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,223,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ColumnTypeExprSimpleContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1614;
            this.identifier();
            break;

        case 2:
            localctx = new ColumnTypeExprNestedContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1615;
            this.identifier();
            this.state = 1616;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1617;
            this.identifier();
            this.state = 1618;
            this.columnTypeExpr();
            this.state = 1625;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ClickHouseParser.COMMA) {
                this.state = 1619;
                this.match(ClickHouseParser.COMMA);
                this.state = 1620;
                this.identifier();
                this.state = 1621;
                this.columnTypeExpr();
                this.state = 1627;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1628;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 3:
            localctx = new ColumnTypeExprEnumContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1630;
            this.identifier();
            this.state = 1631;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1632;
            this.enumValue();
            this.state = 1637;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ClickHouseParser.COMMA) {
                this.state = 1633;
                this.match(ClickHouseParser.COMMA);
                this.state = 1634;
                this.enumValue();
                this.state = 1639;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1640;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 4:
            localctx = new ColumnTypeExprComplexContext(this, localctx);
            this.enterOuterAlt(localctx, 4);
            this.state = 1642;
            this.identifier();
            this.state = 1643;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1644;
            this.columnTypeExpr();
            this.state = 1649;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ClickHouseParser.COMMA) {
                this.state = 1645;
                this.match(ClickHouseParser.COMMA);
                this.state = 1646;
                this.columnTypeExpr();
                this.state = 1651;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1652;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 5:
            localctx = new ColumnTypeExprParamContext(this, localctx);
            this.enterOuterAlt(localctx, 5);
            this.state = 1654;
            this.identifier();
            this.state = 1655;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1657;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
                this.state = 1656;
                this.columnExprList();
            }

            this.state = 1659;
            this.match(ClickHouseParser.RPAREN);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnExprListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_columnExprList;
    return this;
}

ColumnExprListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnExprListContext.prototype.constructor = ColumnExprListContext;

ColumnExprListContext.prototype.columnsExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnsExprContext);
    } else {
        return this.getTypedRuleContext(ColumnsExprContext,i);
    }
};

ColumnExprListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


ColumnExprListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprList(this);
	}
};

ColumnExprListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprList(this);
	}
};

ColumnExprListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.ColumnExprListContext = ColumnExprListContext;

ClickHouseParser.prototype.columnExprList = function() {

    var localctx = new ColumnExprListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 186, ClickHouseParser.RULE_columnExprList);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1663;
        this.columnsExpr();
        this.state = 1668;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,224,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                this.state = 1664;
                this.match(ClickHouseParser.COMMA);
                this.state = 1665;
                this.columnsExpr(); 
            }
            this.state = 1670;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,224,this._ctx);
        }

    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnsExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_columnsExpr;
    return this;
}

ColumnsExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnsExprContext.prototype.constructor = ColumnsExprContext;


 
ColumnsExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};


function ColumnsExprColumnContext(parser, ctx) {
	ColumnsExprContext.call(this, parser);
    ColumnsExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnsExprColumnContext.prototype = Object.create(ColumnsExprContext.prototype);
ColumnsExprColumnContext.prototype.constructor = ColumnsExprColumnContext;

ClickHouseParser.ColumnsExprColumnContext = ColumnsExprColumnContext;

ColumnsExprColumnContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};
ColumnsExprColumnContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnsExprColumn(this);
	}
};

ColumnsExprColumnContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnsExprColumn(this);
	}
};

ColumnsExprColumnContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnsExprColumn(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnsExprAsteriskContext(parser, ctx) {
	ColumnsExprContext.call(this, parser);
    ColumnsExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnsExprAsteriskContext.prototype = Object.create(ColumnsExprContext.prototype);
ColumnsExprAsteriskContext.prototype.constructor = ColumnsExprAsteriskContext;

ClickHouseParser.ColumnsExprAsteriskContext = ColumnsExprAsteriskContext;

ColumnsExprAsteriskContext.prototype.ASTERISK = function() {
    return this.getToken(ClickHouseParser.ASTERISK, 0);
};

ColumnsExprAsteriskContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ColumnsExprAsteriskContext.prototype.DOT = function() {
    return this.getToken(ClickHouseParser.DOT, 0);
};
ColumnsExprAsteriskContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnsExprAsterisk(this);
	}
};

ColumnsExprAsteriskContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnsExprAsterisk(this);
	}
};

ColumnsExprAsteriskContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnsExprAsterisk(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnsExprSubqueryContext(parser, ctx) {
	ColumnsExprContext.call(this, parser);
    ColumnsExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnsExprSubqueryContext.prototype = Object.create(ColumnsExprContext.prototype);
ColumnsExprSubqueryContext.prototype.constructor = ColumnsExprSubqueryContext;

ClickHouseParser.ColumnsExprSubqueryContext = ColumnsExprSubqueryContext;

ColumnsExprSubqueryContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnsExprSubqueryContext.prototype.selectUnionStmt = function() {
    return this.getTypedRuleContext(SelectUnionStmtContext,0);
};

ColumnsExprSubqueryContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};
ColumnsExprSubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnsExprSubquery(this);
	}
};

ColumnsExprSubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnsExprSubquery(this);
	}
};

ColumnsExprSubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnsExprSubquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.ColumnsExprContext = ColumnsExprContext;

ClickHouseParser.prototype.columnsExpr = function() {

    var localctx = new ColumnsExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 188, ClickHouseParser.RULE_columnsExpr);
    var _la = 0; // Token type
    try {
        this.state = 1682;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,226,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ColumnsExprAsteriskContext(this, localctx);
            this.enterOuterAlt(localctx, 1);
            this.state = 1674;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ClickHouseParser.DATABASES - 34)) | (1 << (ClickHouseParser.DATE - 34)) | (1 << (ClickHouseParser.DAY - 34)) | (1 << (ClickHouseParser.DEDUPLICATE - 34)) | (1 << (ClickHouseParser.DEFAULT - 34)) | (1 << (ClickHouseParser.DELAY - 34)) | (1 << (ClickHouseParser.DELETE - 34)) | (1 << (ClickHouseParser.DESC - 34)) | (1 << (ClickHouseParser.DESCENDING - 34)) | (1 << (ClickHouseParser.DESCRIBE - 34)) | (1 << (ClickHouseParser.DETACH - 34)) | (1 << (ClickHouseParser.DICTIONARIES - 34)) | (1 << (ClickHouseParser.DICTIONARY - 34)) | (1 << (ClickHouseParser.DISK - 34)) | (1 << (ClickHouseParser.DISTINCT - 34)) | (1 << (ClickHouseParser.DISTRIBUTED - 34)) | (1 << (ClickHouseParser.DROP - 34)) | (1 << (ClickHouseParser.ELSE - 34)) | (1 << (ClickHouseParser.END - 34)) | (1 << (ClickHouseParser.ENGINE - 34)) | (1 << (ClickHouseParser.EVENTS - 34)) | (1 << (ClickHouseParser.EXISTS - 34)) | (1 << (ClickHouseParser.EXPLAIN - 34)) | (1 << (ClickHouseParser.EXPRESSION - 34)) | (1 << (ClickHouseParser.EXTRACT - 34)) | (1 << (ClickHouseParser.FETCHES - 34)) | (1 << (ClickHouseParser.FINAL - 34)) | (1 << (ClickHouseParser.FIRST - 34)) | (1 << (ClickHouseParser.FLUSH - 34)) | (1 << (ClickHouseParser.FOLLOWING - 34)) | (1 << (ClickHouseParser.FOR - 34)) | (1 << (ClickHouseParser.FORMAT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ClickHouseParser.LIMIT - 98)) | (1 << (ClickHouseParser.LIVE - 98)) | (1 << (ClickHouseParser.LOCAL - 98)) | (1 << (ClickHouseParser.LOGS - 98)) | (1 << (ClickHouseParser.MATERIALIZE - 98)) | (1 << (ClickHouseParser.MATERIALIZED - 98)) | (1 << (ClickHouseParser.MAX - 98)) | (1 << (ClickHouseParser.MERGES - 98)) | (1 << (ClickHouseParser.MIN - 98)) | (1 << (ClickHouseParser.MINUTE - 98)) | (1 << (ClickHouseParser.MODIFY - 98)) | (1 << (ClickHouseParser.MONTH - 98)) | (1 << (ClickHouseParser.MOVE - 98)) | (1 << (ClickHouseParser.MUTATION - 98)) | (1 << (ClickHouseParser.NO - 98)) | (1 << (ClickHouseParser.NOT - 98)) | (1 << (ClickHouseParser.NULLS - 98)) | (1 << (ClickHouseParser.OFFSET - 98)) | (1 << (ClickHouseParser.ON - 98)) | (1 << (ClickHouseParser.OPTIMIZE - 98)) | (1 << (ClickHouseParser.OR - 98)) | (1 << (ClickHouseParser.ORDER - 98)) | (1 << (ClickHouseParser.OUTER - 98)) | (1 << (ClickHouseParser.OUTFILE - 98)) | (1 << (ClickHouseParser.OVER - 98)) | (1 << (ClickHouseParser.PARTITION - 98)) | (1 << (ClickHouseParser.POPULATE - 98)) | (1 << (ClickHouseParser.PRECEDING - 98)) | (1 << (ClickHouseParser.PREWHERE - 98)) | (1 << (ClickHouseParser.PRIMARY - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (ClickHouseParser.TIES - 163)) | (1 << (ClickHouseParser.TIMEOUT - 163)) | (1 << (ClickHouseParser.TIMESTAMP - 163)) | (1 << (ClickHouseParser.TO - 163)) | (1 << (ClickHouseParser.TOP - 163)) | (1 << (ClickHouseParser.TOTALS - 163)) | (1 << (ClickHouseParser.TRAILING - 163)) | (1 << (ClickHouseParser.TRIM - 163)) | (1 << (ClickHouseParser.TRUNCATE - 163)) | (1 << (ClickHouseParser.TTL - 163)) | (1 << (ClickHouseParser.TYPE - 163)) | (1 << (ClickHouseParser.UNBOUNDED - 163)) | (1 << (ClickHouseParser.UNION - 163)) | (1 << (ClickHouseParser.UPDATE - 163)) | (1 << (ClickHouseParser.USE - 163)) | (1 << (ClickHouseParser.USING - 163)) | (1 << (ClickHouseParser.UUID - 163)) | (1 << (ClickHouseParser.VALUES - 163)) | (1 << (ClickHouseParser.VIEW - 163)) | (1 << (ClickHouseParser.VOLUME - 163)) | (1 << (ClickHouseParser.WATCH - 163)) | (1 << (ClickHouseParser.WEEK - 163)) | (1 << (ClickHouseParser.WHEN - 163)) | (1 << (ClickHouseParser.WHERE - 163)) | (1 << (ClickHouseParser.WINDOW - 163)) | (1 << (ClickHouseParser.WITH - 163)) | (1 << (ClickHouseParser.YEAR - 163)) | (1 << (ClickHouseParser.JSON_FALSE - 163)) | (1 << (ClickHouseParser.JSON_TRUE - 163)) | (1 << (ClickHouseParser.IDENTIFIER - 163)))) !== 0)) {
                this.state = 1671;
                this.tableIdentifier();
                this.state = 1672;
                this.match(ClickHouseParser.DOT);
            }

            this.state = 1676;
            this.match(ClickHouseParser.ASTERISK);
            break;

        case 2:
            localctx = new ColumnsExprSubqueryContext(this, localctx);
            this.enterOuterAlt(localctx, 2);
            this.state = 1677;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1678;
            this.selectUnionStmt();
            this.state = 1679;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 3:
            localctx = new ColumnsExprColumnContext(this, localctx);
            this.enterOuterAlt(localctx, 3);
            this.state = 1681;
            this.columnExpr(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_columnExpr;
    return this;
}

ColumnExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnExprContext.prototype.constructor = ColumnExprContext;


 
ColumnExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function ColumnExprTernaryOpContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprTernaryOpContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprTernaryOpContext.prototype.constructor = ColumnExprTernaryOpContext;

ClickHouseParser.ColumnExprTernaryOpContext = ColumnExprTernaryOpContext;

ColumnExprTernaryOpContext.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

ColumnExprTernaryOpContext.prototype.QUERY = function() {
    return this.getToken(ClickHouseParser.QUERY, 0);
};

ColumnExprTernaryOpContext.prototype.COLON = function() {
    return this.getToken(ClickHouseParser.COLON, 0);
};
ColumnExprTernaryOpContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprTernaryOp(this);
	}
};

ColumnExprTernaryOpContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprTernaryOp(this);
	}
};

ColumnExprTernaryOpContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprTernaryOp(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprAliasContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprAliasContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprAliasContext.prototype.constructor = ColumnExprAliasContext;

ClickHouseParser.ColumnExprAliasContext = ColumnExprAliasContext;

ColumnExprAliasContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

ColumnExprAliasContext.prototype.alias = function() {
    return this.getTypedRuleContext(AliasContext,0);
};

ColumnExprAliasContext.prototype.AS = function() {
    return this.getToken(ClickHouseParser.AS, 0);
};

ColumnExprAliasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
ColumnExprAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprAlias(this);
	}
};

ColumnExprAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprAlias(this);
	}
};

ColumnExprAliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprExtractContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprExtractContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprExtractContext.prototype.constructor = ColumnExprExtractContext;

ClickHouseParser.ColumnExprExtractContext = ColumnExprExtractContext;

ColumnExprExtractContext.prototype.EXTRACT = function() {
    return this.getToken(ClickHouseParser.EXTRACT, 0);
};

ColumnExprExtractContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnExprExtractContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

ColumnExprExtractContext.prototype.FROM = function() {
    return this.getToken(ClickHouseParser.FROM, 0);
};

ColumnExprExtractContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

ColumnExprExtractContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};
ColumnExprExtractContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprExtract(this);
	}
};

ColumnExprExtractContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprExtract(this);
	}
};

ColumnExprExtractContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprExtract(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprNegateContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprNegateContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprNegateContext.prototype.constructor = ColumnExprNegateContext;

ClickHouseParser.ColumnExprNegateContext = ColumnExprNegateContext;

ColumnExprNegateContext.prototype.DASH = function() {
    return this.getToken(ClickHouseParser.DASH, 0);
};

ColumnExprNegateContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};
ColumnExprNegateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprNegate(this);
	}
};

ColumnExprNegateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprNegate(this);
	}
};

ColumnExprNegateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprNegate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprSubqueryContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprSubqueryContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprSubqueryContext.prototype.constructor = ColumnExprSubqueryContext;

ClickHouseParser.ColumnExprSubqueryContext = ColumnExprSubqueryContext;

ColumnExprSubqueryContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnExprSubqueryContext.prototype.selectUnionStmt = function() {
    return this.getTypedRuleContext(SelectUnionStmtContext,0);
};

ColumnExprSubqueryContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};
ColumnExprSubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprSubquery(this);
	}
};

ColumnExprSubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprSubquery(this);
	}
};

ColumnExprSubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprSubquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprLiteralContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprLiteralContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprLiteralContext.prototype.constructor = ColumnExprLiteralContext;

ClickHouseParser.ColumnExprLiteralContext = ColumnExprLiteralContext;

ColumnExprLiteralContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};
ColumnExprLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprLiteral(this);
	}
};

ColumnExprLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprLiteral(this);
	}
};

ColumnExprLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprArrayContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprArrayContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprArrayContext.prototype.constructor = ColumnExprArrayContext;

ClickHouseParser.ColumnExprArrayContext = ColumnExprArrayContext;

ColumnExprArrayContext.prototype.LBRACKET = function() {
    return this.getToken(ClickHouseParser.LBRACKET, 0);
};

ColumnExprArrayContext.prototype.RBRACKET = function() {
    return this.getToken(ClickHouseParser.RBRACKET, 0);
};

ColumnExprArrayContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};
ColumnExprArrayContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprArray(this);
	}
};

ColumnExprArrayContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprArray(this);
	}
};

ColumnExprArrayContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprArray(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprSubstringContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprSubstringContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprSubstringContext.prototype.constructor = ColumnExprSubstringContext;

ClickHouseParser.ColumnExprSubstringContext = ColumnExprSubstringContext;

ColumnExprSubstringContext.prototype.SUBSTRING = function() {
    return this.getToken(ClickHouseParser.SUBSTRING, 0);
};

ColumnExprSubstringContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnExprSubstringContext.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

ColumnExprSubstringContext.prototype.FROM = function() {
    return this.getToken(ClickHouseParser.FROM, 0);
};

ColumnExprSubstringContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

ColumnExprSubstringContext.prototype.FOR = function() {
    return this.getToken(ClickHouseParser.FOR, 0);
};
ColumnExprSubstringContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprSubstring(this);
	}
};

ColumnExprSubstringContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprSubstring(this);
	}
};

ColumnExprSubstringContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprSubstring(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprCastContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprCastContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprCastContext.prototype.constructor = ColumnExprCastContext;

ClickHouseParser.ColumnExprCastContext = ColumnExprCastContext;

ColumnExprCastContext.prototype.CAST = function() {
    return this.getToken(ClickHouseParser.CAST, 0);
};

ColumnExprCastContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnExprCastContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

ColumnExprCastContext.prototype.AS = function() {
    return this.getToken(ClickHouseParser.AS, 0);
};

ColumnExprCastContext.prototype.columnTypeExpr = function() {
    return this.getTypedRuleContext(ColumnTypeExprContext,0);
};

ColumnExprCastContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};
ColumnExprCastContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprCast(this);
	}
};

ColumnExprCastContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprCast(this);
	}
};

ColumnExprCastContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprCast(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprOrContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprOrContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprOrContext.prototype.constructor = ColumnExprOrContext;

ClickHouseParser.ColumnExprOrContext = ColumnExprOrContext;

ColumnExprOrContext.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

ColumnExprOrContext.prototype.OR = function() {
    return this.getToken(ClickHouseParser.OR, 0);
};
ColumnExprOrContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprOr(this);
	}
};

ColumnExprOrContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprOr(this);
	}
};

ColumnExprOrContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprOr(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprPrecedence1Context(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprPrecedence1Context.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprPrecedence1Context.prototype.constructor = ColumnExprPrecedence1Context;

ClickHouseParser.ColumnExprPrecedence1Context = ColumnExprPrecedence1Context;

ColumnExprPrecedence1Context.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

ColumnExprPrecedence1Context.prototype.ASTERISK = function() {
    return this.getToken(ClickHouseParser.ASTERISK, 0);
};

ColumnExprPrecedence1Context.prototype.SLASH = function() {
    return this.getToken(ClickHouseParser.SLASH, 0);
};

ColumnExprPrecedence1Context.prototype.PERCENT = function() {
    return this.getToken(ClickHouseParser.PERCENT, 0);
};
ColumnExprPrecedence1Context.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprPrecedence1(this);
	}
};

ColumnExprPrecedence1Context.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprPrecedence1(this);
	}
};

ColumnExprPrecedence1Context.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprPrecedence1(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprPrecedence2Context(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprPrecedence2Context.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprPrecedence2Context.prototype.constructor = ColumnExprPrecedence2Context;

ClickHouseParser.ColumnExprPrecedence2Context = ColumnExprPrecedence2Context;

ColumnExprPrecedence2Context.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

ColumnExprPrecedence2Context.prototype.PLUS = function() {
    return this.getToken(ClickHouseParser.PLUS, 0);
};

ColumnExprPrecedence2Context.prototype.DASH = function() {
    return this.getToken(ClickHouseParser.DASH, 0);
};

ColumnExprPrecedence2Context.prototype.CONCAT = function() {
    return this.getToken(ClickHouseParser.CONCAT, 0);
};
ColumnExprPrecedence2Context.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprPrecedence2(this);
	}
};

ColumnExprPrecedence2Context.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprPrecedence2(this);
	}
};

ColumnExprPrecedence2Context.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprPrecedence2(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprPrecedence3Context(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprPrecedence3Context.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprPrecedence3Context.prototype.constructor = ColumnExprPrecedence3Context;

ClickHouseParser.ColumnExprPrecedence3Context = ColumnExprPrecedence3Context;

ColumnExprPrecedence3Context.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

ColumnExprPrecedence3Context.prototype.EQ_DOUBLE = function() {
    return this.getToken(ClickHouseParser.EQ_DOUBLE, 0);
};

ColumnExprPrecedence3Context.prototype.EQ_SINGLE = function() {
    return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
};

ColumnExprPrecedence3Context.prototype.NOT_EQ = function() {
    return this.getToken(ClickHouseParser.NOT_EQ, 0);
};

ColumnExprPrecedence3Context.prototype.LE = function() {
    return this.getToken(ClickHouseParser.LE, 0);
};

ColumnExprPrecedence3Context.prototype.GE = function() {
    return this.getToken(ClickHouseParser.GE, 0);
};

ColumnExprPrecedence3Context.prototype.LT = function() {
    return this.getToken(ClickHouseParser.LT, 0);
};

ColumnExprPrecedence3Context.prototype.GT = function() {
    return this.getToken(ClickHouseParser.GT, 0);
};

ColumnExprPrecedence3Context.prototype.IN = function() {
    return this.getToken(ClickHouseParser.IN, 0);
};

ColumnExprPrecedence3Context.prototype.LIKE = function() {
    return this.getToken(ClickHouseParser.LIKE, 0);
};

ColumnExprPrecedence3Context.prototype.ILIKE = function() {
    return this.getToken(ClickHouseParser.ILIKE, 0);
};

ColumnExprPrecedence3Context.prototype.GLOBAL = function() {
    return this.getToken(ClickHouseParser.GLOBAL, 0);
};

ColumnExprPrecedence3Context.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};
ColumnExprPrecedence3Context.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprPrecedence3(this);
	}
};

ColumnExprPrecedence3Context.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprPrecedence3(this);
	}
};

ColumnExprPrecedence3Context.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprPrecedence3(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprIntervalContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprIntervalContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprIntervalContext.prototype.constructor = ColumnExprIntervalContext;

ClickHouseParser.ColumnExprIntervalContext = ColumnExprIntervalContext;

ColumnExprIntervalContext.prototype.INTERVAL = function() {
    return this.getToken(ClickHouseParser.INTERVAL, 0);
};

ColumnExprIntervalContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

ColumnExprIntervalContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};
ColumnExprIntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprInterval(this);
	}
};

ColumnExprIntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprInterval(this);
	}
};

ColumnExprIntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprIsNullContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprIsNullContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprIsNullContext.prototype.constructor = ColumnExprIsNullContext;

ClickHouseParser.ColumnExprIsNullContext = ColumnExprIsNullContext;

ColumnExprIsNullContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

ColumnExprIsNullContext.prototype.IS = function() {
    return this.getToken(ClickHouseParser.IS, 0);
};

ColumnExprIsNullContext.prototype.NULL_SQL = function() {
    return this.getToken(ClickHouseParser.NULL_SQL, 0);
};

ColumnExprIsNullContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};
ColumnExprIsNullContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprIsNull(this);
	}
};

ColumnExprIsNullContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprIsNull(this);
	}
};

ColumnExprIsNullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprIsNull(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprWinFunctionTargetContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprWinFunctionTargetContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprWinFunctionTargetContext.prototype.constructor = ColumnExprWinFunctionTargetContext;

ClickHouseParser.ColumnExprWinFunctionTargetContext = ColumnExprWinFunctionTargetContext;

ColumnExprWinFunctionTargetContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ColumnExprWinFunctionTargetContext.prototype.OVER = function() {
    return this.getToken(ClickHouseParser.OVER, 0);
};

ColumnExprWinFunctionTargetContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnExprWinFunctionTargetContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

ColumnExprWinFunctionTargetContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};
ColumnExprWinFunctionTargetContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprWinFunctionTarget(this);
	}
};

ColumnExprWinFunctionTargetContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprWinFunctionTarget(this);
	}
};

ColumnExprWinFunctionTargetContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprWinFunctionTarget(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprTrimContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprTrimContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprTrimContext.prototype.constructor = ColumnExprTrimContext;

ClickHouseParser.ColumnExprTrimContext = ColumnExprTrimContext;

ColumnExprTrimContext.prototype.TRIM = function() {
    return this.getToken(ClickHouseParser.TRIM, 0);
};

ColumnExprTrimContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnExprTrimContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

ColumnExprTrimContext.prototype.FROM = function() {
    return this.getToken(ClickHouseParser.FROM, 0);
};

ColumnExprTrimContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

ColumnExprTrimContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

ColumnExprTrimContext.prototype.BOTH = function() {
    return this.getToken(ClickHouseParser.BOTH, 0);
};

ColumnExprTrimContext.prototype.LEADING = function() {
    return this.getToken(ClickHouseParser.LEADING, 0);
};

ColumnExprTrimContext.prototype.TRAILING = function() {
    return this.getToken(ClickHouseParser.TRAILING, 0);
};
ColumnExprTrimContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprTrim(this);
	}
};

ColumnExprTrimContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprTrim(this);
	}
};

ColumnExprTrimContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprTrim(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprTupleContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprTupleContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprTupleContext.prototype.constructor = ColumnExprTupleContext;

ClickHouseParser.ColumnExprTupleContext = ColumnExprTupleContext;

ColumnExprTupleContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnExprTupleContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};

ColumnExprTupleContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};
ColumnExprTupleContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprTuple(this);
	}
};

ColumnExprTupleContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprTuple(this);
	}
};

ColumnExprTupleContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprTuple(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprArrayAccessContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprArrayAccessContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprArrayAccessContext.prototype.constructor = ColumnExprArrayAccessContext;

ClickHouseParser.ColumnExprArrayAccessContext = ColumnExprArrayAccessContext;

ColumnExprArrayAccessContext.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

ColumnExprArrayAccessContext.prototype.LBRACKET = function() {
    return this.getToken(ClickHouseParser.LBRACKET, 0);
};

ColumnExprArrayAccessContext.prototype.RBRACKET = function() {
    return this.getToken(ClickHouseParser.RBRACKET, 0);
};
ColumnExprArrayAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprArrayAccess(this);
	}
};

ColumnExprArrayAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprArrayAccess(this);
	}
};

ColumnExprArrayAccessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprArrayAccess(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprBetweenContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprBetweenContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprBetweenContext.prototype.constructor = ColumnExprBetweenContext;

ClickHouseParser.ColumnExprBetweenContext = ColumnExprBetweenContext;

ColumnExprBetweenContext.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

ColumnExprBetweenContext.prototype.BETWEEN = function() {
    return this.getToken(ClickHouseParser.BETWEEN, 0);
};

ColumnExprBetweenContext.prototype.AND = function() {
    return this.getToken(ClickHouseParser.AND, 0);
};

ColumnExprBetweenContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};
ColumnExprBetweenContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprBetween(this);
	}
};

ColumnExprBetweenContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprBetween(this);
	}
};

ColumnExprBetweenContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprBetween(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprParensContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprParensContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprParensContext.prototype.constructor = ColumnExprParensContext;

ClickHouseParser.ColumnExprParensContext = ColumnExprParensContext;

ColumnExprParensContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnExprParensContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

ColumnExprParensContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};
ColumnExprParensContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprParens(this);
	}
};

ColumnExprParensContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprParens(this);
	}
};

ColumnExprParensContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprParens(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprTimestampContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprTimestampContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprTimestampContext.prototype.constructor = ColumnExprTimestampContext;

ClickHouseParser.ColumnExprTimestampContext = ColumnExprTimestampContext;

ColumnExprTimestampContext.prototype.TIMESTAMP = function() {
    return this.getToken(ClickHouseParser.TIMESTAMP, 0);
};

ColumnExprTimestampContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};
ColumnExprTimestampContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprTimestamp(this);
	}
};

ColumnExprTimestampContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprTimestamp(this);
	}
};

ColumnExprTimestampContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprTimestamp(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprAndContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprAndContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprAndContext.prototype.constructor = ColumnExprAndContext;

ClickHouseParser.ColumnExprAndContext = ColumnExprAndContext;

ColumnExprAndContext.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

ColumnExprAndContext.prototype.AND = function() {
    return this.getToken(ClickHouseParser.AND, 0);
};
ColumnExprAndContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprAnd(this);
	}
};

ColumnExprAndContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprAnd(this);
	}
};

ColumnExprAndContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprAnd(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprTupleAccessContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprTupleAccessContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprTupleAccessContext.prototype.constructor = ColumnExprTupleAccessContext;

ClickHouseParser.ColumnExprTupleAccessContext = ColumnExprTupleAccessContext;

ColumnExprTupleAccessContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

ColumnExprTupleAccessContext.prototype.DOT = function() {
    return this.getToken(ClickHouseParser.DOT, 0);
};

ColumnExprTupleAccessContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
};
ColumnExprTupleAccessContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprTupleAccess(this);
	}
};

ColumnExprTupleAccessContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprTupleAccess(this);
	}
};

ColumnExprTupleAccessContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprTupleAccess(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprCaseContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprCaseContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprCaseContext.prototype.constructor = ColumnExprCaseContext;

ClickHouseParser.ColumnExprCaseContext = ColumnExprCaseContext;

ColumnExprCaseContext.prototype.CASE = function() {
    return this.getToken(ClickHouseParser.CASE, 0);
};

ColumnExprCaseContext.prototype.END = function() {
    return this.getToken(ClickHouseParser.END, 0);
};

ColumnExprCaseContext.prototype.columnExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnExprContext);
    } else {
        return this.getTypedRuleContext(ColumnExprContext,i);
    }
};

ColumnExprCaseContext.prototype.WHEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.WHEN);
    } else {
        return this.getToken(ClickHouseParser.WHEN, i);
    }
};


ColumnExprCaseContext.prototype.THEN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.THEN);
    } else {
        return this.getToken(ClickHouseParser.THEN, i);
    }
};


ColumnExprCaseContext.prototype.ELSE = function() {
    return this.getToken(ClickHouseParser.ELSE, 0);
};
ColumnExprCaseContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprCase(this);
	}
};

ColumnExprCaseContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprCase(this);
	}
};

ColumnExprCaseContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprCase(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprDateContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprDateContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprDateContext.prototype.constructor = ColumnExprDateContext;

ClickHouseParser.ColumnExprDateContext = ColumnExprDateContext;

ColumnExprDateContext.prototype.DATE = function() {
    return this.getToken(ClickHouseParser.DATE, 0);
};

ColumnExprDateContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};
ColumnExprDateContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprDate(this);
	}
};

ColumnExprDateContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprDate(this);
	}
};

ColumnExprDateContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprDate(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprNotContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprNotContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprNotContext.prototype.constructor = ColumnExprNotContext;

ClickHouseParser.ColumnExprNotContext = ColumnExprNotContext;

ColumnExprNotContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

ColumnExprNotContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};
ColumnExprNotContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprNot(this);
	}
};

ColumnExprNotContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprNot(this);
	}
};

ColumnExprNotContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprNot(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprWinFunctionContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprWinFunctionContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprWinFunctionContext.prototype.constructor = ColumnExprWinFunctionContext;

ClickHouseParser.ColumnExprWinFunctionContext = ColumnExprWinFunctionContext;

ColumnExprWinFunctionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColumnExprWinFunctionContext.prototype.OVER = function() {
    return this.getToken(ClickHouseParser.OVER, 0);
};

ColumnExprWinFunctionContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.LPAREN);
    } else {
        return this.getToken(ClickHouseParser.LPAREN, i);
    }
};


ColumnExprWinFunctionContext.prototype.windowExpr = function() {
    return this.getTypedRuleContext(WindowExprContext,0);
};

ColumnExprWinFunctionContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.RPAREN);
    } else {
        return this.getToken(ClickHouseParser.RPAREN, i);
    }
};


ColumnExprWinFunctionContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};
ColumnExprWinFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprWinFunction(this);
	}
};

ColumnExprWinFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprWinFunction(this);
	}
};

ColumnExprWinFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprWinFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprIdentifierContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprIdentifierContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprIdentifierContext.prototype.constructor = ColumnExprIdentifierContext;

ClickHouseParser.ColumnExprIdentifierContext = ColumnExprIdentifierContext;

ColumnExprIdentifierContext.prototype.columnIdentifier = function() {
    return this.getTypedRuleContext(ColumnIdentifierContext,0);
};
ColumnExprIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprIdentifier(this);
	}
};

ColumnExprIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprIdentifier(this);
	}
};

ColumnExprIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprFunctionContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprFunctionContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprFunctionContext.prototype.constructor = ColumnExprFunctionContext;

ClickHouseParser.ColumnExprFunctionContext = ColumnExprFunctionContext;

ColumnExprFunctionContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

ColumnExprFunctionContext.prototype.LPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.LPAREN);
    } else {
        return this.getToken(ClickHouseParser.LPAREN, i);
    }
};


ColumnExprFunctionContext.prototype.RPAREN = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.RPAREN);
    } else {
        return this.getToken(ClickHouseParser.RPAREN, i);
    }
};


ColumnExprFunctionContext.prototype.DISTINCT = function() {
    return this.getToken(ClickHouseParser.DISTINCT, 0);
};

ColumnExprFunctionContext.prototype.columnArgList = function() {
    return this.getTypedRuleContext(ColumnArgListContext,0);
};

ColumnExprFunctionContext.prototype.columnExprList = function() {
    return this.getTypedRuleContext(ColumnExprListContext,0);
};
ColumnExprFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprFunction(this);
	}
};

ColumnExprFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprFunction(this);
	}
};

ColumnExprFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function ColumnExprAsteriskContext(parser, ctx) {
	ColumnExprContext.call(this, parser);
    ColumnExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

ColumnExprAsteriskContext.prototype = Object.create(ColumnExprContext.prototype);
ColumnExprAsteriskContext.prototype.constructor = ColumnExprAsteriskContext;

ClickHouseParser.ColumnExprAsteriskContext = ColumnExprAsteriskContext;

ColumnExprAsteriskContext.prototype.ASTERISK = function() {
    return this.getToken(ClickHouseParser.ASTERISK, 0);
};

ColumnExprAsteriskContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ColumnExprAsteriskContext.prototype.DOT = function() {
    return this.getToken(ClickHouseParser.DOT, 0);
};
ColumnExprAsteriskContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnExprAsterisk(this);
	}
};

ColumnExprAsteriskContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnExprAsterisk(this);
	}
};

ColumnExprAsteriskContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnExprAsterisk(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.prototype.columnExpr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new ColumnExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 190;
    this.enterRecursionRule(localctx, 190, ClickHouseParser.RULE_columnExpr, _p);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1813;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,239,this._ctx);
        switch(la_) {
        case 1:
            localctx = new ColumnExprCaseContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1685;
            this.match(ClickHouseParser.CASE);
            this.state = 1687;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,227,this._ctx);
            if(la_===1) {
                this.state = 1686;
                this.columnExpr(0);

            }
            this.state = 1694; 
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            do {
                this.state = 1689;
                this.match(ClickHouseParser.WHEN);
                this.state = 1690;
                this.columnExpr(0);
                this.state = 1691;
                this.match(ClickHouseParser.THEN);
                this.state = 1692;
                this.columnExpr(0);
                this.state = 1696; 
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            } while(_la===ClickHouseParser.WHEN);
            this.state = 1700;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.ELSE) {
                this.state = 1698;
                this.match(ClickHouseParser.ELSE);
                this.state = 1699;
                this.columnExpr(0);
            }

            this.state = 1702;
            this.match(ClickHouseParser.END);
            break;

        case 2:
            localctx = new ColumnExprCastContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1704;
            this.match(ClickHouseParser.CAST);
            this.state = 1705;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1706;
            this.columnExpr(0);
            this.state = 1707;
            this.match(ClickHouseParser.AS);
            this.state = 1708;
            this.columnTypeExpr();
            this.state = 1709;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 3:
            localctx = new ColumnExprDateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1711;
            this.match(ClickHouseParser.DATE);
            this.state = 1712;
            this.match(ClickHouseParser.STRING_LITERAL);
            break;

        case 4:
            localctx = new ColumnExprExtractContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1713;
            this.match(ClickHouseParser.EXTRACT);
            this.state = 1714;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1715;
            this.interval();
            this.state = 1716;
            this.match(ClickHouseParser.FROM);
            this.state = 1717;
            this.columnExpr(0);
            this.state = 1718;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 5:
            localctx = new ColumnExprIntervalContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1720;
            this.match(ClickHouseParser.INTERVAL);
            this.state = 1721;
            this.columnExpr(0);
            this.state = 1722;
            this.interval();
            break;

        case 6:
            localctx = new ColumnExprSubstringContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1724;
            this.match(ClickHouseParser.SUBSTRING);
            this.state = 1725;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1726;
            this.columnExpr(0);
            this.state = 1727;
            this.match(ClickHouseParser.FROM);
            this.state = 1728;
            this.columnExpr(0);
            this.state = 1731;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(_la===ClickHouseParser.FOR) {
                this.state = 1729;
                this.match(ClickHouseParser.FOR);
                this.state = 1730;
                this.columnExpr(0);
            }

            this.state = 1733;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 7:
            localctx = new ColumnExprTimestampContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1735;
            this.match(ClickHouseParser.TIMESTAMP);
            this.state = 1736;
            this.match(ClickHouseParser.STRING_LITERAL);
            break;

        case 8:
            localctx = new ColumnExprTrimContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1737;
            this.match(ClickHouseParser.TRIM);
            this.state = 1738;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1739;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.BOTH || _la===ClickHouseParser.LEADING || _la===ClickHouseParser.TRAILING)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            this.state = 1740;
            this.match(ClickHouseParser.STRING_LITERAL);
            this.state = 1741;
            this.match(ClickHouseParser.FROM);
            this.state = 1742;
            this.columnExpr(0);
            this.state = 1743;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 9:
            localctx = new ColumnExprWinFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1745;
            this.identifier();

            this.state = 1746;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1748;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
                this.state = 1747;
                this.columnExprList();
            }

            this.state = 1750;
            this.match(ClickHouseParser.RPAREN);
            this.state = 1752;
            this.match(ClickHouseParser.OVER);
            this.state = 1753;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1754;
            this.windowExpr();
            this.state = 1755;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 10:
            localctx = new ColumnExprWinFunctionTargetContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1757;
            this.identifier();

            this.state = 1758;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1760;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
                this.state = 1759;
                this.columnExprList();
            }

            this.state = 1762;
            this.match(ClickHouseParser.RPAREN);
            this.state = 1764;
            this.match(ClickHouseParser.OVER);
            this.state = 1765;
            this.identifier();
            break;

        case 11:
            localctx = new ColumnExprFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1767;
            this.identifier();
            this.state = 1773;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,234,this._ctx);
            if(la_===1) {
                this.state = 1768;
                this.match(ClickHouseParser.LPAREN);
                this.state = 1770;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
                if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
                    this.state = 1769;
                    this.columnExprList();
                }

                this.state = 1772;
                this.match(ClickHouseParser.RPAREN);

            }
            this.state = 1775;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1777;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,235,this._ctx);
            if(la_===1) {
                this.state = 1776;
                this.match(ClickHouseParser.DISTINCT);

            }
            this.state = 1780;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
                this.state = 1779;
                this.columnArgList();
            }

            this.state = 1782;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 12:
            localctx = new ColumnExprLiteralContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1784;
            this.literal();
            break;

        case 13:
            localctx = new ColumnExprNegateContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1785;
            this.match(ClickHouseParser.DASH);
            this.state = 1786;
            this.columnExpr(17);
            break;

        case 14:
            localctx = new ColumnExprNotContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1787;
            this.match(ClickHouseParser.NOT);
            this.state = 1788;
            this.columnExpr(12);
            break;

        case 15:
            localctx = new ColumnExprAsteriskContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1792;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if(((((_la - 2)) & ~0x1f) == 0 && ((1 << (_la - 2)) & ((1 << (ClickHouseParser.AFTER - 2)) | (1 << (ClickHouseParser.ALIAS - 2)) | (1 << (ClickHouseParser.ALL - 2)) | (1 << (ClickHouseParser.ALTER - 2)) | (1 << (ClickHouseParser.AND - 2)) | (1 << (ClickHouseParser.ANTI - 2)) | (1 << (ClickHouseParser.ANY - 2)) | (1 << (ClickHouseParser.ARRAY - 2)) | (1 << (ClickHouseParser.AS - 2)) | (1 << (ClickHouseParser.ASCENDING - 2)) | (1 << (ClickHouseParser.ASOF - 2)) | (1 << (ClickHouseParser.AST - 2)) | (1 << (ClickHouseParser.ASYNC - 2)) | (1 << (ClickHouseParser.ATTACH - 2)) | (1 << (ClickHouseParser.BETWEEN - 2)) | (1 << (ClickHouseParser.BOTH - 2)) | (1 << (ClickHouseParser.BY - 2)) | (1 << (ClickHouseParser.CASE - 2)) | (1 << (ClickHouseParser.CAST - 2)) | (1 << (ClickHouseParser.CHECK - 2)) | (1 << (ClickHouseParser.CLEAR - 2)) | (1 << (ClickHouseParser.CLUSTER - 2)) | (1 << (ClickHouseParser.CODEC - 2)) | (1 << (ClickHouseParser.COLLATE - 2)) | (1 << (ClickHouseParser.COLUMN - 2)) | (1 << (ClickHouseParser.COMMENT - 2)) | (1 << (ClickHouseParser.CONSTRAINT - 2)) | (1 << (ClickHouseParser.CREATE - 2)) | (1 << (ClickHouseParser.CROSS - 2)) | (1 << (ClickHouseParser.CUBE - 2)) | (1 << (ClickHouseParser.CURRENT - 2)) | (1 << (ClickHouseParser.DATABASE - 2)))) !== 0) || ((((_la - 34)) & ~0x1f) == 0 && ((1 << (_la - 34)) & ((1 << (ClickHouseParser.DATABASES - 34)) | (1 << (ClickHouseParser.DATE - 34)) | (1 << (ClickHouseParser.DAY - 34)) | (1 << (ClickHouseParser.DEDUPLICATE - 34)) | (1 << (ClickHouseParser.DEFAULT - 34)) | (1 << (ClickHouseParser.DELAY - 34)) | (1 << (ClickHouseParser.DELETE - 34)) | (1 << (ClickHouseParser.DESC - 34)) | (1 << (ClickHouseParser.DESCENDING - 34)) | (1 << (ClickHouseParser.DESCRIBE - 34)) | (1 << (ClickHouseParser.DETACH - 34)) | (1 << (ClickHouseParser.DICTIONARIES - 34)) | (1 << (ClickHouseParser.DICTIONARY - 34)) | (1 << (ClickHouseParser.DISK - 34)) | (1 << (ClickHouseParser.DISTINCT - 34)) | (1 << (ClickHouseParser.DISTRIBUTED - 34)) | (1 << (ClickHouseParser.DROP - 34)) | (1 << (ClickHouseParser.ELSE - 34)) | (1 << (ClickHouseParser.END - 34)) | (1 << (ClickHouseParser.ENGINE - 34)) | (1 << (ClickHouseParser.EVENTS - 34)) | (1 << (ClickHouseParser.EXISTS - 34)) | (1 << (ClickHouseParser.EXPLAIN - 34)) | (1 << (ClickHouseParser.EXPRESSION - 34)) | (1 << (ClickHouseParser.EXTRACT - 34)) | (1 << (ClickHouseParser.FETCHES - 34)) | (1 << (ClickHouseParser.FINAL - 34)) | (1 << (ClickHouseParser.FIRST - 34)) | (1 << (ClickHouseParser.FLUSH - 34)) | (1 << (ClickHouseParser.FOLLOWING - 34)) | (1 << (ClickHouseParser.FOR - 34)) | (1 << (ClickHouseParser.FORMAT - 34)))) !== 0) || ((((_la - 66)) & ~0x1f) == 0 && ((1 << (_la - 66)) & ((1 << (ClickHouseParser.FREEZE - 66)) | (1 << (ClickHouseParser.FROM - 66)) | (1 << (ClickHouseParser.FULL - 66)) | (1 << (ClickHouseParser.FUNCTION - 66)) | (1 << (ClickHouseParser.GLOBAL - 66)) | (1 << (ClickHouseParser.GRANULARITY - 66)) | (1 << (ClickHouseParser.GROUP - 66)) | (1 << (ClickHouseParser.HAVING - 66)) | (1 << (ClickHouseParser.HIERARCHICAL - 66)) | (1 << (ClickHouseParser.HOUR - 66)) | (1 << (ClickHouseParser.ID - 66)) | (1 << (ClickHouseParser.IF - 66)) | (1 << (ClickHouseParser.ILIKE - 66)) | (1 << (ClickHouseParser.IN - 66)) | (1 << (ClickHouseParser.INDEX - 66)) | (1 << (ClickHouseParser.INJECTIVE - 66)) | (1 << (ClickHouseParser.INNER - 66)) | (1 << (ClickHouseParser.INSERT - 66)) | (1 << (ClickHouseParser.INTERVAL - 66)) | (1 << (ClickHouseParser.INTO - 66)) | (1 << (ClickHouseParser.IS - 66)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 66)) | (1 << (ClickHouseParser.JOIN - 66)) | (1 << (ClickHouseParser.KEY - 66)) | (1 << (ClickHouseParser.KILL - 66)) | (1 << (ClickHouseParser.LAST - 66)) | (1 << (ClickHouseParser.LAYOUT - 66)) | (1 << (ClickHouseParser.LEADING - 66)) | (1 << (ClickHouseParser.LEFT - 66)) | (1 << (ClickHouseParser.LIFETIME - 66)) | (1 << (ClickHouseParser.LIKE - 66)))) !== 0) || ((((_la - 98)) & ~0x1f) == 0 && ((1 << (_la - 98)) & ((1 << (ClickHouseParser.LIMIT - 98)) | (1 << (ClickHouseParser.LIVE - 98)) | (1 << (ClickHouseParser.LOCAL - 98)) | (1 << (ClickHouseParser.LOGS - 98)) | (1 << (ClickHouseParser.MATERIALIZE - 98)) | (1 << (ClickHouseParser.MATERIALIZED - 98)) | (1 << (ClickHouseParser.MAX - 98)) | (1 << (ClickHouseParser.MERGES - 98)) | (1 << (ClickHouseParser.MIN - 98)) | (1 << (ClickHouseParser.MINUTE - 98)) | (1 << (ClickHouseParser.MODIFY - 98)) | (1 << (ClickHouseParser.MONTH - 98)) | (1 << (ClickHouseParser.MOVE - 98)) | (1 << (ClickHouseParser.MUTATION - 98)) | (1 << (ClickHouseParser.NO - 98)) | (1 << (ClickHouseParser.NOT - 98)) | (1 << (ClickHouseParser.NULLS - 98)) | (1 << (ClickHouseParser.OFFSET - 98)) | (1 << (ClickHouseParser.ON - 98)) | (1 << (ClickHouseParser.OPTIMIZE - 98)) | (1 << (ClickHouseParser.OR - 98)) | (1 << (ClickHouseParser.ORDER - 98)) | (1 << (ClickHouseParser.OUTER - 98)) | (1 << (ClickHouseParser.OUTFILE - 98)) | (1 << (ClickHouseParser.OVER - 98)) | (1 << (ClickHouseParser.PARTITION - 98)) | (1 << (ClickHouseParser.POPULATE - 98)) | (1 << (ClickHouseParser.PRECEDING - 98)) | (1 << (ClickHouseParser.PREWHERE - 98)) | (1 << (ClickHouseParser.PRIMARY - 98)))) !== 0) || ((((_la - 131)) & ~0x1f) == 0 && ((1 << (_la - 131)) & ((1 << (ClickHouseParser.QUARTER - 131)) | (1 << (ClickHouseParser.RANGE - 131)) | (1 << (ClickHouseParser.RELOAD - 131)) | (1 << (ClickHouseParser.REMOVE - 131)) | (1 << (ClickHouseParser.RENAME - 131)) | (1 << (ClickHouseParser.REPLACE - 131)) | (1 << (ClickHouseParser.REPLICA - 131)) | (1 << (ClickHouseParser.REPLICATED - 131)) | (1 << (ClickHouseParser.RIGHT - 131)) | (1 << (ClickHouseParser.ROLLUP - 131)) | (1 << (ClickHouseParser.ROW - 131)) | (1 << (ClickHouseParser.ROWS - 131)) | (1 << (ClickHouseParser.SAMPLE - 131)) | (1 << (ClickHouseParser.SECOND - 131)) | (1 << (ClickHouseParser.SELECT - 131)) | (1 << (ClickHouseParser.SEMI - 131)) | (1 << (ClickHouseParser.SENDS - 131)) | (1 << (ClickHouseParser.SET - 131)) | (1 << (ClickHouseParser.SETTINGS - 131)) | (1 << (ClickHouseParser.SHOW - 131)) | (1 << (ClickHouseParser.SOURCE - 131)) | (1 << (ClickHouseParser.START - 131)) | (1 << (ClickHouseParser.STOP - 131)) | (1 << (ClickHouseParser.SUBSTRING - 131)) | (1 << (ClickHouseParser.SYNC - 131)) | (1 << (ClickHouseParser.SYNTAX - 131)) | (1 << (ClickHouseParser.SYSTEM - 131)) | (1 << (ClickHouseParser.TABLE - 131)) | (1 << (ClickHouseParser.TABLES - 131)) | (1 << (ClickHouseParser.TEMPORARY - 131)) | (1 << (ClickHouseParser.TEST - 131)) | (1 << (ClickHouseParser.THEN - 131)))) !== 0) || ((((_la - 163)) & ~0x1f) == 0 && ((1 << (_la - 163)) & ((1 << (ClickHouseParser.TIES - 163)) | (1 << (ClickHouseParser.TIMEOUT - 163)) | (1 << (ClickHouseParser.TIMESTAMP - 163)) | (1 << (ClickHouseParser.TO - 163)) | (1 << (ClickHouseParser.TOP - 163)) | (1 << (ClickHouseParser.TOTALS - 163)) | (1 << (ClickHouseParser.TRAILING - 163)) | (1 << (ClickHouseParser.TRIM - 163)) | (1 << (ClickHouseParser.TRUNCATE - 163)) | (1 << (ClickHouseParser.TTL - 163)) | (1 << (ClickHouseParser.TYPE - 163)) | (1 << (ClickHouseParser.UNBOUNDED - 163)) | (1 << (ClickHouseParser.UNION - 163)) | (1 << (ClickHouseParser.UPDATE - 163)) | (1 << (ClickHouseParser.USE - 163)) | (1 << (ClickHouseParser.USING - 163)) | (1 << (ClickHouseParser.UUID - 163)) | (1 << (ClickHouseParser.VALUES - 163)) | (1 << (ClickHouseParser.VIEW - 163)) | (1 << (ClickHouseParser.VOLUME - 163)) | (1 << (ClickHouseParser.WATCH - 163)) | (1 << (ClickHouseParser.WEEK - 163)) | (1 << (ClickHouseParser.WHEN - 163)) | (1 << (ClickHouseParser.WHERE - 163)) | (1 << (ClickHouseParser.WINDOW - 163)) | (1 << (ClickHouseParser.WITH - 163)) | (1 << (ClickHouseParser.YEAR - 163)) | (1 << (ClickHouseParser.JSON_FALSE - 163)) | (1 << (ClickHouseParser.JSON_TRUE - 163)) | (1 << (ClickHouseParser.IDENTIFIER - 163)))) !== 0)) {
                this.state = 1789;
                this.tableIdentifier();
                this.state = 1790;
                this.match(ClickHouseParser.DOT);
            }

            this.state = 1794;
            this.match(ClickHouseParser.ASTERISK);
            break;

        case 16:
            localctx = new ColumnExprSubqueryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1795;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1796;
            this.selectUnionStmt();
            this.state = 1797;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 17:
            localctx = new ColumnExprParensContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1799;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1800;
            this.columnExpr(0);
            this.state = 1801;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 18:
            localctx = new ColumnExprTupleContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1803;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1804;
            this.columnExprList();
            this.state = 1805;
            this.match(ClickHouseParser.RPAREN);
            break;

        case 19:
            localctx = new ColumnExprArrayContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1807;
            this.match(ClickHouseParser.LBRACKET);
            this.state = 1809;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.ASTERISK - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.LBRACKET - 192)) | (1 << (ClickHouseParser.LPAREN - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
                this.state = 1808;
                this.columnExprList();
            }

            this.state = 1811;
            this.match(ClickHouseParser.RBRACKET);
            break;

        case 20:
            localctx = new ColumnExprIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1812;
            this.columnIdentifier();
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1886;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,248,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                this.state = 1884;
                this._errHandler.sync(this);
                var la_ = this._interp.adaptivePredict(this._input,247,this._ctx);
                switch(la_) {
                case 1:
                    localctx = new ColumnExprPrecedence1Context(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1815;
                    if (!( this.precpred(this._ctx, 16))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 16)");
                    }
                    this.state = 1816;
                    _la = this._input.LA(1);
                    if(!(((((_la - 199)) & ~0x1f) == 0 && ((1 << (_la - 199)) & ((1 << (ClickHouseParser.ASTERISK - 199)) | (1 << (ClickHouseParser.PERCENT - 199)) | (1 << (ClickHouseParser.SLASH - 199)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1817;
                    this.columnExpr(17);
                    break;

                case 2:
                    localctx = new ColumnExprPrecedence2Context(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1818;
                    if (!( this.precpred(this._ctx, 15))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 15)");
                    }
                    this.state = 1819;
                    _la = this._input.LA(1);
                    if(!(((((_la - 204)) & ~0x1f) == 0 && ((1 << (_la - 204)) & ((1 << (ClickHouseParser.CONCAT - 204)) | (1 << (ClickHouseParser.DASH - 204)) | (1 << (ClickHouseParser.PLUS - 204)))) !== 0))) {
                    this._errHandler.recoverInline(this);
                    }
                    else {
                    	this._errHandler.reportMatch(this);
                        this.consume();
                    }
                    this.state = 1820;
                    this.columnExpr(16);
                    break;

                case 3:
                    localctx = new ColumnExprPrecedence3Context(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1821;
                    if (!( this.precpred(this._ctx, 14))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 14)");
                    }
                    this.state = 1840;
                    this._errHandler.sync(this);
                    var la_ = this._interp.adaptivePredict(this._input,243,this._ctx);
                    switch(la_) {
                    case 1:
                        this.state = 1822;
                        this.match(ClickHouseParser.EQ_DOUBLE);
                        break;

                    case 2:
                        this.state = 1823;
                        this.match(ClickHouseParser.EQ_SINGLE);
                        break;

                    case 3:
                        this.state = 1824;
                        this.match(ClickHouseParser.NOT_EQ);
                        break;

                    case 4:
                        this.state = 1825;
                        this.match(ClickHouseParser.LE);
                        break;

                    case 5:
                        this.state = 1826;
                        this.match(ClickHouseParser.GE);
                        break;

                    case 6:
                        this.state = 1827;
                        this.match(ClickHouseParser.LT);
                        break;

                    case 7:
                        this.state = 1828;
                        this.match(ClickHouseParser.GT);
                        break;

                    case 8:
                        this.state = 1830;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===ClickHouseParser.GLOBAL) {
                            this.state = 1829;
                            this.match(ClickHouseParser.GLOBAL);
                        }

                        this.state = 1833;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===ClickHouseParser.NOT) {
                            this.state = 1832;
                            this.match(ClickHouseParser.NOT);
                        }

                        this.state = 1835;
                        this.match(ClickHouseParser.IN);
                        break;

                    case 9:
                        this.state = 1837;
                        this._errHandler.sync(this);
                        _la = this._input.LA(1);
                        if(_la===ClickHouseParser.NOT) {
                            this.state = 1836;
                            this.match(ClickHouseParser.NOT);
                        }

                        this.state = 1839;
                        _la = this._input.LA(1);
                        if(!(_la===ClickHouseParser.ILIKE || _la===ClickHouseParser.LIKE)) {
                        this._errHandler.recoverInline(this);
                        }
                        else {
                        	this._errHandler.reportMatch(this);
                            this.consume();
                        }
                        break;

                    }
                    this.state = 1842;
                    this.columnExpr(15);
                    break;

                case 4:
                    localctx = new ColumnExprAndContext(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1843;
                    if (!( this.precpred(this._ctx, 11))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 11)");
                    }
                    this.state = 1844;
                    this.match(ClickHouseParser.AND);
                    this.state = 1845;
                    this.columnExpr(12);
                    break;

                case 5:
                    localctx = new ColumnExprOrContext(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1846;
                    if (!( this.precpred(this._ctx, 10))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 10)");
                    }
                    this.state = 1847;
                    this.match(ClickHouseParser.OR);
                    this.state = 1848;
                    this.columnExpr(11);
                    break;

                case 6:
                    localctx = new ColumnExprBetweenContext(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1849;
                    if (!( this.precpred(this._ctx, 9))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 9)");
                    }
                    this.state = 1851;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ClickHouseParser.NOT) {
                        this.state = 1850;
                        this.match(ClickHouseParser.NOT);
                    }

                    this.state = 1853;
                    this.match(ClickHouseParser.BETWEEN);
                    this.state = 1854;
                    this.columnExpr(0);
                    this.state = 1855;
                    this.match(ClickHouseParser.AND);
                    this.state = 1856;
                    this.columnExpr(10);
                    break;

                case 7:
                    localctx = new ColumnExprTernaryOpContext(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1858;
                    if (!( this.precpred(this._ctx, 8))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 8)");
                    }
                    this.state = 1859;
                    this.match(ClickHouseParser.QUERY);
                    this.state = 1860;
                    this.columnExpr(0);
                    this.state = 1861;
                    this.match(ClickHouseParser.COLON);
                    this.state = 1862;
                    this.columnExpr(8);
                    break;

                case 8:
                    localctx = new ColumnExprArrayAccessContext(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1864;
                    if (!( this.precpred(this._ctx, 19))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 19)");
                    }
                    this.state = 1865;
                    this.match(ClickHouseParser.LBRACKET);
                    this.state = 1866;
                    this.columnExpr(0);
                    this.state = 1867;
                    this.match(ClickHouseParser.RBRACKET);
                    break;

                case 9:
                    localctx = new ColumnExprTupleAccessContext(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1869;
                    if (!( this.precpred(this._ctx, 18))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 18)");
                    }
                    this.state = 1870;
                    this.match(ClickHouseParser.DOT);
                    this.state = 1871;
                    this.match(ClickHouseParser.DECIMAL_LITERAL);
                    break;

                case 10:
                    localctx = new ColumnExprIsNullContext(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1872;
                    if (!( this.precpred(this._ctx, 13))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 13)");
                    }
                    this.state = 1873;
                    this.match(ClickHouseParser.IS);
                    this.state = 1875;
                    this._errHandler.sync(this);
                    _la = this._input.LA(1);
                    if(_la===ClickHouseParser.NOT) {
                        this.state = 1874;
                        this.match(ClickHouseParser.NOT);
                    }

                    this.state = 1877;
                    this.match(ClickHouseParser.NULL_SQL);
                    break;

                case 11:
                    localctx = new ColumnExprAliasContext(this, new ColumnExprContext(this, _parentctx, _parentState));
                    this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_columnExpr);
                    this.state = 1878;
                    if (!( this.precpred(this._ctx, 7))) {
                        throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 7)");
                    }
                    this.state = 1882;
                    this._errHandler.sync(this);
                    switch(this._input.LA(1)) {
                    case ClickHouseParser.DATE:
                    case ClickHouseParser.FIRST:
                    case ClickHouseParser.ID:
                    case ClickHouseParser.KEY:
                    case ClickHouseParser.IDENTIFIER:
                        this.state = 1879;
                        this.alias();
                        break;
                    case ClickHouseParser.AS:
                        this.state = 1880;
                        this.match(ClickHouseParser.AS);
                        this.state = 1881;
                        this.identifier();
                        break;
                    default:
                        throw new antlr4.error.NoViableAltException(this);
                    }
                    break;

                } 
            }
            this.state = 1888;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,248,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function ColumnArgListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_columnArgList;
    return this;
}

ColumnArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnArgListContext.prototype.constructor = ColumnArgListContext;

ColumnArgListContext.prototype.columnArgExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(ColumnArgExprContext);
    } else {
        return this.getTypedRuleContext(ColumnArgExprContext,i);
    }
};

ColumnArgListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


ColumnArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnArgList(this);
	}
};

ColumnArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnArgList(this);
	}
};

ColumnArgListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnArgList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.ColumnArgListContext = ColumnArgListContext;

ClickHouseParser.prototype.columnArgList = function() {

    var localctx = new ColumnArgListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 192, ClickHouseParser.RULE_columnArgList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1889;
        this.columnArgExpr();
        this.state = 1894;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ClickHouseParser.COMMA) {
            this.state = 1890;
            this.match(ClickHouseParser.COMMA);
            this.state = 1891;
            this.columnArgExpr();
            this.state = 1896;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnArgExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_columnArgExpr;
    return this;
}

ColumnArgExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnArgExprContext.prototype.constructor = ColumnArgExprContext;

ColumnArgExprContext.prototype.columnLambdaExpr = function() {
    return this.getTypedRuleContext(ColumnLambdaExprContext,0);
};

ColumnArgExprContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

ColumnArgExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnArgExpr(this);
	}
};

ColumnArgExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnArgExpr(this);
	}
};

ColumnArgExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnArgExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.ColumnArgExprContext = ColumnArgExprContext;

ClickHouseParser.prototype.columnArgExpr = function() {

    var localctx = new ColumnArgExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 194, ClickHouseParser.RULE_columnArgExpr);
    try {
        this.state = 1899;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,250,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1897;
            this.columnLambdaExpr();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1898;
            this.columnExpr(0);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnLambdaExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_columnLambdaExpr;
    return this;
}

ColumnLambdaExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnLambdaExprContext.prototype.constructor = ColumnLambdaExprContext;

ColumnLambdaExprContext.prototype.ARROW = function() {
    return this.getToken(ClickHouseParser.ARROW, 0);
};

ColumnLambdaExprContext.prototype.columnExpr = function() {
    return this.getTypedRuleContext(ColumnExprContext,0);
};

ColumnLambdaExprContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

ColumnLambdaExprContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

ColumnLambdaExprContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

ColumnLambdaExprContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


ColumnLambdaExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnLambdaExpr(this);
	}
};

ColumnLambdaExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnLambdaExpr(this);
	}
};

ColumnLambdaExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnLambdaExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.ColumnLambdaExprContext = ColumnLambdaExprContext;

ClickHouseParser.prototype.columnLambdaExpr = function() {

    var localctx = new ColumnLambdaExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 196, ClickHouseParser.RULE_columnLambdaExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1920;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.LPAREN:
            this.state = 1901;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1902;
            this.identifier();
            this.state = 1907;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ClickHouseParser.COMMA) {
                this.state = 1903;
                this.match(ClickHouseParser.COMMA);
                this.state = 1904;
                this.identifier();
                this.state = 1909;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            this.state = 1910;
            this.match(ClickHouseParser.RPAREN);
            break;
        case ClickHouseParser.AFTER:
        case ClickHouseParser.ALIAS:
        case ClickHouseParser.ALL:
        case ClickHouseParser.ALTER:
        case ClickHouseParser.AND:
        case ClickHouseParser.ANTI:
        case ClickHouseParser.ANY:
        case ClickHouseParser.ARRAY:
        case ClickHouseParser.AS:
        case ClickHouseParser.ASCENDING:
        case ClickHouseParser.ASOF:
        case ClickHouseParser.AST:
        case ClickHouseParser.ASYNC:
        case ClickHouseParser.ATTACH:
        case ClickHouseParser.BETWEEN:
        case ClickHouseParser.BOTH:
        case ClickHouseParser.BY:
        case ClickHouseParser.CASE:
        case ClickHouseParser.CAST:
        case ClickHouseParser.CHECK:
        case ClickHouseParser.CLEAR:
        case ClickHouseParser.CLUSTER:
        case ClickHouseParser.CODEC:
        case ClickHouseParser.COLLATE:
        case ClickHouseParser.COLUMN:
        case ClickHouseParser.COMMENT:
        case ClickHouseParser.CONSTRAINT:
        case ClickHouseParser.CREATE:
        case ClickHouseParser.CROSS:
        case ClickHouseParser.CUBE:
        case ClickHouseParser.CURRENT:
        case ClickHouseParser.DATABASE:
        case ClickHouseParser.DATABASES:
        case ClickHouseParser.DATE:
        case ClickHouseParser.DAY:
        case ClickHouseParser.DEDUPLICATE:
        case ClickHouseParser.DEFAULT:
        case ClickHouseParser.DELAY:
        case ClickHouseParser.DELETE:
        case ClickHouseParser.DESC:
        case ClickHouseParser.DESCENDING:
        case ClickHouseParser.DESCRIBE:
        case ClickHouseParser.DETACH:
        case ClickHouseParser.DICTIONARIES:
        case ClickHouseParser.DICTIONARY:
        case ClickHouseParser.DISK:
        case ClickHouseParser.DISTINCT:
        case ClickHouseParser.DISTRIBUTED:
        case ClickHouseParser.DROP:
        case ClickHouseParser.ELSE:
        case ClickHouseParser.END:
        case ClickHouseParser.ENGINE:
        case ClickHouseParser.EVENTS:
        case ClickHouseParser.EXISTS:
        case ClickHouseParser.EXPLAIN:
        case ClickHouseParser.EXPRESSION:
        case ClickHouseParser.EXTRACT:
        case ClickHouseParser.FETCHES:
        case ClickHouseParser.FINAL:
        case ClickHouseParser.FIRST:
        case ClickHouseParser.FLUSH:
        case ClickHouseParser.FOLLOWING:
        case ClickHouseParser.FOR:
        case ClickHouseParser.FORMAT:
        case ClickHouseParser.FREEZE:
        case ClickHouseParser.FROM:
        case ClickHouseParser.FULL:
        case ClickHouseParser.FUNCTION:
        case ClickHouseParser.GLOBAL:
        case ClickHouseParser.GRANULARITY:
        case ClickHouseParser.GROUP:
        case ClickHouseParser.HAVING:
        case ClickHouseParser.HIERARCHICAL:
        case ClickHouseParser.HOUR:
        case ClickHouseParser.ID:
        case ClickHouseParser.IF:
        case ClickHouseParser.ILIKE:
        case ClickHouseParser.IN:
        case ClickHouseParser.INDEX:
        case ClickHouseParser.INJECTIVE:
        case ClickHouseParser.INNER:
        case ClickHouseParser.INSERT:
        case ClickHouseParser.INTERVAL:
        case ClickHouseParser.INTO:
        case ClickHouseParser.IS:
        case ClickHouseParser.IS_OBJECT_ID:
        case ClickHouseParser.JOIN:
        case ClickHouseParser.KEY:
        case ClickHouseParser.KILL:
        case ClickHouseParser.LAST:
        case ClickHouseParser.LAYOUT:
        case ClickHouseParser.LEADING:
        case ClickHouseParser.LEFT:
        case ClickHouseParser.LIFETIME:
        case ClickHouseParser.LIKE:
        case ClickHouseParser.LIMIT:
        case ClickHouseParser.LIVE:
        case ClickHouseParser.LOCAL:
        case ClickHouseParser.LOGS:
        case ClickHouseParser.MATERIALIZE:
        case ClickHouseParser.MATERIALIZED:
        case ClickHouseParser.MAX:
        case ClickHouseParser.MERGES:
        case ClickHouseParser.MIN:
        case ClickHouseParser.MINUTE:
        case ClickHouseParser.MODIFY:
        case ClickHouseParser.MONTH:
        case ClickHouseParser.MOVE:
        case ClickHouseParser.MUTATION:
        case ClickHouseParser.NO:
        case ClickHouseParser.NOT:
        case ClickHouseParser.NULLS:
        case ClickHouseParser.OFFSET:
        case ClickHouseParser.ON:
        case ClickHouseParser.OPTIMIZE:
        case ClickHouseParser.OR:
        case ClickHouseParser.ORDER:
        case ClickHouseParser.OUTER:
        case ClickHouseParser.OUTFILE:
        case ClickHouseParser.OVER:
        case ClickHouseParser.PARTITION:
        case ClickHouseParser.POPULATE:
        case ClickHouseParser.PRECEDING:
        case ClickHouseParser.PREWHERE:
        case ClickHouseParser.PRIMARY:
        case ClickHouseParser.QUARTER:
        case ClickHouseParser.RANGE:
        case ClickHouseParser.RELOAD:
        case ClickHouseParser.REMOVE:
        case ClickHouseParser.RENAME:
        case ClickHouseParser.REPLACE:
        case ClickHouseParser.REPLICA:
        case ClickHouseParser.REPLICATED:
        case ClickHouseParser.RIGHT:
        case ClickHouseParser.ROLLUP:
        case ClickHouseParser.ROW:
        case ClickHouseParser.ROWS:
        case ClickHouseParser.SAMPLE:
        case ClickHouseParser.SECOND:
        case ClickHouseParser.SELECT:
        case ClickHouseParser.SEMI:
        case ClickHouseParser.SENDS:
        case ClickHouseParser.SET:
        case ClickHouseParser.SETTINGS:
        case ClickHouseParser.SHOW:
        case ClickHouseParser.SOURCE:
        case ClickHouseParser.START:
        case ClickHouseParser.STOP:
        case ClickHouseParser.SUBSTRING:
        case ClickHouseParser.SYNC:
        case ClickHouseParser.SYNTAX:
        case ClickHouseParser.SYSTEM:
        case ClickHouseParser.TABLE:
        case ClickHouseParser.TABLES:
        case ClickHouseParser.TEMPORARY:
        case ClickHouseParser.TEST:
        case ClickHouseParser.THEN:
        case ClickHouseParser.TIES:
        case ClickHouseParser.TIMEOUT:
        case ClickHouseParser.TIMESTAMP:
        case ClickHouseParser.TO:
        case ClickHouseParser.TOP:
        case ClickHouseParser.TOTALS:
        case ClickHouseParser.TRAILING:
        case ClickHouseParser.TRIM:
        case ClickHouseParser.TRUNCATE:
        case ClickHouseParser.TTL:
        case ClickHouseParser.TYPE:
        case ClickHouseParser.UNBOUNDED:
        case ClickHouseParser.UNION:
        case ClickHouseParser.UPDATE:
        case ClickHouseParser.USE:
        case ClickHouseParser.USING:
        case ClickHouseParser.UUID:
        case ClickHouseParser.VALUES:
        case ClickHouseParser.VIEW:
        case ClickHouseParser.VOLUME:
        case ClickHouseParser.WATCH:
        case ClickHouseParser.WEEK:
        case ClickHouseParser.WHEN:
        case ClickHouseParser.WHERE:
        case ClickHouseParser.WINDOW:
        case ClickHouseParser.WITH:
        case ClickHouseParser.YEAR:
        case ClickHouseParser.JSON_FALSE:
        case ClickHouseParser.JSON_TRUE:
        case ClickHouseParser.IDENTIFIER:
            this.state = 1912;
            this.identifier();
            this.state = 1917;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
            while(_la===ClickHouseParser.COMMA) {
                this.state = 1913;
                this.match(ClickHouseParser.COMMA);
                this.state = 1914;
                this.identifier();
                this.state = 1919;
                this._errHandler.sync(this);
                _la = this._input.LA(1);
            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
        this.state = 1922;
        this.match(ClickHouseParser.ARROW);
        this.state = 1923;
        this.columnExpr(0);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function ColumnIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_columnIdentifier;
    return this;
}

ColumnIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
ColumnIdentifierContext.prototype.constructor = ColumnIdentifierContext;

ColumnIdentifierContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

ColumnIdentifierContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};

ColumnIdentifierContext.prototype.DOT = function() {
    return this.getToken(ClickHouseParser.DOT, 0);
};

ColumnIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterColumnIdentifier(this);
	}
};

ColumnIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitColumnIdentifier(this);
	}
};

ColumnIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitColumnIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.ColumnIdentifierContext = ColumnIdentifierContext;

ClickHouseParser.prototype.columnIdentifier = function() {

    var localctx = new ColumnIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 198, ClickHouseParser.RULE_columnIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1928;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,254,this._ctx);
        if(la_===1) {
            this.state = 1925;
            this.tableIdentifier();
            this.state = 1926;
            this.match(ClickHouseParser.DOT);

        }
        this.state = 1930;
        this.nestedIdentifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NestedIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_nestedIdentifier;
    return this;
}

NestedIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NestedIdentifierContext.prototype.constructor = NestedIdentifierContext;

NestedIdentifierContext.prototype.identifier = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(IdentifierContext);
    } else {
        return this.getTypedRuleContext(IdentifierContext,i);
    }
};

NestedIdentifierContext.prototype.DOT = function() {
    return this.getToken(ClickHouseParser.DOT, 0);
};

NestedIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterNestedIdentifier(this);
	}
};

NestedIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitNestedIdentifier(this);
	}
};

NestedIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitNestedIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.NestedIdentifierContext = NestedIdentifierContext;

ClickHouseParser.prototype.nestedIdentifier = function() {

    var localctx = new NestedIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 200, ClickHouseParser.RULE_nestedIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1932;
        this.identifier();
        this.state = 1935;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,255,this._ctx);
        if(la_===1) {
            this.state = 1933;
            this.match(ClickHouseParser.DOT);
            this.state = 1934;
            this.identifier();

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableExpr;
    return this;
}

TableExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableExprContext.prototype.constructor = TableExprContext;


 
TableExprContext.prototype.copyFrom = function(ctx) {
    antlr4.ParserRuleContext.prototype.copyFrom.call(this, ctx);
};

function TableExprIdentifierContext(parser, ctx) {
	TableExprContext.call(this, parser);
    TableExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableExprIdentifierContext.prototype = Object.create(TableExprContext.prototype);
TableExprIdentifierContext.prototype.constructor = TableExprIdentifierContext;

ClickHouseParser.TableExprIdentifierContext = TableExprIdentifierContext;

TableExprIdentifierContext.prototype.tableIdentifier = function() {
    return this.getTypedRuleContext(TableIdentifierContext,0);
};
TableExprIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableExprIdentifier(this);
	}
};

TableExprIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableExprIdentifier(this);
	}
};

TableExprIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableExprIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableExprSubqueryContext(parser, ctx) {
	TableExprContext.call(this, parser);
    TableExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableExprSubqueryContext.prototype = Object.create(TableExprContext.prototype);
TableExprSubqueryContext.prototype.constructor = TableExprSubqueryContext;

ClickHouseParser.TableExprSubqueryContext = TableExprSubqueryContext;

TableExprSubqueryContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

TableExprSubqueryContext.prototype.selectUnionStmt = function() {
    return this.getTypedRuleContext(SelectUnionStmtContext,0);
};

TableExprSubqueryContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};
TableExprSubqueryContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableExprSubquery(this);
	}
};

TableExprSubqueryContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableExprSubquery(this);
	}
};

TableExprSubqueryContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableExprSubquery(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableExprAliasContext(parser, ctx) {
	TableExprContext.call(this, parser);
    TableExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableExprAliasContext.prototype = Object.create(TableExprContext.prototype);
TableExprAliasContext.prototype.constructor = TableExprAliasContext;

ClickHouseParser.TableExprAliasContext = TableExprAliasContext;

TableExprAliasContext.prototype.tableExpr = function() {
    return this.getTypedRuleContext(TableExprContext,0);
};

TableExprAliasContext.prototype.alias = function() {
    return this.getTypedRuleContext(AliasContext,0);
};

TableExprAliasContext.prototype.AS = function() {
    return this.getToken(ClickHouseParser.AS, 0);
};

TableExprAliasContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};
TableExprAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableExprAlias(this);
	}
};

TableExprAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableExprAlias(this);
	}
};

TableExprAliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableExprAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};


function TableExprFunctionContext(parser, ctx) {
	TableExprContext.call(this, parser);
    TableExprContext.prototype.copyFrom.call(this, ctx);
    return this;
}

TableExprFunctionContext.prototype = Object.create(TableExprContext.prototype);
TableExprFunctionContext.prototype.constructor = TableExprFunctionContext;

ClickHouseParser.TableExprFunctionContext = TableExprFunctionContext;

TableExprFunctionContext.prototype.tableFunctionExpr = function() {
    return this.getTypedRuleContext(TableFunctionExprContext,0);
};
TableExprFunctionContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableExprFunction(this);
	}
};

TableExprFunctionContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableExprFunction(this);
	}
};

TableExprFunctionContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableExprFunction(this);
    } else {
        return visitor.visitChildren(this);
    }
};



ClickHouseParser.prototype.tableExpr = function(_p) {
	if(_p===undefined) {
	    _p = 0;
	}
    var _parentctx = this._ctx;
    var _parentState = this.state;
    var localctx = new TableExprContext(this, this._ctx, _parentState);
    var _prevctx = localctx;
    var _startState = 202;
    this.enterRecursionRule(localctx, 202, ClickHouseParser.RULE_tableExpr, _p);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1944;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,256,this._ctx);
        switch(la_) {
        case 1:
            localctx = new TableExprIdentifierContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;

            this.state = 1938;
            this.tableIdentifier();
            break;

        case 2:
            localctx = new TableExprFunctionContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1939;
            this.tableFunctionExpr();
            break;

        case 3:
            localctx = new TableExprSubqueryContext(this, localctx);
            this._ctx = localctx;
            _prevctx = localctx;
            this.state = 1940;
            this.match(ClickHouseParser.LPAREN);
            this.state = 1941;
            this.selectUnionStmt();
            this.state = 1942;
            this.match(ClickHouseParser.RPAREN);
            break;

        }
        this._ctx.stop = this._input.LT(-1);
        this.state = 1954;
        this._errHandler.sync(this);
        var _alt = this._interp.adaptivePredict(this._input,258,this._ctx)
        while(_alt!=2 && _alt!=antlr4.atn.ATN.INVALID_ALT_NUMBER) {
            if(_alt===1) {
                if(this._parseListeners!==null) {
                    this.triggerExitRuleEvent();
                }
                _prevctx = localctx;
                localctx = new TableExprAliasContext(this, new TableExprContext(this, _parentctx, _parentState));
                this.pushNewRecursionContext(localctx, _startState, ClickHouseParser.RULE_tableExpr);
                this.state = 1946;
                if (!( this.precpred(this._ctx, 1))) {
                    throw new antlr4.error.FailedPredicateException(this, "this.precpred(this._ctx, 1)");
                }
                this.state = 1950;
                this._errHandler.sync(this);
                switch(this._input.LA(1)) {
                case ClickHouseParser.DATE:
                case ClickHouseParser.FIRST:
                case ClickHouseParser.ID:
                case ClickHouseParser.KEY:
                case ClickHouseParser.IDENTIFIER:
                    this.state = 1947;
                    this.alias();
                    break;
                case ClickHouseParser.AS:
                    this.state = 1948;
                    this.match(ClickHouseParser.AS);
                    this.state = 1949;
                    this.identifier();
                    break;
                default:
                    throw new antlr4.error.NoViableAltException(this);
                } 
            }
            this.state = 1956;
            this._errHandler.sync(this);
            _alt = this._interp.adaptivePredict(this._input,258,this._ctx);
        }

    } catch( error) {
        if(error instanceof antlr4.error.RecognitionException) {
	        localctx.exception = error;
	        this._errHandler.reportError(this, error);
	        this._errHandler.recover(this, error);
	    } else {
	    	throw error;
	    }
    } finally {
        this.unrollRecursionContexts(_parentctx)
    }
    return localctx;
};


function TableFunctionExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableFunctionExpr;
    return this;
}

TableFunctionExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableFunctionExprContext.prototype.constructor = TableFunctionExprContext;

TableFunctionExprContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TableFunctionExprContext.prototype.LPAREN = function() {
    return this.getToken(ClickHouseParser.LPAREN, 0);
};

TableFunctionExprContext.prototype.RPAREN = function() {
    return this.getToken(ClickHouseParser.RPAREN, 0);
};

TableFunctionExprContext.prototype.tableArgList = function() {
    return this.getTypedRuleContext(TableArgListContext,0);
};

TableFunctionExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableFunctionExpr(this);
	}
};

TableFunctionExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableFunctionExpr(this);
	}
};

TableFunctionExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableFunctionExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TableFunctionExprContext = TableFunctionExprContext;

ClickHouseParser.prototype.tableFunctionExpr = function() {

    var localctx = new TableFunctionExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 204, ClickHouseParser.RULE_tableFunctionExpr);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1957;
        this.identifier();
        this.state = 1958;
        this.match(ClickHouseParser.LPAREN);
        this.state = 1960;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DAY - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.HOUR - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INF - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MINUTE - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MONTH - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NAN_SQL - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULL_SQL - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.QUARTER - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SECOND - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WEEK - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.YEAR - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0) || ((((_la - 192)) & ~0x1f) == 0 && ((1 << (_la - 192)) & ((1 << (ClickHouseParser.IDENTIFIER - 192)) | (1 << (ClickHouseParser.FLOATING_LITERAL - 192)) | (1 << (ClickHouseParser.OCTAL_LITERAL - 192)) | (1 << (ClickHouseParser.DECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.HEXADECIMAL_LITERAL - 192)) | (1 << (ClickHouseParser.STRING_LITERAL - 192)) | (1 << (ClickHouseParser.DASH - 192)) | (1 << (ClickHouseParser.DOT - 192)) | (1 << (ClickHouseParser.PLUS - 192)))) !== 0)) {
            this.state = 1959;
            this.tableArgList();
        }

        this.state = 1962;
        this.match(ClickHouseParser.RPAREN);
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableIdentifier;
    return this;
}

TableIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableIdentifierContext.prototype.constructor = TableIdentifierContext;

TableIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

TableIdentifierContext.prototype.databaseIdentifier = function() {
    return this.getTypedRuleContext(DatabaseIdentifierContext,0);
};

TableIdentifierContext.prototype.DOT = function() {
    return this.getToken(ClickHouseParser.DOT, 0);
};

TableIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableIdentifier(this);
	}
};

TableIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableIdentifier(this);
	}
};

TableIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TableIdentifierContext = TableIdentifierContext;

ClickHouseParser.prototype.tableIdentifier = function() {

    var localctx = new TableIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 206, ClickHouseParser.RULE_tableIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1967;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,260,this._ctx);
        if(la_===1) {
            this.state = 1964;
            this.databaseIdentifier();
            this.state = 1965;
            this.match(ClickHouseParser.DOT);

        }
        this.state = 1969;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableArgListContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableArgList;
    return this;
}

TableArgListContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableArgListContext.prototype.constructor = TableArgListContext;

TableArgListContext.prototype.tableArgExpr = function(i) {
    if(i===undefined) {
        i = null;
    }
    if(i===null) {
        return this.getTypedRuleContexts(TableArgExprContext);
    } else {
        return this.getTypedRuleContext(TableArgExprContext,i);
    }
};

TableArgListContext.prototype.COMMA = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.COMMA);
    } else {
        return this.getToken(ClickHouseParser.COMMA, i);
    }
};


TableArgListContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableArgList(this);
	}
};

TableArgListContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableArgList(this);
	}
};

TableArgListContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableArgList(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TableArgListContext = TableArgListContext;

ClickHouseParser.prototype.tableArgList = function() {

    var localctx = new TableArgListContext(this, this._ctx, this.state);
    this.enterRule(localctx, 208, ClickHouseParser.RULE_tableArgList);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1971;
        this.tableArgExpr();
        this.state = 1976;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        while(_la===ClickHouseParser.COMMA) {
            this.state = 1972;
            this.match(ClickHouseParser.COMMA);
            this.state = 1973;
            this.tableArgExpr();
            this.state = 1978;
            this._errHandler.sync(this);
            _la = this._input.LA(1);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function TableArgExprContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_tableArgExpr;
    return this;
}

TableArgExprContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
TableArgExprContext.prototype.constructor = TableArgExprContext;

TableArgExprContext.prototype.nestedIdentifier = function() {
    return this.getTypedRuleContext(NestedIdentifierContext,0);
};

TableArgExprContext.prototype.tableFunctionExpr = function() {
    return this.getTypedRuleContext(TableFunctionExprContext,0);
};

TableArgExprContext.prototype.literal = function() {
    return this.getTypedRuleContext(LiteralContext,0);
};

TableArgExprContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterTableArgExpr(this);
	}
};

TableArgExprContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitTableArgExpr(this);
	}
};

TableArgExprContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitTableArgExpr(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.TableArgExprContext = TableArgExprContext;

ClickHouseParser.prototype.tableArgExpr = function() {

    var localctx = new TableArgExprContext(this, this._ctx, this.state);
    this.enterRule(localctx, 210, ClickHouseParser.RULE_tableArgExpr);
    try {
        this.state = 1982;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,262,this._ctx);
        switch(la_) {
        case 1:
            this.enterOuterAlt(localctx, 1);
            this.state = 1979;
            this.nestedIdentifier();
            break;

        case 2:
            this.enterOuterAlt(localctx, 2);
            this.state = 1980;
            this.tableFunctionExpr();
            break;

        case 3:
            this.enterOuterAlt(localctx, 3);
            this.state = 1981;
            this.literal();
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function DatabaseIdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_databaseIdentifier;
    return this;
}

DatabaseIdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
DatabaseIdentifierContext.prototype.constructor = DatabaseIdentifierContext;

DatabaseIdentifierContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

DatabaseIdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterDatabaseIdentifier(this);
	}
};

DatabaseIdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitDatabaseIdentifier(this);
	}
};

DatabaseIdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitDatabaseIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.DatabaseIdentifierContext = DatabaseIdentifierContext;

ClickHouseParser.prototype.databaseIdentifier = function() {

    var localctx = new DatabaseIdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 212, ClickHouseParser.RULE_databaseIdentifier);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1984;
        this.identifier();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function FloatingLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_floatingLiteral;
    return this;
}

FloatingLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
FloatingLiteralContext.prototype.constructor = FloatingLiteralContext;

FloatingLiteralContext.prototype.FLOATING_LITERAL = function() {
    return this.getToken(ClickHouseParser.FLOATING_LITERAL, 0);
};

FloatingLiteralContext.prototype.DOT = function() {
    return this.getToken(ClickHouseParser.DOT, 0);
};

FloatingLiteralContext.prototype.DECIMAL_LITERAL = function(i) {
	if(i===undefined) {
		i = null;
	}
    if(i===null) {
        return this.getTokens(ClickHouseParser.DECIMAL_LITERAL);
    } else {
        return this.getToken(ClickHouseParser.DECIMAL_LITERAL, i);
    }
};


FloatingLiteralContext.prototype.OCTAL_LITERAL = function() {
    return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
};

FloatingLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterFloatingLiteral(this);
	}
};

FloatingLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitFloatingLiteral(this);
	}
};

FloatingLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitFloatingLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.FloatingLiteralContext = FloatingLiteralContext;

ClickHouseParser.prototype.floatingLiteral = function() {

    var localctx = new FloatingLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 214, ClickHouseParser.RULE_floatingLiteral);
    var _la = 0; // Token type
    try {
        this.state = 1994;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.FLOATING_LITERAL:
            this.enterOuterAlt(localctx, 1);
            this.state = 1986;
            this.match(ClickHouseParser.FLOATING_LITERAL);
            break;
        case ClickHouseParser.DOT:
            this.enterOuterAlt(localctx, 2);
            this.state = 1987;
            this.match(ClickHouseParser.DOT);
            this.state = 1988;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.OCTAL_LITERAL || _la===ClickHouseParser.DECIMAL_LITERAL)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
            break;
        case ClickHouseParser.DECIMAL_LITERAL:
            this.enterOuterAlt(localctx, 3);
            this.state = 1989;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            this.state = 1990;
            this.match(ClickHouseParser.DOT);
            this.state = 1992;
            this._errHandler.sync(this);
            var la_ = this._interp.adaptivePredict(this._input,263,this._ctx);
            if(la_===1) {
                this.state = 1991;
                _la = this._input.LA(1);
                if(!(_la===ClickHouseParser.OCTAL_LITERAL || _la===ClickHouseParser.DECIMAL_LITERAL)) {
                this._errHandler.recoverInline(this);
                }
                else {
                	this._errHandler.reportMatch(this);
                    this.consume();
                }

            }
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function NumberLiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_numberLiteral;
    return this;
}

NumberLiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
NumberLiteralContext.prototype.constructor = NumberLiteralContext;

NumberLiteralContext.prototype.floatingLiteral = function() {
    return this.getTypedRuleContext(FloatingLiteralContext,0);
};

NumberLiteralContext.prototype.OCTAL_LITERAL = function() {
    return this.getToken(ClickHouseParser.OCTAL_LITERAL, 0);
};

NumberLiteralContext.prototype.DECIMAL_LITERAL = function() {
    return this.getToken(ClickHouseParser.DECIMAL_LITERAL, 0);
};

NumberLiteralContext.prototype.HEXADECIMAL_LITERAL = function() {
    return this.getToken(ClickHouseParser.HEXADECIMAL_LITERAL, 0);
};

NumberLiteralContext.prototype.INF = function() {
    return this.getToken(ClickHouseParser.INF, 0);
};

NumberLiteralContext.prototype.NAN_SQL = function() {
    return this.getToken(ClickHouseParser.NAN_SQL, 0);
};

NumberLiteralContext.prototype.PLUS = function() {
    return this.getToken(ClickHouseParser.PLUS, 0);
};

NumberLiteralContext.prototype.DASH = function() {
    return this.getToken(ClickHouseParser.DASH, 0);
};

NumberLiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitNumberLiteral(this);
	}
};

NumberLiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitNumberLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.NumberLiteralContext = NumberLiteralContext;

ClickHouseParser.prototype.numberLiteral = function() {

    var localctx = new NumberLiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 216, ClickHouseParser.RULE_numberLiteral);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 1997;
        this._errHandler.sync(this);
        _la = this._input.LA(1);
        if(_la===ClickHouseParser.DASH || _la===ClickHouseParser.PLUS) {
            this.state = 1996;
            _la = this._input.LA(1);
            if(!(_la===ClickHouseParser.DASH || _la===ClickHouseParser.PLUS)) {
            this._errHandler.recoverInline(this);
            }
            else {
            	this._errHandler.reportMatch(this);
                this.consume();
            }
        }

        this.state = 2005;
        this._errHandler.sync(this);
        var la_ = this._interp.adaptivePredict(this._input,266,this._ctx);
        switch(la_) {
        case 1:
            this.state = 1999;
            this.floatingLiteral();
            break;

        case 2:
            this.state = 2000;
            this.match(ClickHouseParser.OCTAL_LITERAL);
            break;

        case 3:
            this.state = 2001;
            this.match(ClickHouseParser.DECIMAL_LITERAL);
            break;

        case 4:
            this.state = 2002;
            this.match(ClickHouseParser.HEXADECIMAL_LITERAL);
            break;

        case 5:
            this.state = 2003;
            this.match(ClickHouseParser.INF);
            break;

        case 6:
            this.state = 2004;
            this.match(ClickHouseParser.NAN_SQL);
            break;

        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function LiteralContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_literal;
    return this;
}

LiteralContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
LiteralContext.prototype.constructor = LiteralContext;

LiteralContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

LiteralContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

LiteralContext.prototype.NULL_SQL = function() {
    return this.getToken(ClickHouseParser.NULL_SQL, 0);
};

LiteralContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterLiteral(this);
	}
};

LiteralContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitLiteral(this);
	}
};

LiteralContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitLiteral(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.LiteralContext = LiteralContext;

ClickHouseParser.prototype.literal = function() {

    var localctx = new LiteralContext(this, this._ctx, this.state);
    this.enterRule(localctx, 218, ClickHouseParser.RULE_literal);
    try {
        this.state = 2010;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.INF:
        case ClickHouseParser.NAN_SQL:
        case ClickHouseParser.FLOATING_LITERAL:
        case ClickHouseParser.OCTAL_LITERAL:
        case ClickHouseParser.DECIMAL_LITERAL:
        case ClickHouseParser.HEXADECIMAL_LITERAL:
        case ClickHouseParser.DASH:
        case ClickHouseParser.DOT:
        case ClickHouseParser.PLUS:
            this.enterOuterAlt(localctx, 1);
            this.state = 2007;
            this.numberLiteral();
            break;
        case ClickHouseParser.STRING_LITERAL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2008;
            this.match(ClickHouseParser.STRING_LITERAL);
            break;
        case ClickHouseParser.NULL_SQL:
            this.enterOuterAlt(localctx, 3);
            this.state = 2009;
            this.match(ClickHouseParser.NULL_SQL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IntervalContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_interval;
    return this;
}

IntervalContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IntervalContext.prototype.constructor = IntervalContext;

IntervalContext.prototype.SECOND = function() {
    return this.getToken(ClickHouseParser.SECOND, 0);
};

IntervalContext.prototype.MINUTE = function() {
    return this.getToken(ClickHouseParser.MINUTE, 0);
};

IntervalContext.prototype.HOUR = function() {
    return this.getToken(ClickHouseParser.HOUR, 0);
};

IntervalContext.prototype.DAY = function() {
    return this.getToken(ClickHouseParser.DAY, 0);
};

IntervalContext.prototype.WEEK = function() {
    return this.getToken(ClickHouseParser.WEEK, 0);
};

IntervalContext.prototype.MONTH = function() {
    return this.getToken(ClickHouseParser.MONTH, 0);
};

IntervalContext.prototype.QUARTER = function() {
    return this.getToken(ClickHouseParser.QUARTER, 0);
};

IntervalContext.prototype.YEAR = function() {
    return this.getToken(ClickHouseParser.YEAR, 0);
};

IntervalContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterInterval(this);
	}
};

IntervalContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitInterval(this);
	}
};

IntervalContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitInterval(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.IntervalContext = IntervalContext;

ClickHouseParser.prototype.interval = function() {

    var localctx = new IntervalContext(this, this._ctx, this.state);
    this.enterRule(localctx, 220, ClickHouseParser.RULE_interval);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2012;
        _la = this._input.LA(1);
        if(!(_la===ClickHouseParser.DAY || _la===ClickHouseParser.HOUR || ((((_la - 107)) & ~0x1f) == 0 && ((1 << (_la - 107)) & ((1 << (ClickHouseParser.MINUTE - 107)) | (1 << (ClickHouseParser.MONTH - 107)) | (1 << (ClickHouseParser.QUARTER - 107)))) !== 0) || _la===ClickHouseParser.SECOND || _la===ClickHouseParser.WEEK || _la===ClickHouseParser.YEAR)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeywordContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_keyword;
    return this;
}

KeywordContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordContext.prototype.constructor = KeywordContext;

KeywordContext.prototype.AFTER = function() {
    return this.getToken(ClickHouseParser.AFTER, 0);
};

KeywordContext.prototype.ALIAS = function() {
    return this.getToken(ClickHouseParser.ALIAS, 0);
};

KeywordContext.prototype.ALL = function() {
    return this.getToken(ClickHouseParser.ALL, 0);
};

KeywordContext.prototype.ALTER = function() {
    return this.getToken(ClickHouseParser.ALTER, 0);
};

KeywordContext.prototype.AND = function() {
    return this.getToken(ClickHouseParser.AND, 0);
};

KeywordContext.prototype.ANTI = function() {
    return this.getToken(ClickHouseParser.ANTI, 0);
};

KeywordContext.prototype.ANY = function() {
    return this.getToken(ClickHouseParser.ANY, 0);
};

KeywordContext.prototype.ARRAY = function() {
    return this.getToken(ClickHouseParser.ARRAY, 0);
};

KeywordContext.prototype.AS = function() {
    return this.getToken(ClickHouseParser.AS, 0);
};

KeywordContext.prototype.ASCENDING = function() {
    return this.getToken(ClickHouseParser.ASCENDING, 0);
};

KeywordContext.prototype.ASOF = function() {
    return this.getToken(ClickHouseParser.ASOF, 0);
};

KeywordContext.prototype.AST = function() {
    return this.getToken(ClickHouseParser.AST, 0);
};

KeywordContext.prototype.ASYNC = function() {
    return this.getToken(ClickHouseParser.ASYNC, 0);
};

KeywordContext.prototype.ATTACH = function() {
    return this.getToken(ClickHouseParser.ATTACH, 0);
};

KeywordContext.prototype.BETWEEN = function() {
    return this.getToken(ClickHouseParser.BETWEEN, 0);
};

KeywordContext.prototype.BOTH = function() {
    return this.getToken(ClickHouseParser.BOTH, 0);
};

KeywordContext.prototype.BY = function() {
    return this.getToken(ClickHouseParser.BY, 0);
};

KeywordContext.prototype.CASE = function() {
    return this.getToken(ClickHouseParser.CASE, 0);
};

KeywordContext.prototype.CAST = function() {
    return this.getToken(ClickHouseParser.CAST, 0);
};

KeywordContext.prototype.CHECK = function() {
    return this.getToken(ClickHouseParser.CHECK, 0);
};

KeywordContext.prototype.CLEAR = function() {
    return this.getToken(ClickHouseParser.CLEAR, 0);
};

KeywordContext.prototype.CLUSTER = function() {
    return this.getToken(ClickHouseParser.CLUSTER, 0);
};

KeywordContext.prototype.CODEC = function() {
    return this.getToken(ClickHouseParser.CODEC, 0);
};

KeywordContext.prototype.COLLATE = function() {
    return this.getToken(ClickHouseParser.COLLATE, 0);
};

KeywordContext.prototype.COLUMN = function() {
    return this.getToken(ClickHouseParser.COLUMN, 0);
};

KeywordContext.prototype.COMMENT = function() {
    return this.getToken(ClickHouseParser.COMMENT, 0);
};

KeywordContext.prototype.CONSTRAINT = function() {
    return this.getToken(ClickHouseParser.CONSTRAINT, 0);
};

KeywordContext.prototype.CREATE = function() {
    return this.getToken(ClickHouseParser.CREATE, 0);
};

KeywordContext.prototype.CROSS = function() {
    return this.getToken(ClickHouseParser.CROSS, 0);
};

KeywordContext.prototype.CUBE = function() {
    return this.getToken(ClickHouseParser.CUBE, 0);
};

KeywordContext.prototype.CURRENT = function() {
    return this.getToken(ClickHouseParser.CURRENT, 0);
};

KeywordContext.prototype.DATABASE = function() {
    return this.getToken(ClickHouseParser.DATABASE, 0);
};

KeywordContext.prototype.DATABASES = function() {
    return this.getToken(ClickHouseParser.DATABASES, 0);
};

KeywordContext.prototype.DATE = function() {
    return this.getToken(ClickHouseParser.DATE, 0);
};

KeywordContext.prototype.DEDUPLICATE = function() {
    return this.getToken(ClickHouseParser.DEDUPLICATE, 0);
};

KeywordContext.prototype.DEFAULT = function() {
    return this.getToken(ClickHouseParser.DEFAULT, 0);
};

KeywordContext.prototype.DELAY = function() {
    return this.getToken(ClickHouseParser.DELAY, 0);
};

KeywordContext.prototype.DELETE = function() {
    return this.getToken(ClickHouseParser.DELETE, 0);
};

KeywordContext.prototype.DESCRIBE = function() {
    return this.getToken(ClickHouseParser.DESCRIBE, 0);
};

KeywordContext.prototype.DESC = function() {
    return this.getToken(ClickHouseParser.DESC, 0);
};

KeywordContext.prototype.DESCENDING = function() {
    return this.getToken(ClickHouseParser.DESCENDING, 0);
};

KeywordContext.prototype.DETACH = function() {
    return this.getToken(ClickHouseParser.DETACH, 0);
};

KeywordContext.prototype.DICTIONARIES = function() {
    return this.getToken(ClickHouseParser.DICTIONARIES, 0);
};

KeywordContext.prototype.DICTIONARY = function() {
    return this.getToken(ClickHouseParser.DICTIONARY, 0);
};

KeywordContext.prototype.DISK = function() {
    return this.getToken(ClickHouseParser.DISK, 0);
};

KeywordContext.prototype.DISTINCT = function() {
    return this.getToken(ClickHouseParser.DISTINCT, 0);
};

KeywordContext.prototype.DISTRIBUTED = function() {
    return this.getToken(ClickHouseParser.DISTRIBUTED, 0);
};

KeywordContext.prototype.DROP = function() {
    return this.getToken(ClickHouseParser.DROP, 0);
};

KeywordContext.prototype.ELSE = function() {
    return this.getToken(ClickHouseParser.ELSE, 0);
};

KeywordContext.prototype.END = function() {
    return this.getToken(ClickHouseParser.END, 0);
};

KeywordContext.prototype.ENGINE = function() {
    return this.getToken(ClickHouseParser.ENGINE, 0);
};

KeywordContext.prototype.EVENTS = function() {
    return this.getToken(ClickHouseParser.EVENTS, 0);
};

KeywordContext.prototype.EXISTS = function() {
    return this.getToken(ClickHouseParser.EXISTS, 0);
};

KeywordContext.prototype.EXPLAIN = function() {
    return this.getToken(ClickHouseParser.EXPLAIN, 0);
};

KeywordContext.prototype.EXPRESSION = function() {
    return this.getToken(ClickHouseParser.EXPRESSION, 0);
};

KeywordContext.prototype.EXTRACT = function() {
    return this.getToken(ClickHouseParser.EXTRACT, 0);
};

KeywordContext.prototype.FETCHES = function() {
    return this.getToken(ClickHouseParser.FETCHES, 0);
};

KeywordContext.prototype.FINAL = function() {
    return this.getToken(ClickHouseParser.FINAL, 0);
};

KeywordContext.prototype.FIRST = function() {
    return this.getToken(ClickHouseParser.FIRST, 0);
};

KeywordContext.prototype.FLUSH = function() {
    return this.getToken(ClickHouseParser.FLUSH, 0);
};

KeywordContext.prototype.FOR = function() {
    return this.getToken(ClickHouseParser.FOR, 0);
};

KeywordContext.prototype.FOLLOWING = function() {
    return this.getToken(ClickHouseParser.FOLLOWING, 0);
};

KeywordContext.prototype.FORMAT = function() {
    return this.getToken(ClickHouseParser.FORMAT, 0);
};

KeywordContext.prototype.FREEZE = function() {
    return this.getToken(ClickHouseParser.FREEZE, 0);
};

KeywordContext.prototype.FROM = function() {
    return this.getToken(ClickHouseParser.FROM, 0);
};

KeywordContext.prototype.FULL = function() {
    return this.getToken(ClickHouseParser.FULL, 0);
};

KeywordContext.prototype.FUNCTION = function() {
    return this.getToken(ClickHouseParser.FUNCTION, 0);
};

KeywordContext.prototype.GLOBAL = function() {
    return this.getToken(ClickHouseParser.GLOBAL, 0);
};

KeywordContext.prototype.GRANULARITY = function() {
    return this.getToken(ClickHouseParser.GRANULARITY, 0);
};

KeywordContext.prototype.GROUP = function() {
    return this.getToken(ClickHouseParser.GROUP, 0);
};

KeywordContext.prototype.HAVING = function() {
    return this.getToken(ClickHouseParser.HAVING, 0);
};

KeywordContext.prototype.HIERARCHICAL = function() {
    return this.getToken(ClickHouseParser.HIERARCHICAL, 0);
};

KeywordContext.prototype.ID = function() {
    return this.getToken(ClickHouseParser.ID, 0);
};

KeywordContext.prototype.IF = function() {
    return this.getToken(ClickHouseParser.IF, 0);
};

KeywordContext.prototype.ILIKE = function() {
    return this.getToken(ClickHouseParser.ILIKE, 0);
};

KeywordContext.prototype.IN = function() {
    return this.getToken(ClickHouseParser.IN, 0);
};

KeywordContext.prototype.INDEX = function() {
    return this.getToken(ClickHouseParser.INDEX, 0);
};

KeywordContext.prototype.INJECTIVE = function() {
    return this.getToken(ClickHouseParser.INJECTIVE, 0);
};

KeywordContext.prototype.INNER = function() {
    return this.getToken(ClickHouseParser.INNER, 0);
};

KeywordContext.prototype.INSERT = function() {
    return this.getToken(ClickHouseParser.INSERT, 0);
};

KeywordContext.prototype.INTERVAL = function() {
    return this.getToken(ClickHouseParser.INTERVAL, 0);
};

KeywordContext.prototype.INTO = function() {
    return this.getToken(ClickHouseParser.INTO, 0);
};

KeywordContext.prototype.IS = function() {
    return this.getToken(ClickHouseParser.IS, 0);
};

KeywordContext.prototype.IS_OBJECT_ID = function() {
    return this.getToken(ClickHouseParser.IS_OBJECT_ID, 0);
};

KeywordContext.prototype.JOIN = function() {
    return this.getToken(ClickHouseParser.JOIN, 0);
};

KeywordContext.prototype.JSON_FALSE = function() {
    return this.getToken(ClickHouseParser.JSON_FALSE, 0);
};

KeywordContext.prototype.JSON_TRUE = function() {
    return this.getToken(ClickHouseParser.JSON_TRUE, 0);
};

KeywordContext.prototype.KEY = function() {
    return this.getToken(ClickHouseParser.KEY, 0);
};

KeywordContext.prototype.KILL = function() {
    return this.getToken(ClickHouseParser.KILL, 0);
};

KeywordContext.prototype.LAST = function() {
    return this.getToken(ClickHouseParser.LAST, 0);
};

KeywordContext.prototype.LAYOUT = function() {
    return this.getToken(ClickHouseParser.LAYOUT, 0);
};

KeywordContext.prototype.LEADING = function() {
    return this.getToken(ClickHouseParser.LEADING, 0);
};

KeywordContext.prototype.LEFT = function() {
    return this.getToken(ClickHouseParser.LEFT, 0);
};

KeywordContext.prototype.LIFETIME = function() {
    return this.getToken(ClickHouseParser.LIFETIME, 0);
};

KeywordContext.prototype.LIKE = function() {
    return this.getToken(ClickHouseParser.LIKE, 0);
};

KeywordContext.prototype.LIMIT = function() {
    return this.getToken(ClickHouseParser.LIMIT, 0);
};

KeywordContext.prototype.LIVE = function() {
    return this.getToken(ClickHouseParser.LIVE, 0);
};

KeywordContext.prototype.LOCAL = function() {
    return this.getToken(ClickHouseParser.LOCAL, 0);
};

KeywordContext.prototype.LOGS = function() {
    return this.getToken(ClickHouseParser.LOGS, 0);
};

KeywordContext.prototype.MATERIALIZE = function() {
    return this.getToken(ClickHouseParser.MATERIALIZE, 0);
};

KeywordContext.prototype.MATERIALIZED = function() {
    return this.getToken(ClickHouseParser.MATERIALIZED, 0);
};

KeywordContext.prototype.MAX = function() {
    return this.getToken(ClickHouseParser.MAX, 0);
};

KeywordContext.prototype.MERGES = function() {
    return this.getToken(ClickHouseParser.MERGES, 0);
};

KeywordContext.prototype.MIN = function() {
    return this.getToken(ClickHouseParser.MIN, 0);
};

KeywordContext.prototype.MODIFY = function() {
    return this.getToken(ClickHouseParser.MODIFY, 0);
};

KeywordContext.prototype.MOVE = function() {
    return this.getToken(ClickHouseParser.MOVE, 0);
};

KeywordContext.prototype.MUTATION = function() {
    return this.getToken(ClickHouseParser.MUTATION, 0);
};

KeywordContext.prototype.NO = function() {
    return this.getToken(ClickHouseParser.NO, 0);
};

KeywordContext.prototype.NOT = function() {
    return this.getToken(ClickHouseParser.NOT, 0);
};

KeywordContext.prototype.NULLS = function() {
    return this.getToken(ClickHouseParser.NULLS, 0);
};

KeywordContext.prototype.OFFSET = function() {
    return this.getToken(ClickHouseParser.OFFSET, 0);
};

KeywordContext.prototype.ON = function() {
    return this.getToken(ClickHouseParser.ON, 0);
};

KeywordContext.prototype.OPTIMIZE = function() {
    return this.getToken(ClickHouseParser.OPTIMIZE, 0);
};

KeywordContext.prototype.OR = function() {
    return this.getToken(ClickHouseParser.OR, 0);
};

KeywordContext.prototype.ORDER = function() {
    return this.getToken(ClickHouseParser.ORDER, 0);
};

KeywordContext.prototype.OUTER = function() {
    return this.getToken(ClickHouseParser.OUTER, 0);
};

KeywordContext.prototype.OUTFILE = function() {
    return this.getToken(ClickHouseParser.OUTFILE, 0);
};

KeywordContext.prototype.OVER = function() {
    return this.getToken(ClickHouseParser.OVER, 0);
};

KeywordContext.prototype.PARTITION = function() {
    return this.getToken(ClickHouseParser.PARTITION, 0);
};

KeywordContext.prototype.POPULATE = function() {
    return this.getToken(ClickHouseParser.POPULATE, 0);
};

KeywordContext.prototype.PRECEDING = function() {
    return this.getToken(ClickHouseParser.PRECEDING, 0);
};

KeywordContext.prototype.PREWHERE = function() {
    return this.getToken(ClickHouseParser.PREWHERE, 0);
};

KeywordContext.prototype.PRIMARY = function() {
    return this.getToken(ClickHouseParser.PRIMARY, 0);
};

KeywordContext.prototype.RANGE = function() {
    return this.getToken(ClickHouseParser.RANGE, 0);
};

KeywordContext.prototype.RELOAD = function() {
    return this.getToken(ClickHouseParser.RELOAD, 0);
};

KeywordContext.prototype.REMOVE = function() {
    return this.getToken(ClickHouseParser.REMOVE, 0);
};

KeywordContext.prototype.RENAME = function() {
    return this.getToken(ClickHouseParser.RENAME, 0);
};

KeywordContext.prototype.REPLACE = function() {
    return this.getToken(ClickHouseParser.REPLACE, 0);
};

KeywordContext.prototype.REPLICA = function() {
    return this.getToken(ClickHouseParser.REPLICA, 0);
};

KeywordContext.prototype.REPLICATED = function() {
    return this.getToken(ClickHouseParser.REPLICATED, 0);
};

KeywordContext.prototype.RIGHT = function() {
    return this.getToken(ClickHouseParser.RIGHT, 0);
};

KeywordContext.prototype.ROLLUP = function() {
    return this.getToken(ClickHouseParser.ROLLUP, 0);
};

KeywordContext.prototype.ROW = function() {
    return this.getToken(ClickHouseParser.ROW, 0);
};

KeywordContext.prototype.ROWS = function() {
    return this.getToken(ClickHouseParser.ROWS, 0);
};

KeywordContext.prototype.SAMPLE = function() {
    return this.getToken(ClickHouseParser.SAMPLE, 0);
};

KeywordContext.prototype.SELECT = function() {
    return this.getToken(ClickHouseParser.SELECT, 0);
};

KeywordContext.prototype.SEMI = function() {
    return this.getToken(ClickHouseParser.SEMI, 0);
};

KeywordContext.prototype.SENDS = function() {
    return this.getToken(ClickHouseParser.SENDS, 0);
};

KeywordContext.prototype.SET = function() {
    return this.getToken(ClickHouseParser.SET, 0);
};

KeywordContext.prototype.SETTINGS = function() {
    return this.getToken(ClickHouseParser.SETTINGS, 0);
};

KeywordContext.prototype.SHOW = function() {
    return this.getToken(ClickHouseParser.SHOW, 0);
};

KeywordContext.prototype.SOURCE = function() {
    return this.getToken(ClickHouseParser.SOURCE, 0);
};

KeywordContext.prototype.START = function() {
    return this.getToken(ClickHouseParser.START, 0);
};

KeywordContext.prototype.STOP = function() {
    return this.getToken(ClickHouseParser.STOP, 0);
};

KeywordContext.prototype.SUBSTRING = function() {
    return this.getToken(ClickHouseParser.SUBSTRING, 0);
};

KeywordContext.prototype.SYNC = function() {
    return this.getToken(ClickHouseParser.SYNC, 0);
};

KeywordContext.prototype.SYNTAX = function() {
    return this.getToken(ClickHouseParser.SYNTAX, 0);
};

KeywordContext.prototype.SYSTEM = function() {
    return this.getToken(ClickHouseParser.SYSTEM, 0);
};

KeywordContext.prototype.TABLE = function() {
    return this.getToken(ClickHouseParser.TABLE, 0);
};

KeywordContext.prototype.TABLES = function() {
    return this.getToken(ClickHouseParser.TABLES, 0);
};

KeywordContext.prototype.TEMPORARY = function() {
    return this.getToken(ClickHouseParser.TEMPORARY, 0);
};

KeywordContext.prototype.TEST = function() {
    return this.getToken(ClickHouseParser.TEST, 0);
};

KeywordContext.prototype.THEN = function() {
    return this.getToken(ClickHouseParser.THEN, 0);
};

KeywordContext.prototype.TIES = function() {
    return this.getToken(ClickHouseParser.TIES, 0);
};

KeywordContext.prototype.TIMEOUT = function() {
    return this.getToken(ClickHouseParser.TIMEOUT, 0);
};

KeywordContext.prototype.TIMESTAMP = function() {
    return this.getToken(ClickHouseParser.TIMESTAMP, 0);
};

KeywordContext.prototype.TOTALS = function() {
    return this.getToken(ClickHouseParser.TOTALS, 0);
};

KeywordContext.prototype.TRAILING = function() {
    return this.getToken(ClickHouseParser.TRAILING, 0);
};

KeywordContext.prototype.TRIM = function() {
    return this.getToken(ClickHouseParser.TRIM, 0);
};

KeywordContext.prototype.TRUNCATE = function() {
    return this.getToken(ClickHouseParser.TRUNCATE, 0);
};

KeywordContext.prototype.TO = function() {
    return this.getToken(ClickHouseParser.TO, 0);
};

KeywordContext.prototype.TOP = function() {
    return this.getToken(ClickHouseParser.TOP, 0);
};

KeywordContext.prototype.TTL = function() {
    return this.getToken(ClickHouseParser.TTL, 0);
};

KeywordContext.prototype.TYPE = function() {
    return this.getToken(ClickHouseParser.TYPE, 0);
};

KeywordContext.prototype.UNBOUNDED = function() {
    return this.getToken(ClickHouseParser.UNBOUNDED, 0);
};

KeywordContext.prototype.UNION = function() {
    return this.getToken(ClickHouseParser.UNION, 0);
};

KeywordContext.prototype.UPDATE = function() {
    return this.getToken(ClickHouseParser.UPDATE, 0);
};

KeywordContext.prototype.USE = function() {
    return this.getToken(ClickHouseParser.USE, 0);
};

KeywordContext.prototype.USING = function() {
    return this.getToken(ClickHouseParser.USING, 0);
};

KeywordContext.prototype.UUID = function() {
    return this.getToken(ClickHouseParser.UUID, 0);
};

KeywordContext.prototype.VALUES = function() {
    return this.getToken(ClickHouseParser.VALUES, 0);
};

KeywordContext.prototype.VIEW = function() {
    return this.getToken(ClickHouseParser.VIEW, 0);
};

KeywordContext.prototype.VOLUME = function() {
    return this.getToken(ClickHouseParser.VOLUME, 0);
};

KeywordContext.prototype.WATCH = function() {
    return this.getToken(ClickHouseParser.WATCH, 0);
};

KeywordContext.prototype.WHEN = function() {
    return this.getToken(ClickHouseParser.WHEN, 0);
};

KeywordContext.prototype.WHERE = function() {
    return this.getToken(ClickHouseParser.WHERE, 0);
};

KeywordContext.prototype.WINDOW = function() {
    return this.getToken(ClickHouseParser.WINDOW, 0);
};

KeywordContext.prototype.WITH = function() {
    return this.getToken(ClickHouseParser.WITH, 0);
};

KeywordContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterKeyword(this);
	}
};

KeywordContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitKeyword(this);
	}
};

KeywordContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitKeyword(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.KeywordContext = KeywordContext;

ClickHouseParser.prototype.keyword = function() {

    var localctx = new KeywordContext(this, this._ctx, this.state);
    this.enterRule(localctx, 222, ClickHouseParser.RULE_keyword);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2014;
        _la = this._input.LA(1);
        if(!((((_la) & ~0x1f) == 0 && ((1 << _la) & ((1 << ClickHouseParser.AFTER) | (1 << ClickHouseParser.ALIAS) | (1 << ClickHouseParser.ALL) | (1 << ClickHouseParser.ALTER) | (1 << ClickHouseParser.AND) | (1 << ClickHouseParser.ANTI) | (1 << ClickHouseParser.ANY) | (1 << ClickHouseParser.ARRAY) | (1 << ClickHouseParser.AS) | (1 << ClickHouseParser.ASCENDING) | (1 << ClickHouseParser.ASOF) | (1 << ClickHouseParser.AST) | (1 << ClickHouseParser.ASYNC) | (1 << ClickHouseParser.ATTACH) | (1 << ClickHouseParser.BETWEEN) | (1 << ClickHouseParser.BOTH) | (1 << ClickHouseParser.BY) | (1 << ClickHouseParser.CASE) | (1 << ClickHouseParser.CAST) | (1 << ClickHouseParser.CHECK) | (1 << ClickHouseParser.CLEAR) | (1 << ClickHouseParser.CLUSTER) | (1 << ClickHouseParser.CODEC) | (1 << ClickHouseParser.COLLATE) | (1 << ClickHouseParser.COLUMN) | (1 << ClickHouseParser.COMMENT) | (1 << ClickHouseParser.CONSTRAINT) | (1 << ClickHouseParser.CREATE) | (1 << ClickHouseParser.CROSS) | (1 << ClickHouseParser.CUBE))) !== 0) || ((((_la - 32)) & ~0x1f) == 0 && ((1 << (_la - 32)) & ((1 << (ClickHouseParser.CURRENT - 32)) | (1 << (ClickHouseParser.DATABASE - 32)) | (1 << (ClickHouseParser.DATABASES - 32)) | (1 << (ClickHouseParser.DATE - 32)) | (1 << (ClickHouseParser.DEDUPLICATE - 32)) | (1 << (ClickHouseParser.DEFAULT - 32)) | (1 << (ClickHouseParser.DELAY - 32)) | (1 << (ClickHouseParser.DELETE - 32)) | (1 << (ClickHouseParser.DESC - 32)) | (1 << (ClickHouseParser.DESCENDING - 32)) | (1 << (ClickHouseParser.DESCRIBE - 32)) | (1 << (ClickHouseParser.DETACH - 32)) | (1 << (ClickHouseParser.DICTIONARIES - 32)) | (1 << (ClickHouseParser.DICTIONARY - 32)) | (1 << (ClickHouseParser.DISK - 32)) | (1 << (ClickHouseParser.DISTINCT - 32)) | (1 << (ClickHouseParser.DISTRIBUTED - 32)) | (1 << (ClickHouseParser.DROP - 32)) | (1 << (ClickHouseParser.ELSE - 32)) | (1 << (ClickHouseParser.END - 32)) | (1 << (ClickHouseParser.ENGINE - 32)) | (1 << (ClickHouseParser.EVENTS - 32)) | (1 << (ClickHouseParser.EXISTS - 32)) | (1 << (ClickHouseParser.EXPLAIN - 32)) | (1 << (ClickHouseParser.EXPRESSION - 32)) | (1 << (ClickHouseParser.EXTRACT - 32)) | (1 << (ClickHouseParser.FETCHES - 32)) | (1 << (ClickHouseParser.FINAL - 32)) | (1 << (ClickHouseParser.FIRST - 32)) | (1 << (ClickHouseParser.FLUSH - 32)) | (1 << (ClickHouseParser.FOLLOWING - 32)))) !== 0) || ((((_la - 64)) & ~0x1f) == 0 && ((1 << (_la - 64)) & ((1 << (ClickHouseParser.FOR - 64)) | (1 << (ClickHouseParser.FORMAT - 64)) | (1 << (ClickHouseParser.FREEZE - 64)) | (1 << (ClickHouseParser.FROM - 64)) | (1 << (ClickHouseParser.FULL - 64)) | (1 << (ClickHouseParser.FUNCTION - 64)) | (1 << (ClickHouseParser.GLOBAL - 64)) | (1 << (ClickHouseParser.GRANULARITY - 64)) | (1 << (ClickHouseParser.GROUP - 64)) | (1 << (ClickHouseParser.HAVING - 64)) | (1 << (ClickHouseParser.HIERARCHICAL - 64)) | (1 << (ClickHouseParser.ID - 64)) | (1 << (ClickHouseParser.IF - 64)) | (1 << (ClickHouseParser.ILIKE - 64)) | (1 << (ClickHouseParser.IN - 64)) | (1 << (ClickHouseParser.INDEX - 64)) | (1 << (ClickHouseParser.INJECTIVE - 64)) | (1 << (ClickHouseParser.INNER - 64)) | (1 << (ClickHouseParser.INSERT - 64)) | (1 << (ClickHouseParser.INTERVAL - 64)) | (1 << (ClickHouseParser.INTO - 64)) | (1 << (ClickHouseParser.IS - 64)) | (1 << (ClickHouseParser.IS_OBJECT_ID - 64)) | (1 << (ClickHouseParser.JOIN - 64)) | (1 << (ClickHouseParser.KEY - 64)) | (1 << (ClickHouseParser.KILL - 64)) | (1 << (ClickHouseParser.LAST - 64)) | (1 << (ClickHouseParser.LAYOUT - 64)) | (1 << (ClickHouseParser.LEADING - 64)) | (1 << (ClickHouseParser.LEFT - 64)))) !== 0) || ((((_la - 96)) & ~0x1f) == 0 && ((1 << (_la - 96)) & ((1 << (ClickHouseParser.LIFETIME - 96)) | (1 << (ClickHouseParser.LIKE - 96)) | (1 << (ClickHouseParser.LIMIT - 96)) | (1 << (ClickHouseParser.LIVE - 96)) | (1 << (ClickHouseParser.LOCAL - 96)) | (1 << (ClickHouseParser.LOGS - 96)) | (1 << (ClickHouseParser.MATERIALIZE - 96)) | (1 << (ClickHouseParser.MATERIALIZED - 96)) | (1 << (ClickHouseParser.MAX - 96)) | (1 << (ClickHouseParser.MERGES - 96)) | (1 << (ClickHouseParser.MIN - 96)) | (1 << (ClickHouseParser.MODIFY - 96)) | (1 << (ClickHouseParser.MOVE - 96)) | (1 << (ClickHouseParser.MUTATION - 96)) | (1 << (ClickHouseParser.NO - 96)) | (1 << (ClickHouseParser.NOT - 96)) | (1 << (ClickHouseParser.NULLS - 96)) | (1 << (ClickHouseParser.OFFSET - 96)) | (1 << (ClickHouseParser.ON - 96)) | (1 << (ClickHouseParser.OPTIMIZE - 96)) | (1 << (ClickHouseParser.OR - 96)) | (1 << (ClickHouseParser.ORDER - 96)) | (1 << (ClickHouseParser.OUTER - 96)) | (1 << (ClickHouseParser.OUTFILE - 96)) | (1 << (ClickHouseParser.OVER - 96)) | (1 << (ClickHouseParser.PARTITION - 96)) | (1 << (ClickHouseParser.POPULATE - 96)) | (1 << (ClickHouseParser.PRECEDING - 96)))) !== 0) || ((((_la - 128)) & ~0x1f) == 0 && ((1 << (_la - 128)) & ((1 << (ClickHouseParser.PREWHERE - 128)) | (1 << (ClickHouseParser.PRIMARY - 128)) | (1 << (ClickHouseParser.RANGE - 128)) | (1 << (ClickHouseParser.RELOAD - 128)) | (1 << (ClickHouseParser.REMOVE - 128)) | (1 << (ClickHouseParser.RENAME - 128)) | (1 << (ClickHouseParser.REPLACE - 128)) | (1 << (ClickHouseParser.REPLICA - 128)) | (1 << (ClickHouseParser.REPLICATED - 128)) | (1 << (ClickHouseParser.RIGHT - 128)) | (1 << (ClickHouseParser.ROLLUP - 128)) | (1 << (ClickHouseParser.ROW - 128)) | (1 << (ClickHouseParser.ROWS - 128)) | (1 << (ClickHouseParser.SAMPLE - 128)) | (1 << (ClickHouseParser.SELECT - 128)) | (1 << (ClickHouseParser.SEMI - 128)) | (1 << (ClickHouseParser.SENDS - 128)) | (1 << (ClickHouseParser.SET - 128)) | (1 << (ClickHouseParser.SETTINGS - 128)) | (1 << (ClickHouseParser.SHOW - 128)) | (1 << (ClickHouseParser.SOURCE - 128)) | (1 << (ClickHouseParser.START - 128)) | (1 << (ClickHouseParser.STOP - 128)) | (1 << (ClickHouseParser.SUBSTRING - 128)) | (1 << (ClickHouseParser.SYNC - 128)) | (1 << (ClickHouseParser.SYNTAX - 128)) | (1 << (ClickHouseParser.SYSTEM - 128)) | (1 << (ClickHouseParser.TABLE - 128)) | (1 << (ClickHouseParser.TABLES - 128)))) !== 0) || ((((_la - 160)) & ~0x1f) == 0 && ((1 << (_la - 160)) & ((1 << (ClickHouseParser.TEMPORARY - 160)) | (1 << (ClickHouseParser.TEST - 160)) | (1 << (ClickHouseParser.THEN - 160)) | (1 << (ClickHouseParser.TIES - 160)) | (1 << (ClickHouseParser.TIMEOUT - 160)) | (1 << (ClickHouseParser.TIMESTAMP - 160)) | (1 << (ClickHouseParser.TO - 160)) | (1 << (ClickHouseParser.TOP - 160)) | (1 << (ClickHouseParser.TOTALS - 160)) | (1 << (ClickHouseParser.TRAILING - 160)) | (1 << (ClickHouseParser.TRIM - 160)) | (1 << (ClickHouseParser.TRUNCATE - 160)) | (1 << (ClickHouseParser.TTL - 160)) | (1 << (ClickHouseParser.TYPE - 160)) | (1 << (ClickHouseParser.UNBOUNDED - 160)) | (1 << (ClickHouseParser.UNION - 160)) | (1 << (ClickHouseParser.UPDATE - 160)) | (1 << (ClickHouseParser.USE - 160)) | (1 << (ClickHouseParser.USING - 160)) | (1 << (ClickHouseParser.UUID - 160)) | (1 << (ClickHouseParser.VALUES - 160)) | (1 << (ClickHouseParser.VIEW - 160)) | (1 << (ClickHouseParser.VOLUME - 160)) | (1 << (ClickHouseParser.WATCH - 160)) | (1 << (ClickHouseParser.WHEN - 160)) | (1 << (ClickHouseParser.WHERE - 160)) | (1 << (ClickHouseParser.WINDOW - 160)) | (1 << (ClickHouseParser.WITH - 160)) | (1 << (ClickHouseParser.JSON_FALSE - 160)) | (1 << (ClickHouseParser.JSON_TRUE - 160)))) !== 0))) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function KeywordForAliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_keywordForAlias;
    return this;
}

KeywordForAliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
KeywordForAliasContext.prototype.constructor = KeywordForAliasContext;

KeywordForAliasContext.prototype.DATE = function() {
    return this.getToken(ClickHouseParser.DATE, 0);
};

KeywordForAliasContext.prototype.FIRST = function() {
    return this.getToken(ClickHouseParser.FIRST, 0);
};

KeywordForAliasContext.prototype.ID = function() {
    return this.getToken(ClickHouseParser.ID, 0);
};

KeywordForAliasContext.prototype.KEY = function() {
    return this.getToken(ClickHouseParser.KEY, 0);
};

KeywordForAliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterKeywordForAlias(this);
	}
};

KeywordForAliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitKeywordForAlias(this);
	}
};

KeywordForAliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitKeywordForAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.KeywordForAliasContext = KeywordForAliasContext;

ClickHouseParser.prototype.keywordForAlias = function() {

    var localctx = new KeywordForAliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 224, ClickHouseParser.RULE_keywordForAlias);
    var _la = 0; // Token type
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2016;
        _la = this._input.LA(1);
        if(!(_la===ClickHouseParser.DATE || _la===ClickHouseParser.FIRST || _la===ClickHouseParser.ID || _la===ClickHouseParser.KEY)) {
        this._errHandler.recoverInline(this);
        }
        else {
        	this._errHandler.reportMatch(this);
            this.consume();
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function AliasContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_alias;
    return this;
}

AliasContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
AliasContext.prototype.constructor = AliasContext;

AliasContext.prototype.IDENTIFIER = function() {
    return this.getToken(ClickHouseParser.IDENTIFIER, 0);
};

AliasContext.prototype.keywordForAlias = function() {
    return this.getTypedRuleContext(KeywordForAliasContext,0);
};

AliasContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterAlias(this);
	}
};

AliasContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitAlias(this);
	}
};

AliasContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitAlias(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.AliasContext = AliasContext;

ClickHouseParser.prototype.alias = function() {

    var localctx = new AliasContext(this, this._ctx, this.state);
    this.enterRule(localctx, 226, ClickHouseParser.RULE_alias);
    try {
        this.state = 2020;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 2018;
            this.match(ClickHouseParser.IDENTIFIER);
            break;
        case ClickHouseParser.DATE:
        case ClickHouseParser.FIRST:
        case ClickHouseParser.ID:
        case ClickHouseParser.KEY:
            this.enterOuterAlt(localctx, 2);
            this.state = 2019;
            this.keywordForAlias();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_identifier;
    return this;
}

IdentifierContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierContext.prototype.constructor = IdentifierContext;

IdentifierContext.prototype.IDENTIFIER = function() {
    return this.getToken(ClickHouseParser.IDENTIFIER, 0);
};

IdentifierContext.prototype.interval = function() {
    return this.getTypedRuleContext(IntervalContext,0);
};

IdentifierContext.prototype.keyword = function() {
    return this.getTypedRuleContext(KeywordContext,0);
};

IdentifierContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterIdentifier(this);
	}
};

IdentifierContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitIdentifier(this);
	}
};

IdentifierContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitIdentifier(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.IdentifierContext = IdentifierContext;

ClickHouseParser.prototype.identifier = function() {

    var localctx = new IdentifierContext(this, this._ctx, this.state);
    this.enterRule(localctx, 228, ClickHouseParser.RULE_identifier);
    try {
        this.state = 2025;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 2022;
            this.match(ClickHouseParser.IDENTIFIER);
            break;
        case ClickHouseParser.DAY:
        case ClickHouseParser.HOUR:
        case ClickHouseParser.MINUTE:
        case ClickHouseParser.MONTH:
        case ClickHouseParser.QUARTER:
        case ClickHouseParser.SECOND:
        case ClickHouseParser.WEEK:
        case ClickHouseParser.YEAR:
            this.enterOuterAlt(localctx, 2);
            this.state = 2023;
            this.interval();
            break;
        case ClickHouseParser.AFTER:
        case ClickHouseParser.ALIAS:
        case ClickHouseParser.ALL:
        case ClickHouseParser.ALTER:
        case ClickHouseParser.AND:
        case ClickHouseParser.ANTI:
        case ClickHouseParser.ANY:
        case ClickHouseParser.ARRAY:
        case ClickHouseParser.AS:
        case ClickHouseParser.ASCENDING:
        case ClickHouseParser.ASOF:
        case ClickHouseParser.AST:
        case ClickHouseParser.ASYNC:
        case ClickHouseParser.ATTACH:
        case ClickHouseParser.BETWEEN:
        case ClickHouseParser.BOTH:
        case ClickHouseParser.BY:
        case ClickHouseParser.CASE:
        case ClickHouseParser.CAST:
        case ClickHouseParser.CHECK:
        case ClickHouseParser.CLEAR:
        case ClickHouseParser.CLUSTER:
        case ClickHouseParser.CODEC:
        case ClickHouseParser.COLLATE:
        case ClickHouseParser.COLUMN:
        case ClickHouseParser.COMMENT:
        case ClickHouseParser.CONSTRAINT:
        case ClickHouseParser.CREATE:
        case ClickHouseParser.CROSS:
        case ClickHouseParser.CUBE:
        case ClickHouseParser.CURRENT:
        case ClickHouseParser.DATABASE:
        case ClickHouseParser.DATABASES:
        case ClickHouseParser.DATE:
        case ClickHouseParser.DEDUPLICATE:
        case ClickHouseParser.DEFAULT:
        case ClickHouseParser.DELAY:
        case ClickHouseParser.DELETE:
        case ClickHouseParser.DESC:
        case ClickHouseParser.DESCENDING:
        case ClickHouseParser.DESCRIBE:
        case ClickHouseParser.DETACH:
        case ClickHouseParser.DICTIONARIES:
        case ClickHouseParser.DICTIONARY:
        case ClickHouseParser.DISK:
        case ClickHouseParser.DISTINCT:
        case ClickHouseParser.DISTRIBUTED:
        case ClickHouseParser.DROP:
        case ClickHouseParser.ELSE:
        case ClickHouseParser.END:
        case ClickHouseParser.ENGINE:
        case ClickHouseParser.EVENTS:
        case ClickHouseParser.EXISTS:
        case ClickHouseParser.EXPLAIN:
        case ClickHouseParser.EXPRESSION:
        case ClickHouseParser.EXTRACT:
        case ClickHouseParser.FETCHES:
        case ClickHouseParser.FINAL:
        case ClickHouseParser.FIRST:
        case ClickHouseParser.FLUSH:
        case ClickHouseParser.FOLLOWING:
        case ClickHouseParser.FOR:
        case ClickHouseParser.FORMAT:
        case ClickHouseParser.FREEZE:
        case ClickHouseParser.FROM:
        case ClickHouseParser.FULL:
        case ClickHouseParser.FUNCTION:
        case ClickHouseParser.GLOBAL:
        case ClickHouseParser.GRANULARITY:
        case ClickHouseParser.GROUP:
        case ClickHouseParser.HAVING:
        case ClickHouseParser.HIERARCHICAL:
        case ClickHouseParser.ID:
        case ClickHouseParser.IF:
        case ClickHouseParser.ILIKE:
        case ClickHouseParser.IN:
        case ClickHouseParser.INDEX:
        case ClickHouseParser.INJECTIVE:
        case ClickHouseParser.INNER:
        case ClickHouseParser.INSERT:
        case ClickHouseParser.INTERVAL:
        case ClickHouseParser.INTO:
        case ClickHouseParser.IS:
        case ClickHouseParser.IS_OBJECT_ID:
        case ClickHouseParser.JOIN:
        case ClickHouseParser.KEY:
        case ClickHouseParser.KILL:
        case ClickHouseParser.LAST:
        case ClickHouseParser.LAYOUT:
        case ClickHouseParser.LEADING:
        case ClickHouseParser.LEFT:
        case ClickHouseParser.LIFETIME:
        case ClickHouseParser.LIKE:
        case ClickHouseParser.LIMIT:
        case ClickHouseParser.LIVE:
        case ClickHouseParser.LOCAL:
        case ClickHouseParser.LOGS:
        case ClickHouseParser.MATERIALIZE:
        case ClickHouseParser.MATERIALIZED:
        case ClickHouseParser.MAX:
        case ClickHouseParser.MERGES:
        case ClickHouseParser.MIN:
        case ClickHouseParser.MODIFY:
        case ClickHouseParser.MOVE:
        case ClickHouseParser.MUTATION:
        case ClickHouseParser.NO:
        case ClickHouseParser.NOT:
        case ClickHouseParser.NULLS:
        case ClickHouseParser.OFFSET:
        case ClickHouseParser.ON:
        case ClickHouseParser.OPTIMIZE:
        case ClickHouseParser.OR:
        case ClickHouseParser.ORDER:
        case ClickHouseParser.OUTER:
        case ClickHouseParser.OUTFILE:
        case ClickHouseParser.OVER:
        case ClickHouseParser.PARTITION:
        case ClickHouseParser.POPULATE:
        case ClickHouseParser.PRECEDING:
        case ClickHouseParser.PREWHERE:
        case ClickHouseParser.PRIMARY:
        case ClickHouseParser.RANGE:
        case ClickHouseParser.RELOAD:
        case ClickHouseParser.REMOVE:
        case ClickHouseParser.RENAME:
        case ClickHouseParser.REPLACE:
        case ClickHouseParser.REPLICA:
        case ClickHouseParser.REPLICATED:
        case ClickHouseParser.RIGHT:
        case ClickHouseParser.ROLLUP:
        case ClickHouseParser.ROW:
        case ClickHouseParser.ROWS:
        case ClickHouseParser.SAMPLE:
        case ClickHouseParser.SELECT:
        case ClickHouseParser.SEMI:
        case ClickHouseParser.SENDS:
        case ClickHouseParser.SET:
        case ClickHouseParser.SETTINGS:
        case ClickHouseParser.SHOW:
        case ClickHouseParser.SOURCE:
        case ClickHouseParser.START:
        case ClickHouseParser.STOP:
        case ClickHouseParser.SUBSTRING:
        case ClickHouseParser.SYNC:
        case ClickHouseParser.SYNTAX:
        case ClickHouseParser.SYSTEM:
        case ClickHouseParser.TABLE:
        case ClickHouseParser.TABLES:
        case ClickHouseParser.TEMPORARY:
        case ClickHouseParser.TEST:
        case ClickHouseParser.THEN:
        case ClickHouseParser.TIES:
        case ClickHouseParser.TIMEOUT:
        case ClickHouseParser.TIMESTAMP:
        case ClickHouseParser.TO:
        case ClickHouseParser.TOP:
        case ClickHouseParser.TOTALS:
        case ClickHouseParser.TRAILING:
        case ClickHouseParser.TRIM:
        case ClickHouseParser.TRUNCATE:
        case ClickHouseParser.TTL:
        case ClickHouseParser.TYPE:
        case ClickHouseParser.UNBOUNDED:
        case ClickHouseParser.UNION:
        case ClickHouseParser.UPDATE:
        case ClickHouseParser.USE:
        case ClickHouseParser.USING:
        case ClickHouseParser.UUID:
        case ClickHouseParser.VALUES:
        case ClickHouseParser.VIEW:
        case ClickHouseParser.VOLUME:
        case ClickHouseParser.WATCH:
        case ClickHouseParser.WHEN:
        case ClickHouseParser.WHERE:
        case ClickHouseParser.WINDOW:
        case ClickHouseParser.WITH:
        case ClickHouseParser.JSON_FALSE:
        case ClickHouseParser.JSON_TRUE:
            this.enterOuterAlt(localctx, 3);
            this.state = 2024;
            this.keyword();
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function IdentifierOrNullContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_identifierOrNull;
    return this;
}

IdentifierOrNullContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
IdentifierOrNullContext.prototype.constructor = IdentifierOrNullContext;

IdentifierOrNullContext.prototype.identifier = function() {
    return this.getTypedRuleContext(IdentifierContext,0);
};

IdentifierOrNullContext.prototype.NULL_SQL = function() {
    return this.getToken(ClickHouseParser.NULL_SQL, 0);
};

IdentifierOrNullContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterIdentifierOrNull(this);
	}
};

IdentifierOrNullContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitIdentifierOrNull(this);
	}
};

IdentifierOrNullContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitIdentifierOrNull(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.IdentifierOrNullContext = IdentifierOrNullContext;

ClickHouseParser.prototype.identifierOrNull = function() {

    var localctx = new IdentifierOrNullContext(this, this._ctx, this.state);
    this.enterRule(localctx, 230, ClickHouseParser.RULE_identifierOrNull);
    try {
        this.state = 2029;
        this._errHandler.sync(this);
        switch(this._input.LA(1)) {
        case ClickHouseParser.AFTER:
        case ClickHouseParser.ALIAS:
        case ClickHouseParser.ALL:
        case ClickHouseParser.ALTER:
        case ClickHouseParser.AND:
        case ClickHouseParser.ANTI:
        case ClickHouseParser.ANY:
        case ClickHouseParser.ARRAY:
        case ClickHouseParser.AS:
        case ClickHouseParser.ASCENDING:
        case ClickHouseParser.ASOF:
        case ClickHouseParser.AST:
        case ClickHouseParser.ASYNC:
        case ClickHouseParser.ATTACH:
        case ClickHouseParser.BETWEEN:
        case ClickHouseParser.BOTH:
        case ClickHouseParser.BY:
        case ClickHouseParser.CASE:
        case ClickHouseParser.CAST:
        case ClickHouseParser.CHECK:
        case ClickHouseParser.CLEAR:
        case ClickHouseParser.CLUSTER:
        case ClickHouseParser.CODEC:
        case ClickHouseParser.COLLATE:
        case ClickHouseParser.COLUMN:
        case ClickHouseParser.COMMENT:
        case ClickHouseParser.CONSTRAINT:
        case ClickHouseParser.CREATE:
        case ClickHouseParser.CROSS:
        case ClickHouseParser.CUBE:
        case ClickHouseParser.CURRENT:
        case ClickHouseParser.DATABASE:
        case ClickHouseParser.DATABASES:
        case ClickHouseParser.DATE:
        case ClickHouseParser.DAY:
        case ClickHouseParser.DEDUPLICATE:
        case ClickHouseParser.DEFAULT:
        case ClickHouseParser.DELAY:
        case ClickHouseParser.DELETE:
        case ClickHouseParser.DESC:
        case ClickHouseParser.DESCENDING:
        case ClickHouseParser.DESCRIBE:
        case ClickHouseParser.DETACH:
        case ClickHouseParser.DICTIONARIES:
        case ClickHouseParser.DICTIONARY:
        case ClickHouseParser.DISK:
        case ClickHouseParser.DISTINCT:
        case ClickHouseParser.DISTRIBUTED:
        case ClickHouseParser.DROP:
        case ClickHouseParser.ELSE:
        case ClickHouseParser.END:
        case ClickHouseParser.ENGINE:
        case ClickHouseParser.EVENTS:
        case ClickHouseParser.EXISTS:
        case ClickHouseParser.EXPLAIN:
        case ClickHouseParser.EXPRESSION:
        case ClickHouseParser.EXTRACT:
        case ClickHouseParser.FETCHES:
        case ClickHouseParser.FINAL:
        case ClickHouseParser.FIRST:
        case ClickHouseParser.FLUSH:
        case ClickHouseParser.FOLLOWING:
        case ClickHouseParser.FOR:
        case ClickHouseParser.FORMAT:
        case ClickHouseParser.FREEZE:
        case ClickHouseParser.FROM:
        case ClickHouseParser.FULL:
        case ClickHouseParser.FUNCTION:
        case ClickHouseParser.GLOBAL:
        case ClickHouseParser.GRANULARITY:
        case ClickHouseParser.GROUP:
        case ClickHouseParser.HAVING:
        case ClickHouseParser.HIERARCHICAL:
        case ClickHouseParser.HOUR:
        case ClickHouseParser.ID:
        case ClickHouseParser.IF:
        case ClickHouseParser.ILIKE:
        case ClickHouseParser.IN:
        case ClickHouseParser.INDEX:
        case ClickHouseParser.INJECTIVE:
        case ClickHouseParser.INNER:
        case ClickHouseParser.INSERT:
        case ClickHouseParser.INTERVAL:
        case ClickHouseParser.INTO:
        case ClickHouseParser.IS:
        case ClickHouseParser.IS_OBJECT_ID:
        case ClickHouseParser.JOIN:
        case ClickHouseParser.KEY:
        case ClickHouseParser.KILL:
        case ClickHouseParser.LAST:
        case ClickHouseParser.LAYOUT:
        case ClickHouseParser.LEADING:
        case ClickHouseParser.LEFT:
        case ClickHouseParser.LIFETIME:
        case ClickHouseParser.LIKE:
        case ClickHouseParser.LIMIT:
        case ClickHouseParser.LIVE:
        case ClickHouseParser.LOCAL:
        case ClickHouseParser.LOGS:
        case ClickHouseParser.MATERIALIZE:
        case ClickHouseParser.MATERIALIZED:
        case ClickHouseParser.MAX:
        case ClickHouseParser.MERGES:
        case ClickHouseParser.MIN:
        case ClickHouseParser.MINUTE:
        case ClickHouseParser.MODIFY:
        case ClickHouseParser.MONTH:
        case ClickHouseParser.MOVE:
        case ClickHouseParser.MUTATION:
        case ClickHouseParser.NO:
        case ClickHouseParser.NOT:
        case ClickHouseParser.NULLS:
        case ClickHouseParser.OFFSET:
        case ClickHouseParser.ON:
        case ClickHouseParser.OPTIMIZE:
        case ClickHouseParser.OR:
        case ClickHouseParser.ORDER:
        case ClickHouseParser.OUTER:
        case ClickHouseParser.OUTFILE:
        case ClickHouseParser.OVER:
        case ClickHouseParser.PARTITION:
        case ClickHouseParser.POPULATE:
        case ClickHouseParser.PRECEDING:
        case ClickHouseParser.PREWHERE:
        case ClickHouseParser.PRIMARY:
        case ClickHouseParser.QUARTER:
        case ClickHouseParser.RANGE:
        case ClickHouseParser.RELOAD:
        case ClickHouseParser.REMOVE:
        case ClickHouseParser.RENAME:
        case ClickHouseParser.REPLACE:
        case ClickHouseParser.REPLICA:
        case ClickHouseParser.REPLICATED:
        case ClickHouseParser.RIGHT:
        case ClickHouseParser.ROLLUP:
        case ClickHouseParser.ROW:
        case ClickHouseParser.ROWS:
        case ClickHouseParser.SAMPLE:
        case ClickHouseParser.SECOND:
        case ClickHouseParser.SELECT:
        case ClickHouseParser.SEMI:
        case ClickHouseParser.SENDS:
        case ClickHouseParser.SET:
        case ClickHouseParser.SETTINGS:
        case ClickHouseParser.SHOW:
        case ClickHouseParser.SOURCE:
        case ClickHouseParser.START:
        case ClickHouseParser.STOP:
        case ClickHouseParser.SUBSTRING:
        case ClickHouseParser.SYNC:
        case ClickHouseParser.SYNTAX:
        case ClickHouseParser.SYSTEM:
        case ClickHouseParser.TABLE:
        case ClickHouseParser.TABLES:
        case ClickHouseParser.TEMPORARY:
        case ClickHouseParser.TEST:
        case ClickHouseParser.THEN:
        case ClickHouseParser.TIES:
        case ClickHouseParser.TIMEOUT:
        case ClickHouseParser.TIMESTAMP:
        case ClickHouseParser.TO:
        case ClickHouseParser.TOP:
        case ClickHouseParser.TOTALS:
        case ClickHouseParser.TRAILING:
        case ClickHouseParser.TRIM:
        case ClickHouseParser.TRUNCATE:
        case ClickHouseParser.TTL:
        case ClickHouseParser.TYPE:
        case ClickHouseParser.UNBOUNDED:
        case ClickHouseParser.UNION:
        case ClickHouseParser.UPDATE:
        case ClickHouseParser.USE:
        case ClickHouseParser.USING:
        case ClickHouseParser.UUID:
        case ClickHouseParser.VALUES:
        case ClickHouseParser.VIEW:
        case ClickHouseParser.VOLUME:
        case ClickHouseParser.WATCH:
        case ClickHouseParser.WEEK:
        case ClickHouseParser.WHEN:
        case ClickHouseParser.WHERE:
        case ClickHouseParser.WINDOW:
        case ClickHouseParser.WITH:
        case ClickHouseParser.YEAR:
        case ClickHouseParser.JSON_FALSE:
        case ClickHouseParser.JSON_TRUE:
        case ClickHouseParser.IDENTIFIER:
            this.enterOuterAlt(localctx, 1);
            this.state = 2027;
            this.identifier();
            break;
        case ClickHouseParser.NULL_SQL:
            this.enterOuterAlt(localctx, 2);
            this.state = 2028;
            this.match(ClickHouseParser.NULL_SQL);
            break;
        default:
            throw new antlr4.error.NoViableAltException(this);
        }
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


function EnumValueContext(parser, parent, invokingState) {
	if(parent===undefined) {
	    parent = null;
	}
	if(invokingState===undefined || invokingState===null) {
		invokingState = -1;
	}
	antlr4.ParserRuleContext.call(this, parent, invokingState);
    this.parser = parser;
    this.ruleIndex = ClickHouseParser.RULE_enumValue;
    return this;
}

EnumValueContext.prototype = Object.create(antlr4.ParserRuleContext.prototype);
EnumValueContext.prototype.constructor = EnumValueContext;

EnumValueContext.prototype.STRING_LITERAL = function() {
    return this.getToken(ClickHouseParser.STRING_LITERAL, 0);
};

EnumValueContext.prototype.EQ_SINGLE = function() {
    return this.getToken(ClickHouseParser.EQ_SINGLE, 0);
};

EnumValueContext.prototype.numberLiteral = function() {
    return this.getTypedRuleContext(NumberLiteralContext,0);
};

EnumValueContext.prototype.enterRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.enterEnumValue(this);
	}
};

EnumValueContext.prototype.exitRule = function(listener) {
    if(listener instanceof ClickHouseParserListener ) {
        listener.exitEnumValue(this);
	}
};

EnumValueContext.prototype.accept = function(visitor) {
    if ( visitor instanceof ClickHouseParserVisitor ) {
        return visitor.visitEnumValue(this);
    } else {
        return visitor.visitChildren(this);
    }
};




ClickHouseParser.EnumValueContext = EnumValueContext;

ClickHouseParser.prototype.enumValue = function() {

    var localctx = new EnumValueContext(this, this._ctx, this.state);
    this.enterRule(localctx, 232, ClickHouseParser.RULE_enumValue);
    try {
        this.enterOuterAlt(localctx, 1);
        this.state = 2031;
        this.match(ClickHouseParser.STRING_LITERAL);
        this.state = 2032;
        this.match(ClickHouseParser.EQ_SINGLE);
        this.state = 2033;
        this.numberLiteral();
    } catch (re) {
    	if(re instanceof antlr4.error.RecognitionException) {
	        localctx.exception = re;
	        this._errHandler.reportError(this, re);
	        this._errHandler.recover(this, re);
	    } else {
	    	throw re;
	    }
    } finally {
        this.exitRule();
    }
    return localctx;
};


ClickHouseParser.prototype.sempred = function(localctx, ruleIndex, predIndex) {
	switch(ruleIndex) {
	case 13:
			return this.dictionaryAttrDfnt_sempred(localctx, predIndex);
	case 14:
			return this.dictionaryEngineClause_sempred(localctx, predIndex);
	case 27:
			return this.engineClause_sempred(localctx, predIndex);
	case 69:
			return this.joinExpr_sempred(localctx, predIndex);
	case 95:
			return this.columnExpr_sempred(localctx, predIndex);
	case 101:
			return this.tableExpr_sempred(localctx, predIndex);
    default:
        throw "No predicate with index:" + ruleIndex;
   }
};

ClickHouseParser.prototype.dictionaryAttrDfnt_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 0:
			return !localctx.attrs.count("default");
		case 1:
			return !localctx.attrs.count("expression");
		case 2:
			return !localctx.attrs.count("hierarchical");
		case 3:
			return !localctx.attrs.count("injective");
		case 4:
			return !localctx.attrs.count("is_object_id");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ClickHouseParser.prototype.dictionaryEngineClause_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 5:
			return !localctx.clauses.count("source");
		case 6:
			return !localctx.clauses.count("lifetime");
		case 7:
			return !localctx.clauses.count("layout");
		case 8:
			return !localctx.clauses.count("range");
		case 9:
			return !localctx.clauses.count("settings");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ClickHouseParser.prototype.engineClause_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 10:
			return !localctx.clauses.count("orderByClause");
		case 11:
			return !localctx.clauses.count("partitionByClause");
		case 12:
			return !localctx.clauses.count("primaryKeyClause");
		case 13:
			return !localctx.clauses.count("sampleByClause");
		case 14:
			return !localctx.clauses.count("ttlClause");
		case 15:
			return !localctx.clauses.count("settingsClause");
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ClickHouseParser.prototype.joinExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 16:
			return this.precpred(this._ctx, 3);
		case 17:
			return this.precpred(this._ctx, 4);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ClickHouseParser.prototype.columnExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 18:
			return this.precpred(this._ctx, 16);
		case 19:
			return this.precpred(this._ctx, 15);
		case 20:
			return this.precpred(this._ctx, 14);
		case 21:
			return this.precpred(this._ctx, 11);
		case 22:
			return this.precpred(this._ctx, 10);
		case 23:
			return this.precpred(this._ctx, 9);
		case 24:
			return this.precpred(this._ctx, 8);
		case 25:
			return this.precpred(this._ctx, 19);
		case 26:
			return this.precpred(this._ctx, 18);
		case 27:
			return this.precpred(this._ctx, 13);
		case 28:
			return this.precpred(this._ctx, 7);
		default:
			throw "No predicate with index:" + predIndex;
	}
};

ClickHouseParser.prototype.tableExpr_sempred = function(localctx, predIndex) {
	switch(predIndex) {
		case 29:
			return this.precpred(this._ctx, 1);
		default:
			throw "No predicate with index:" + predIndex;
	}
};


exports.ClickHouseParser = ClickHouseParser;
